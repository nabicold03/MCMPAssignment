
FinalProjectVxl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000415c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08004268  08004268  00014268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004384  08004384  000200e4  2**0
                  CONTENTS
  4 .ARM          00000000  08004384  08004384  000200e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004384  08004384  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004384  08004384  00014384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004388  08004388  00014388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  0800438c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  200000e4  08004470  000200e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08004470  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011781  00000000  00000000  0002010d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024df  00000000  00000000  0003188e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00033d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  00034a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019140  00000000  00000000  000356a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f11f  00000000  00000000  0004e7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c19a  00000000  00000000  0005d907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9aa1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cdc  00000000  00000000  000e9af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e4 	.word	0x200000e4
 8000128:	00000000 	.word	0x00000000
 800012c:	08004250 	.word	0x08004250

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e8 	.word	0x200000e8
 8000148:	08004250 	.word	0x08004250

0800014c <isButtonPressed>:
int TimerForKeyPress = 200;

int button_ports[4] = {A0_GPIO_Port, A1_GPIO_Port, A2_GPIO_Port, A3_GPIO_Port};
int button_pins[4] = {A0_Pin, A1_Pin, A2_Pin, A3_Pin};

int isButtonPressed(int key){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[key] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[key] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000100 	.word	0x20000100

08000180 <subKeyProcess>:
void subKeyProcess(int key){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[key] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000100 	.word	0x20000100

080001a0 <getKeyInput>:
void getKeyInput(int key){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	KeyReg[key][0] = KeyReg[key][1];
 80001a8:	4a41      	ldr	r2, [pc, #260]	; (80002b0 <getKeyInput+0x110>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	011b      	lsls	r3, r3, #4
 80001ae:	4413      	add	r3, r2
 80001b0:	3304      	adds	r3, #4
 80001b2:	681a      	ldr	r2, [r3, #0]
 80001b4:	493e      	ldr	r1, [pc, #248]	; (80002b0 <getKeyInput+0x110>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	011b      	lsls	r3, r3, #4
 80001ba:	440b      	add	r3, r1
 80001bc:	601a      	str	r2, [r3, #0]
	KeyReg[key][1] = KeyReg[key][2];
 80001be:	4a3c      	ldr	r2, [pc, #240]	; (80002b0 <getKeyInput+0x110>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	011b      	lsls	r3, r3, #4
 80001c4:	4413      	add	r3, r2
 80001c6:	3308      	adds	r3, #8
 80001c8:	681a      	ldr	r2, [r3, #0]
 80001ca:	4939      	ldr	r1, [pc, #228]	; (80002b0 <getKeyInput+0x110>)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	011b      	lsls	r3, r3, #4
 80001d0:	440b      	add	r3, r1
 80001d2:	3304      	adds	r3, #4
 80001d4:	601a      	str	r2, [r3, #0]
	KeyReg[key][2] = HAL_GPIO_ReadPin(button_ports[key],button_pins[key]);
 80001d6:	4a37      	ldr	r2, [pc, #220]	; (80002b4 <getKeyInput+0x114>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001de:	4618      	mov	r0, r3
 80001e0:	4a35      	ldr	r2, [pc, #212]	; (80002b8 <getKeyInput+0x118>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001e8:	b29b      	uxth	r3, r3
 80001ea:	4619      	mov	r1, r3
 80001ec:	f001 fc42 	bl	8001a74 <HAL_GPIO_ReadPin>
 80001f0:	4603      	mov	r3, r0
 80001f2:	4619      	mov	r1, r3
 80001f4:	4a2e      	ldr	r2, [pc, #184]	; (80002b0 <getKeyInput+0x110>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	011b      	lsls	r3, r3, #4
 80001fa:	4413      	add	r3, r2
 80001fc:	3308      	adds	r3, #8
 80001fe:	6019      	str	r1, [r3, #0]
	if((KeyReg[key][0] == KeyReg[key][1]) && (KeyReg[key][1] == KeyReg[key][2])){
 8000200:	4a2b      	ldr	r2, [pc, #172]	; (80002b0 <getKeyInput+0x110>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	011b      	lsls	r3, r3, #4
 8000206:	4413      	add	r3, r2
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	4929      	ldr	r1, [pc, #164]	; (80002b0 <getKeyInput+0x110>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	011b      	lsls	r3, r3, #4
 8000210:	440b      	add	r3, r1
 8000212:	3304      	adds	r3, #4
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	429a      	cmp	r2, r3
 8000218:	d146      	bne.n	80002a8 <getKeyInput+0x108>
 800021a:	4a25      	ldr	r2, [pc, #148]	; (80002b0 <getKeyInput+0x110>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	011b      	lsls	r3, r3, #4
 8000220:	4413      	add	r3, r2
 8000222:	3304      	adds	r3, #4
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	4922      	ldr	r1, [pc, #136]	; (80002b0 <getKeyInput+0x110>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	011b      	lsls	r3, r3, #4
 800022c:	440b      	add	r3, r1
 800022e:	3308      	adds	r3, #8
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	429a      	cmp	r2, r3
 8000234:	d138      	bne.n	80002a8 <getKeyInput+0x108>
		if(KeyReg[key][3] != KeyReg[key][2]){
 8000236:	4a1e      	ldr	r2, [pc, #120]	; (80002b0 <getKeyInput+0x110>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	011b      	lsls	r3, r3, #4
 800023c:	4413      	add	r3, r2
 800023e:	330c      	adds	r3, #12
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	491b      	ldr	r1, [pc, #108]	; (80002b0 <getKeyInput+0x110>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	011b      	lsls	r3, r3, #4
 8000248:	440b      	add	r3, r1
 800024a:	3308      	adds	r3, #8
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	429a      	cmp	r2, r3
 8000250:	d01a      	beq.n	8000288 <getKeyInput+0xe8>
			KeyReg[key][3] = KeyReg[key][2];
 8000252:	4a17      	ldr	r2, [pc, #92]	; (80002b0 <getKeyInput+0x110>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	011b      	lsls	r3, r3, #4
 8000258:	4413      	add	r3, r2
 800025a:	3308      	adds	r3, #8
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	4914      	ldr	r1, [pc, #80]	; (80002b0 <getKeyInput+0x110>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	011b      	lsls	r3, r3, #4
 8000264:	440b      	add	r3, r1
 8000266:	330c      	adds	r3, #12
 8000268:	601a      	str	r2, [r3, #0]
			if(KeyReg[key][2] == PRESSED_STATE){
 800026a:	4a11      	ldr	r2, [pc, #68]	; (80002b0 <getKeyInput+0x110>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	011b      	lsls	r3, r3, #4
 8000270:	4413      	add	r3, r2
 8000272:	3308      	adds	r3, #8
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d116      	bne.n	80002a8 <getKeyInput+0x108>
				subKeyProcess(key);
 800027a:	6878      	ldr	r0, [r7, #4]
 800027c:	f7ff ff80 	bl	8000180 <subKeyProcess>
				TimerForKeyPress = 200;
 8000280:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <getKeyInput+0x11c>)
 8000282:	22c8      	movs	r2, #200	; 0xc8
 8000284:	601a      	str	r2, [r3, #0]
			if(TimerForKeyPress == 0){
				KeyReg[key][3] = NORMAL_STATE;
			}
		}
	}
}
 8000286:	e00f      	b.n	80002a8 <getKeyInput+0x108>
			TimerForKeyPress--;
 8000288:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <getKeyInput+0x11c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	3b01      	subs	r3, #1
 800028e:	4a0b      	ldr	r2, [pc, #44]	; (80002bc <getKeyInput+0x11c>)
 8000290:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 8000292:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <getKeyInput+0x11c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d106      	bne.n	80002a8 <getKeyInput+0x108>
				KeyReg[key][3] = NORMAL_STATE;
 800029a:	4a05      	ldr	r2, [pc, #20]	; (80002b0 <getKeyInput+0x110>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	011b      	lsls	r3, r3, #4
 80002a0:	4413      	add	r3, r2
 80002a2:	330c      	adds	r3, #12
 80002a4:	2201      	movs	r2, #1
 80002a6:	601a      	str	r2, [r3, #0]
}
 80002a8:	bf00      	nop
 80002aa:	3708      	adds	r7, #8
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000044 	.word	0x20000044
 80002b8:	20000054 	.word	0x20000054
 80002bc:	20000040 	.word	0x20000040

080002c0 <fsm_automatic_run>:
 */

#include"fsm_automatic.h"
//int pedeson=0;
int pedesduration;
void fsm_automatic_run(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	switch(status){
 80002c4:	4b8d      	ldr	r3, [pc, #564]	; (80004fc <fsm_automatic_run+0x23c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	3b01      	subs	r3, #1
 80002ca:	2b04      	cmp	r3, #4
 80002cc:	f200 81f5 	bhi.w	80006ba <fsm_automatic_run+0x3fa>
 80002d0:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <fsm_automatic_run+0x18>)
 80002d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d6:	bf00      	nop
 80002d8:	080002ed 	.word	0x080002ed
 80002dc:	0800031f 	.word	0x0800031f
 80002e0:	08000429 	.word	0x08000429
 80002e4:	08000519 	.word	0x08000519
 80002e8:	080005eb 	.word	0x080005eb
		case INIT:
			//change state
			status=RED_GREEN;
 80002ec:	4b83      	ldr	r3, [pc, #524]	; (80004fc <fsm_automatic_run+0x23c>)
 80002ee:	2202      	movs	r2, #2
 80002f0:	601a      	str	r2, [r3, #0]
			setInitialValue(red_duration, green_duration);
 80002f2:	4b83      	ldr	r3, [pc, #524]	; (8000500 <fsm_automatic_run+0x240>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a83      	ldr	r2, [pc, #524]	; (8000504 <fsm_automatic_run+0x244>)
 80002f8:	6812      	ldr	r2, [r2, #0]
 80002fa:	4611      	mov	r1, r2
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 fbc1 	bl	8000a84 <setInitialValue>
			setTimer(green_duration*100,0);
 8000302:	4b80      	ldr	r3, [pc, #512]	; (8000504 <fsm_automatic_run+0x244>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2264      	movs	r2, #100	; 0x64
 8000308:	fb02 f303 	mul.w	r3, r2, r3
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f000 fe98 	bl	8001044 <setTimer>
			setTimer(100,1);
 8000314:	2101      	movs	r1, #1
 8000316:	2064      	movs	r0, #100	; 0x64
 8000318:	f000 fe94 	bl	8001044 <setTimer>
			break;
 800031c:	e1d6      	b.n	80006cc <fsm_automatic_run+0x40c>
		case RED_GREEN:
			setHorizontalLeds(SET,RESET,RESET);	//D4-5 horizontal
 800031e:	2200      	movs	r2, #0
 8000320:	2100      	movs	r1, #0
 8000322:	2001      	movs	r0, #1
 8000324:	f000 fbd2 	bl	8000acc <setHorizontalLeds>
			setVerticalLeds(RESET,SET, RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2101      	movs	r1, #1
 800032c:	2000      	movs	r0, #0
 800032e:	f000 fc13 	bl	8000b58 <setVerticalLeds>
			if(timer_flag[9]==1){
 8000332:	4b75      	ldr	r3, [pc, #468]	; (8000508 <fsm_automatic_run+0x248>)
 8000334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000336:	2b01      	cmp	r3, #1
 8000338:	d107      	bne.n	800034a <fsm_automatic_run+0x8a>
				pedeson=0;
 800033a:	4b74      	ldr	r3, [pc, #464]	; (800050c <fsm_automatic_run+0x24c>)
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
				setPedesLeds(RESET, RESET, RESET);	//enough time for 2 cycles, turnoff pedeslight
 8000340:	2200      	movs	r2, #0
 8000342:	2100      	movs	r1, #0
 8000344:	2000      	movs	r0, #0
 8000346:	f000 fc53 	bl	8000bf0 <setPedesLeds>
			}
			if(pedeson==1){
 800034a:	4b70      	ldr	r3, [pc, #448]	; (800050c <fsm_automatic_run+0x24c>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d104      	bne.n	800035c <fsm_automatic_run+0x9c>
				setPedesLeds(RESET,SET,RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	2101      	movs	r1, #1
 8000356:	2000      	movs	r0, #0
 8000358:	f000 fc4a 	bl	8000bf0 <setPedesLeds>
			}
			if(timer_flag[0] == 1){
 800035c:	4b6a      	ldr	r3, [pc, #424]	; (8000508 <fsm_automatic_run+0x248>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b01      	cmp	r3, #1
 8000362:	d118      	bne.n	8000396 <fsm_automatic_run+0xd6>
				setPedesLeds(RESET,RESET,RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2100      	movs	r1, #0
 8000368:	2000      	movs	r0, #0
 800036a:	f000 fc41 	bl	8000bf0 <setPedesLeds>
				setTimer(yellow_duration*100, 0);
 800036e:	4b68      	ldr	r3, [pc, #416]	; (8000510 <fsm_automatic_run+0x250>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	2264      	movs	r2, #100	; 0x64
 8000374:	fb02 f303 	mul.w	r3, r2, r3
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f000 fe62 	bl	8001044 <setTimer>
//				setHorizontalLeds(RESET,RESET,RESET); //D4-5 horizontal
//				setVerticalLeds(RESET,RESET, RESET);
				status = RED_YELLOW;
 8000380:	4b5e      	ldr	r3, [pc, #376]	; (80004fc <fsm_automatic_run+0x23c>)
 8000382:	2203      	movs	r2, #3
 8000384:	601a      	str	r2, [r3, #0]
				setInitialValue(yellow_duration, yellow_duration);
 8000386:	4b62      	ldr	r3, [pc, #392]	; (8000510 <fsm_automatic_run+0x250>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a61      	ldr	r2, [pc, #388]	; (8000510 <fsm_automatic_run+0x250>)
 800038c:	6812      	ldr	r2, [r2, #0]
 800038e:	4611      	mov	r1, r2
 8000390:	4618      	mov	r0, r3
 8000392:	f000 fb77 	bl	8000a84 <setInitialValue>
			}
			if(timer_flag[1] == 1){
 8000396:	4b5c      	ldr	r3, [pc, #368]	; (8000508 <fsm_automatic_run+0x248>)
 8000398:	685b      	ldr	r3, [r3, #4]
 800039a:	2b01      	cmp	r3, #1
 800039c:	d105      	bne.n	80003aa <fsm_automatic_run+0xea>
				countDown();
 800039e:	f000 fb4f 	bl	8000a40 <countDown>
				setTimer(100, 1);
 80003a2:	2101      	movs	r1, #1
 80003a4:	2064      	movs	r0, #100	; 0x64
 80003a6:	f000 fe4d 	bl	8001044 <setTimer>
			}
			if(isButtonPressed(1) == 1){ //change mode
 80003aa:	2001      	movs	r0, #1
 80003ac:	f7ff fece 	bl	800014c <isButtonPressed>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d115      	bne.n	80003e2 <fsm_automatic_run+0x122>
				setHorizontalLeds(RESET,RESET,RESET);	//turn off all leds
 80003b6:	2200      	movs	r2, #0
 80003b8:	2100      	movs	r1, #0
 80003ba:	2000      	movs	r0, #0
 80003bc:	f000 fb86 	bl	8000acc <setHorizontalLeds>
				setVerticalLeds(RESET,RESET, RESET);	//turn off all leds
 80003c0:	2200      	movs	r2, #0
 80003c2:	2100      	movs	r1, #0
 80003c4:	2000      	movs	r0, #0
 80003c6:	f000 fbc7 	bl	8000b58 <setVerticalLeds>
				setPedesLeds(RESET,RESET,RESET);		//turn off all leds
 80003ca:	2200      	movs	r2, #0
 80003cc:	2100      	movs	r1, #0
 80003ce:	2000      	movs	r0, #0
 80003d0:	f000 fc0e 	bl	8000bf0 <setPedesLeds>
				setTimer(100, 3);
 80003d4:	2103      	movs	r1, #3
 80003d6:	2064      	movs	r0, #100	; 0x64
 80003d8:	f000 fe34 	bl	8001044 <setTimer>
				status = MAN_RED;
 80003dc:	4b47      	ldr	r3, [pc, #284]	; (80004fc <fsm_automatic_run+0x23c>)
 80003de:	220d      	movs	r2, #13
 80003e0:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(0) == 1){
 80003e2:	2000      	movs	r0, #0
 80003e4:	f7ff feb2 	bl	800014c <isButtonPressed>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	f040 8167 	bne.w	80006be <fsm_automatic_run+0x3fe>
				setPedesLeds(RESET,SET,RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2101      	movs	r1, #1
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 fbfb 	bl	8000bf0 <setPedesLeds>
				pedeson=1;
 80003fa:	4b44      	ldr	r3, [pc, #272]	; (800050c <fsm_automatic_run+0x24c>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	601a      	str	r2, [r3, #0]
				pedesduration = (red_duration+green_duration+yellow_duration)*200;
 8000400:	4b3f      	ldr	r3, [pc, #252]	; (8000500 <fsm_automatic_run+0x240>)
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	4b3f      	ldr	r3, [pc, #252]	; (8000504 <fsm_automatic_run+0x244>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	441a      	add	r2, r3
 800040a:	4b41      	ldr	r3, [pc, #260]	; (8000510 <fsm_automatic_run+0x250>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4413      	add	r3, r2
 8000410:	22c8      	movs	r2, #200	; 0xc8
 8000412:	fb02 f303 	mul.w	r3, r2, r3
 8000416:	4a3f      	ldr	r2, [pc, #252]	; (8000514 <fsm_automatic_run+0x254>)
 8000418:	6013      	str	r3, [r2, #0]
				setTimer(pedesduration,9);
 800041a:	4b3e      	ldr	r3, [pc, #248]	; (8000514 <fsm_automatic_run+0x254>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	2109      	movs	r1, #9
 8000420:	4618      	mov	r0, r3
 8000422:	f000 fe0f 	bl	8001044 <setTimer>
			}
			break;
 8000426:	e14a      	b.n	80006be <fsm_automatic_run+0x3fe>
		case RED_YELLOW:
			setHorizontalLeds(SET,RESET,RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2100      	movs	r1, #0
 800042c:	2001      	movs	r0, #1
 800042e:	f000 fb4d 	bl	8000acc <setHorizontalLeds>
			setVerticalLeds(RESET,RESET, SET);
 8000432:	2201      	movs	r2, #1
 8000434:	2100      	movs	r1, #0
 8000436:	2000      	movs	r0, #0
 8000438:	f000 fb8e 	bl	8000b58 <setVerticalLeds>
			if(timer_flag[9]==1){
 800043c:	4b32      	ldr	r3, [pc, #200]	; (8000508 <fsm_automatic_run+0x248>)
 800043e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000440:	2b01      	cmp	r3, #1
 8000442:	d107      	bne.n	8000454 <fsm_automatic_run+0x194>
				pedeson=0;
 8000444:	4b31      	ldr	r3, [pc, #196]	; (800050c <fsm_automatic_run+0x24c>)
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
				setPedesLeds(RESET, RESET, RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2100      	movs	r1, #0
 800044e:	2000      	movs	r0, #0
 8000450:	f000 fbce 	bl	8000bf0 <setPedesLeds>
			}
			if(pedeson==1){
 8000454:	4b2d      	ldr	r3, [pc, #180]	; (800050c <fsm_automatic_run+0x24c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2b01      	cmp	r3, #1
 800045a:	d104      	bne.n	8000466 <fsm_automatic_run+0x1a6>
				setPedesLeds(RESET, SET, RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	2101      	movs	r1, #1
 8000460:	2000      	movs	r0, #0
 8000462:	f000 fbc5 	bl	8000bf0 <setPedesLeds>
			}
			if(timer_flag[0] == 1){
 8000466:	4b28      	ldr	r3, [pc, #160]	; (8000508 <fsm_automatic_run+0x248>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2b01      	cmp	r3, #1
 800046c:	d118      	bne.n	80004a0 <fsm_automatic_run+0x1e0>
				setPedesLeds(RESET,RESET,RESET);
 800046e:	2200      	movs	r2, #0
 8000470:	2100      	movs	r1, #0
 8000472:	2000      	movs	r0, #0
 8000474:	f000 fbbc 	bl	8000bf0 <setPedesLeds>
				setTimer(green_duration*100, 0);
 8000478:	4b22      	ldr	r3, [pc, #136]	; (8000504 <fsm_automatic_run+0x244>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2264      	movs	r2, #100	; 0x64
 800047e:	fb02 f303 	mul.w	r3, r2, r3
 8000482:	2100      	movs	r1, #0
 8000484:	4618      	mov	r0, r3
 8000486:	f000 fddd 	bl	8001044 <setTimer>
				status = GREEN_RED;
 800048a:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <fsm_automatic_run+0x23c>)
 800048c:	2204      	movs	r2, #4
 800048e:	601a      	str	r2, [r3, #0]
				setInitialValue(green_duration, red_duration);
 8000490:	4b1c      	ldr	r3, [pc, #112]	; (8000504 <fsm_automatic_run+0x244>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a1a      	ldr	r2, [pc, #104]	; (8000500 <fsm_automatic_run+0x240>)
 8000496:	6812      	ldr	r2, [r2, #0]
 8000498:	4611      	mov	r1, r2
 800049a:	4618      	mov	r0, r3
 800049c:	f000 faf2 	bl	8000a84 <setInitialValue>
//				setHorizontalLeds(RESET,RESET,RESET); //D4-5 horizontal
//				setVerticalLeds(RESET,RESET, RESET);
			}
			if(timer_flag[1] == 1){
 80004a0:	4b19      	ldr	r3, [pc, #100]	; (8000508 <fsm_automatic_run+0x248>)
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d105      	bne.n	80004b4 <fsm_automatic_run+0x1f4>
				countDown();
 80004a8:	f000 faca 	bl	8000a40 <countDown>
				setTimer(100, 1);
 80004ac:	2101      	movs	r1, #1
 80004ae:	2064      	movs	r0, #100	; 0x64
 80004b0:	f000 fdc8 	bl	8001044 <setTimer>
			}
			if(isButtonPressed(0) == 1){
 80004b4:	2000      	movs	r0, #0
 80004b6:	f7ff fe49 	bl	800014c <isButtonPressed>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b01      	cmp	r3, #1
 80004be:	f040 8100 	bne.w	80006c2 <fsm_automatic_run+0x402>
				setPedesLeds(RESET,SET,RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2101      	movs	r1, #1
 80004c6:	2000      	movs	r0, #0
 80004c8:	f000 fb92 	bl	8000bf0 <setPedesLeds>
				pedeson=1;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <fsm_automatic_run+0x24c>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	601a      	str	r2, [r3, #0]
				pedesduration = (red_duration+green_duration+yellow_duration)*200;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <fsm_automatic_run+0x240>)
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <fsm_automatic_run+0x244>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	441a      	add	r2, r3
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <fsm_automatic_run+0x250>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4413      	add	r3, r2
 80004e2:	22c8      	movs	r2, #200	; 0xc8
 80004e4:	fb02 f303 	mul.w	r3, r2, r3
 80004e8:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <fsm_automatic_run+0x254>)
 80004ea:	6013      	str	r3, [r2, #0]
				setTimer(pedesduration,9);
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <fsm_automatic_run+0x254>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2109      	movs	r1, #9
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 fda6 	bl	8001044 <setTimer>
			}
			break;
 80004f8:	e0e3      	b.n	80006c2 <fsm_automatic_run+0x402>
 80004fa:	bf00      	nop
 80004fc:	20000110 	.word	0x20000110
 8000500:	20000068 	.word	0x20000068
 8000504:	2000006c 	.word	0x2000006c
 8000508:	20000148 	.word	0x20000148
 800050c:	2000011c 	.word	0x2000011c
 8000510:	20000070 	.word	0x20000070
 8000514:	2000017c 	.word	0x2000017c
		case GREEN_RED:
			setHorizontalLeds(RESET,SET,RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2101      	movs	r1, #1
 800051c:	2000      	movs	r0, #0
 800051e:	f000 fad5 	bl	8000acc <setHorizontalLeds>
			setVerticalLeds(SET,RESET,RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2100      	movs	r1, #0
 8000526:	2001      	movs	r0, #1
 8000528:	f000 fb16 	bl	8000b58 <setVerticalLeds>
			if(timer_flag[9]==1){
 800052c:	4b68      	ldr	r3, [pc, #416]	; (80006d0 <fsm_automatic_run+0x410>)
 800052e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000530:	2b01      	cmp	r3, #1
 8000532:	d107      	bne.n	8000544 <fsm_automatic_run+0x284>
				pedeson=0;
 8000534:	4b67      	ldr	r3, [pc, #412]	; (80006d4 <fsm_automatic_run+0x414>)
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
				setPedesLeds(RESET, RESET, RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	2000      	movs	r0, #0
 8000540:	f000 fb56 	bl	8000bf0 <setPedesLeds>
			}
			if(pedeson==1){
 8000544:	4b63      	ldr	r3, [pc, #396]	; (80006d4 <fsm_automatic_run+0x414>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d104      	bne.n	8000556 <fsm_automatic_run+0x296>
				setPedesLeds(SET, RESET, RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2100      	movs	r1, #0
 8000550:	2001      	movs	r0, #1
 8000552:	f000 fb4d 	bl	8000bf0 <setPedesLeds>
			}
			if(timer_flag[0] == 1){
 8000556:	4b5e      	ldr	r3, [pc, #376]	; (80006d0 <fsm_automatic_run+0x410>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d118      	bne.n	8000590 <fsm_automatic_run+0x2d0>
				setPedesLeds(RESET,RESET,RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2100      	movs	r1, #0
 8000562:	2000      	movs	r0, #0
 8000564:	f000 fb44 	bl	8000bf0 <setPedesLeds>
				setTimer(yellow_duration*100, 0);
 8000568:	4b5b      	ldr	r3, [pc, #364]	; (80006d8 <fsm_automatic_run+0x418>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2264      	movs	r2, #100	; 0x64
 800056e:	fb02 f303 	mul.w	r3, r2, r3
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fd65 	bl	8001044 <setTimer>
				status = YELLOW_RED;
 800057a:	4b58      	ldr	r3, [pc, #352]	; (80006dc <fsm_automatic_run+0x41c>)
 800057c:	2205      	movs	r2, #5
 800057e:	601a      	str	r2, [r3, #0]
				setInitialValue(yellow_duration, yellow_duration);
 8000580:	4b55      	ldr	r3, [pc, #340]	; (80006d8 <fsm_automatic_run+0x418>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a54      	ldr	r2, [pc, #336]	; (80006d8 <fsm_automatic_run+0x418>)
 8000586:	6812      	ldr	r2, [r2, #0]
 8000588:	4611      	mov	r1, r2
 800058a:	4618      	mov	r0, r3
 800058c:	f000 fa7a 	bl	8000a84 <setInitialValue>
//				setHorizontalLeds(RESET,RESET,RESET); //D4-5 horizontal
//				setVerticalLeds(RESET,RESET, RESET);
			}
			if(timer_flag[1] == 1){
 8000590:	4b4f      	ldr	r3, [pc, #316]	; (80006d0 <fsm_automatic_run+0x410>)
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d105      	bne.n	80005a4 <fsm_automatic_run+0x2e4>
				countDown();
 8000598:	f000 fa52 	bl	8000a40 <countDown>
				setTimer(100, 1);
 800059c:	2101      	movs	r1, #1
 800059e:	2064      	movs	r0, #100	; 0x64
 80005a0:	f000 fd50 	bl	8001044 <setTimer>
			}
			if(isButtonPressed(0) == 1){
 80005a4:	2000      	movs	r0, #0
 80005a6:	f7ff fdd1 	bl	800014c <isButtonPressed>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	f040 808a 	bne.w	80006c6 <fsm_automatic_run+0x406>
				setPedesLeds(SET,RESET,RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	2001      	movs	r0, #1
 80005b8:	f000 fb1a 	bl	8000bf0 <setPedesLeds>
				pedeson=1;
 80005bc:	4b45      	ldr	r3, [pc, #276]	; (80006d4 <fsm_automatic_run+0x414>)
 80005be:	2201      	movs	r2, #1
 80005c0:	601a      	str	r2, [r3, #0]
				pedesduration = (red_duration+green_duration+yellow_duration)*200;
 80005c2:	4b47      	ldr	r3, [pc, #284]	; (80006e0 <fsm_automatic_run+0x420>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	4b47      	ldr	r3, [pc, #284]	; (80006e4 <fsm_automatic_run+0x424>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	441a      	add	r2, r3
 80005cc:	4b42      	ldr	r3, [pc, #264]	; (80006d8 <fsm_automatic_run+0x418>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4413      	add	r3, r2
 80005d2:	22c8      	movs	r2, #200	; 0xc8
 80005d4:	fb02 f303 	mul.w	r3, r2, r3
 80005d8:	4a43      	ldr	r2, [pc, #268]	; (80006e8 <fsm_automatic_run+0x428>)
 80005da:	6013      	str	r3, [r2, #0]
				setTimer(pedesduration,9);
 80005dc:	4b42      	ldr	r3, [pc, #264]	; (80006e8 <fsm_automatic_run+0x428>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2109      	movs	r1, #9
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fd2e 	bl	8001044 <setTimer>
			}
			break;
 80005e8:	e06d      	b.n	80006c6 <fsm_automatic_run+0x406>
		case YELLOW_RED:
			setHorizontalLeds(RESET,RESET,SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2100      	movs	r1, #0
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 fa6c 	bl	8000acc <setHorizontalLeds>
			setVerticalLeds(SET,RESET,RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2100      	movs	r1, #0
 80005f8:	2001      	movs	r0, #1
 80005fa:	f000 faad 	bl	8000b58 <setVerticalLeds>
			if(timer_flag[9]==1){
 80005fe:	4b34      	ldr	r3, [pc, #208]	; (80006d0 <fsm_automatic_run+0x410>)
 8000600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000602:	2b01      	cmp	r3, #1
 8000604:	d107      	bne.n	8000616 <fsm_automatic_run+0x356>
				pedeson=0;
 8000606:	4b33      	ldr	r3, [pc, #204]	; (80006d4 <fsm_automatic_run+0x414>)
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
				setPedesLeds(RESET, RESET, RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2100      	movs	r1, #0
 8000610:	2000      	movs	r0, #0
 8000612:	f000 faed 	bl	8000bf0 <setPedesLeds>
			}
			if(pedeson==1){
 8000616:	4b2f      	ldr	r3, [pc, #188]	; (80006d4 <fsm_automatic_run+0x414>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d104      	bne.n	8000628 <fsm_automatic_run+0x368>
				setPedesLeds(SET, RESET, RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2100      	movs	r1, #0
 8000622:	2001      	movs	r0, #1
 8000624:	f000 fae4 	bl	8000bf0 <setPedesLeds>
			}
			if(timer_flag[0] == 1){
 8000628:	4b29      	ldr	r3, [pc, #164]	; (80006d0 <fsm_automatic_run+0x410>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d118      	bne.n	8000662 <fsm_automatic_run+0x3a2>
				setPedesLeds(RESET,RESET,RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2100      	movs	r1, #0
 8000634:	2000      	movs	r0, #0
 8000636:	f000 fadb 	bl	8000bf0 <setPedesLeds>
				setTimer(green_duration*100, 0);
 800063a:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <fsm_automatic_run+0x424>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2264      	movs	r2, #100	; 0x64
 8000640:	fb02 f303 	mul.w	r3, r2, r3
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fcfc 	bl	8001044 <setTimer>
				status = RED_GREEN;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <fsm_automatic_run+0x41c>)
 800064e:	2202      	movs	r2, #2
 8000650:	601a      	str	r2, [r3, #0]
				setInitialValue(red_duration, green_duration);
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <fsm_automatic_run+0x420>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a23      	ldr	r2, [pc, #140]	; (80006e4 <fsm_automatic_run+0x424>)
 8000658:	6812      	ldr	r2, [r2, #0]
 800065a:	4611      	mov	r1, r2
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fa11 	bl	8000a84 <setInitialValue>
//				setHorizontalLeds(RESET,RESET,RESET); //D4-5 horizontal
//				setVerticalLeds(RESET,RESET, RESET);
			}
			if(timer_flag[1] == 1){
 8000662:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <fsm_automatic_run+0x410>)
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d105      	bne.n	8000676 <fsm_automatic_run+0x3b6>
				countDown();
 800066a:	f000 f9e9 	bl	8000a40 <countDown>
				setTimer(100, 1);
 800066e:	2101      	movs	r1, #1
 8000670:	2064      	movs	r0, #100	; 0x64
 8000672:	f000 fce7 	bl	8001044 <setTimer>
			}
			if(isButtonPressed(0) == 1){
 8000676:	2000      	movs	r0, #0
 8000678:	f7ff fd68 	bl	800014c <isButtonPressed>
 800067c:	4603      	mov	r3, r0
 800067e:	2b01      	cmp	r3, #1
 8000680:	d123      	bne.n	80006ca <fsm_automatic_run+0x40a>
				setPedesLeds(SET,RESET,RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	2001      	movs	r0, #1
 8000688:	f000 fab2 	bl	8000bf0 <setPedesLeds>
				pedeson=1;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <fsm_automatic_run+0x414>)
 800068e:	2201      	movs	r2, #1
 8000690:	601a      	str	r2, [r3, #0]
				pedesduration = (red_duration+green_duration+yellow_duration)*200;
 8000692:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <fsm_automatic_run+0x420>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <fsm_automatic_run+0x424>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	441a      	add	r2, r3
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <fsm_automatic_run+0x418>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4413      	add	r3, r2
 80006a2:	22c8      	movs	r2, #200	; 0xc8
 80006a4:	fb02 f303 	mul.w	r3, r2, r3
 80006a8:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <fsm_automatic_run+0x428>)
 80006aa:	6013      	str	r3, [r2, #0]
				setTimer(pedesduration,9);
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <fsm_automatic_run+0x428>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2109      	movs	r1, #9
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fcc6 	bl	8001044 <setTimer>
			}
			break;
 80006b8:	e007      	b.n	80006ca <fsm_automatic_run+0x40a>
		default:
			break;
 80006ba:	bf00      	nop
 80006bc:	e006      	b.n	80006cc <fsm_automatic_run+0x40c>
			break;
 80006be:	bf00      	nop
 80006c0:	e004      	b.n	80006cc <fsm_automatic_run+0x40c>
			break;
 80006c2:	bf00      	nop
 80006c4:	e002      	b.n	80006cc <fsm_automatic_run+0x40c>
			break;
 80006c6:	bf00      	nop
 80006c8:	e000      	b.n	80006cc <fsm_automatic_run+0x40c>
			break;
 80006ca:	bf00      	nop
	}
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000148 	.word	0x20000148
 80006d4:	2000011c 	.word	0x2000011c
 80006d8:	20000070 	.word	0x20000070
 80006dc:	20000110 	.word	0x20000110
 80006e0:	20000068 	.word	0x20000068
 80006e4:	2000006c 	.word	0x2000006c
 80006e8:	2000017c 	.word	0x2000017c

080006ec <initializeDurationClones>:

int red_duration_clone;
int yellow_duration_clone;
int green_duration_clone;
int toggle = 1;
void initializeDurationClones(){
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
    red_duration_clone = red_duration;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <initializeDurationClones+0x24>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a07      	ldr	r2, [pc, #28]	; (8000714 <initializeDurationClones+0x28>)
 80006f6:	6013      	str	r3, [r2, #0]
    yellow_duration_clone = yellow_duration;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <initializeDurationClones+0x2c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a07      	ldr	r2, [pc, #28]	; (800071c <initializeDurationClones+0x30>)
 80006fe:	6013      	str	r3, [r2, #0]
    green_duration_clone = green_duration;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <initializeDurationClones+0x34>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a07      	ldr	r2, [pc, #28]	; (8000724 <initializeDurationClones+0x38>)
 8000706:	6013      	str	r3, [r2, #0]
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	20000068 	.word	0x20000068
 8000714:	20000180 	.word	0x20000180
 8000718:	20000070 	.word	0x20000070
 800071c:	20000188 	.word	0x20000188
 8000720:	2000006c 	.word	0x2000006c
 8000724:	20000184 	.word	0x20000184

08000728 <fsm_manual_run>:
void fsm_manual_run(){
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

	switch (status) {
 800072c:	4bb1      	ldr	r3, [pc, #708]	; (80009f4 <fsm_manual_run+0x2cc>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b0f      	cmp	r3, #15
 8000732:	f000 80ed 	beq.w	8000910 <fsm_manual_run+0x1e8>
 8000736:	2b0f      	cmp	r3, #15
 8000738:	f300 8152 	bgt.w	80009e0 <fsm_manual_run+0x2b8>
 800073c:	2b0d      	cmp	r3, #13
 800073e:	d002      	beq.n	8000746 <fsm_manual_run+0x1e>
 8000740:	2b0e      	cmp	r3, #14
 8000742:	d073      	beq.n	800082c <fsm_manual_run+0x104>
 8000744:	e14c      	b.n	80009e0 <fsm_manual_run+0x2b8>
		case MAN_RED:
			if(timer_flag[3] == 1){
 8000746:	4bac      	ldr	r3, [pc, #688]	; (80009f8 <fsm_manual_run+0x2d0>)
 8000748:	68db      	ldr	r3, [r3, #12]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d122      	bne.n	8000794 <fsm_manual_run+0x6c>
				if(toggle){
 800074e:	4bab      	ldr	r3, [pc, #684]	; (80009fc <fsm_manual_run+0x2d4>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d00a      	beq.n	800076c <fsm_manual_run+0x44>
					setHorizontalLeds(SET,RESET,RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	2001      	movs	r0, #1
 800075c:	f000 f9b6 	bl	8000acc <setHorizontalLeds>
					setVerticalLeds(SET,RESET,RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2100      	movs	r1, #0
 8000764:	2001      	movs	r0, #1
 8000766:	f000 f9f7 	bl	8000b58 <setVerticalLeds>
 800076a:	e009      	b.n	8000780 <fsm_manual_run+0x58>
				}else {
					setHorizontalLeds(RESET,RESET,RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2100      	movs	r1, #0
 8000770:	2000      	movs	r0, #0
 8000772:	f000 f9ab 	bl	8000acc <setHorizontalLeds>
					setVerticalLeds(RESET,RESET,RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	2000      	movs	r0, #0
 800077c:	f000 f9ec 	bl	8000b58 <setVerticalLeds>
				}
				toggle = 1 - toggle;
 8000780:	4b9e      	ldr	r3, [pc, #632]	; (80009fc <fsm_manual_run+0x2d4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f1c3 0301 	rsb	r3, r3, #1
 8000788:	4a9c      	ldr	r2, [pc, #624]	; (80009fc <fsm_manual_run+0x2d4>)
 800078a:	6013      	str	r3, [r2, #0]
				setTimer(100, 3);
 800078c:	2103      	movs	r1, #3
 800078e:	2064      	movs	r0, #100	; 0x64
 8000790:	f000 fc58 	bl	8001044 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff fcd9 	bl	800014c <isButtonPressed>
 800079a:	4603      	mov	r3, r0
 800079c:	2b01      	cmp	r3, #1
 800079e:	d116      	bne.n	80007ce <fsm_manual_run+0xa6>
				setHorizontalLeds(RESET,RESET,RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	2000      	movs	r0, #0
 80007a6:	f000 f991 	bl	8000acc <setHorizontalLeds>
				setVerticalLeds(RESET,RESET,RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 f9d2 	bl	8000b58 <setVerticalLeds>
				setTimer(100, 3);
 80007b4:	2103      	movs	r1, #3
 80007b6:	2064      	movs	r0, #100	; 0x64
 80007b8:	f000 fc44 	bl	8001044 <setTimer>
				status = MAN_YELLOW;
 80007bc:	4b8d      	ldr	r3, [pc, #564]	; (80009f4 <fsm_manual_run+0x2cc>)
 80007be:	220e      	movs	r2, #14
 80007c0:	601a      	str	r2, [r3, #0]
				printf("Current time: %d\r\n", yellow_duration_clone);
 80007c2:	4b8f      	ldr	r3, [pc, #572]	; (8000a00 <fsm_manual_run+0x2d8>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4619      	mov	r1, r3
 80007c8:	488e      	ldr	r0, [pc, #568]	; (8000a04 <fsm_manual_run+0x2dc>)
 80007ca:	f002 fde1 	bl	8003390 <iprintf>
			}
			if(isButtonPressed(2) == 1){
 80007ce:	2002      	movs	r0, #2
 80007d0:	f7ff fcbc 	bl	800014c <isButtonPressed>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d112      	bne.n	8000800 <fsm_manual_run+0xd8>
				red_duration_clone++;
 80007da:	4b8b      	ldr	r3, [pc, #556]	; (8000a08 <fsm_manual_run+0x2e0>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	3301      	adds	r3, #1
 80007e0:	4a89      	ldr	r2, [pc, #548]	; (8000a08 <fsm_manual_run+0x2e0>)
 80007e2:	6013      	str	r3, [r2, #0]
				if(red_duration_clone >= 99) red_duration_clone = red_duration;
 80007e4:	4b88      	ldr	r3, [pc, #544]	; (8000a08 <fsm_manual_run+0x2e0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b62      	cmp	r3, #98	; 0x62
 80007ea:	dd03      	ble.n	80007f4 <fsm_manual_run+0xcc>
 80007ec:	4b87      	ldr	r3, [pc, #540]	; (8000a0c <fsm_manual_run+0x2e4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a85      	ldr	r2, [pc, #532]	; (8000a08 <fsm_manual_run+0x2e0>)
 80007f2:	6013      	str	r3, [r2, #0]
				printf("Current time: %d\r\n", red_duration_clone);
 80007f4:	4b84      	ldr	r3, [pc, #528]	; (8000a08 <fsm_manual_run+0x2e0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4619      	mov	r1, r3
 80007fa:	4882      	ldr	r0, [pc, #520]	; (8000a04 <fsm_manual_run+0x2dc>)
 80007fc:	f002 fdc8 	bl	8003390 <iprintf>
			}
			if(isButtonPressed(3) == 1){
 8000800:	2003      	movs	r0, #3
 8000802:	f7ff fca3 	bl	800014c <isButtonPressed>
 8000806:	4603      	mov	r3, r0
 8000808:	2b01      	cmp	r3, #1
 800080a:	f040 80ec 	bne.w	80009e6 <fsm_manual_run+0x2be>
				red_duration =  red_duration_clone;
 800080e:	4b7e      	ldr	r3, [pc, #504]	; (8000a08 <fsm_manual_run+0x2e0>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a7e      	ldr	r2, [pc, #504]	; (8000a0c <fsm_manual_run+0x2e4>)
 8000814:	6013      	str	r3, [r2, #0]
				green_duration = red_duration - yellow_duration;
 8000816:	4b7d      	ldr	r3, [pc, #500]	; (8000a0c <fsm_manual_run+0x2e4>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	4b7d      	ldr	r3, [pc, #500]	; (8000a10 <fsm_manual_run+0x2e8>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	1ad3      	subs	r3, r2, r3
 8000820:	4a7c      	ldr	r2, [pc, #496]	; (8000a14 <fsm_manual_run+0x2ec>)
 8000822:	6013      	str	r3, [r2, #0]
				status = INIT;
 8000824:	4b73      	ldr	r3, [pc, #460]	; (80009f4 <fsm_manual_run+0x2cc>)
 8000826:	2201      	movs	r2, #1
 8000828:	601a      	str	r2, [r3, #0]
			}
			break;
 800082a:	e0dc      	b.n	80009e6 <fsm_manual_run+0x2be>
		case MAN_YELLOW:
			if(timer_flag[3] == 1){
 800082c:	4b72      	ldr	r3, [pc, #456]	; (80009f8 <fsm_manual_run+0x2d0>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d122      	bne.n	800087a <fsm_manual_run+0x152>
				if(toggle){
 8000834:	4b71      	ldr	r3, [pc, #452]	; (80009fc <fsm_manual_run+0x2d4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d00a      	beq.n	8000852 <fsm_manual_run+0x12a>
					setHorizontalLeds(RESET,RESET,SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2100      	movs	r1, #0
 8000840:	2000      	movs	r0, #0
 8000842:	f000 f943 	bl	8000acc <setHorizontalLeds>
					setVerticalLeds(RESET,RESET,SET);
 8000846:	2201      	movs	r2, #1
 8000848:	2100      	movs	r1, #0
 800084a:	2000      	movs	r0, #0
 800084c:	f000 f984 	bl	8000b58 <setVerticalLeds>
 8000850:	e009      	b.n	8000866 <fsm_manual_run+0x13e>
				}else {
					setHorizontalLeds(RESET,RESET,RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2100      	movs	r1, #0
 8000856:	2000      	movs	r0, #0
 8000858:	f000 f938 	bl	8000acc <setHorizontalLeds>
					setVerticalLeds(RESET,RESET,RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2100      	movs	r1, #0
 8000860:	2000      	movs	r0, #0
 8000862:	f000 f979 	bl	8000b58 <setVerticalLeds>
				}
				toggle = 1 - toggle;
 8000866:	4b65      	ldr	r3, [pc, #404]	; (80009fc <fsm_manual_run+0x2d4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f1c3 0301 	rsb	r3, r3, #1
 800086e:	4a63      	ldr	r2, [pc, #396]	; (80009fc <fsm_manual_run+0x2d4>)
 8000870:	6013      	str	r3, [r2, #0]
				setTimer(100, 3);
 8000872:	2103      	movs	r1, #3
 8000874:	2064      	movs	r0, #100	; 0x64
 8000876:	f000 fbe5 	bl	8001044 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 800087a:	2001      	movs	r0, #1
 800087c:	f7ff fc66 	bl	800014c <isButtonPressed>
 8000880:	4603      	mov	r3, r0
 8000882:	2b01      	cmp	r3, #1
 8000884:	d116      	bne.n	80008b4 <fsm_manual_run+0x18c>
				setHorizontalLeds(RESET,RESET,RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2000      	movs	r0, #0
 800088c:	f000 f91e 	bl	8000acc <setHorizontalLeds>
				setVerticalLeds(RESET,RESET,RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2100      	movs	r1, #0
 8000894:	2000      	movs	r0, #0
 8000896:	f000 f95f 	bl	8000b58 <setVerticalLeds>
				setTimer(100, 3);
 800089a:	2103      	movs	r1, #3
 800089c:	2064      	movs	r0, #100	; 0x64
 800089e:	f000 fbd1 	bl	8001044 <setTimer>
				status = MAN_GREEN;
 80008a2:	4b54      	ldr	r3, [pc, #336]	; (80009f4 <fsm_manual_run+0x2cc>)
 80008a4:	220f      	movs	r2, #15
 80008a6:	601a      	str	r2, [r3, #0]
				printf("Current time: %d\r\n", green_duration_clone);
 80008a8:	4b5b      	ldr	r3, [pc, #364]	; (8000a18 <fsm_manual_run+0x2f0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4619      	mov	r1, r3
 80008ae:	4855      	ldr	r0, [pc, #340]	; (8000a04 <fsm_manual_run+0x2dc>)
 80008b0:	f002 fd6e 	bl	8003390 <iprintf>
			}
			if(isButtonPressed(2) == 1){
 80008b4:	2002      	movs	r0, #2
 80008b6:	f7ff fc49 	bl	800014c <isButtonPressed>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d112      	bne.n	80008e6 <fsm_manual_run+0x1be>
				yellow_duration_clone++;
 80008c0:	4b4f      	ldr	r3, [pc, #316]	; (8000a00 <fsm_manual_run+0x2d8>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	3301      	adds	r3, #1
 80008c6:	4a4e      	ldr	r2, [pc, #312]	; (8000a00 <fsm_manual_run+0x2d8>)
 80008c8:	6013      	str	r3, [r2, #0]
				if(yellow_duration_clone >= 99) yellow_duration_clone = yellow_duration;
 80008ca:	4b4d      	ldr	r3, [pc, #308]	; (8000a00 <fsm_manual_run+0x2d8>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b62      	cmp	r3, #98	; 0x62
 80008d0:	dd03      	ble.n	80008da <fsm_manual_run+0x1b2>
 80008d2:	4b4f      	ldr	r3, [pc, #316]	; (8000a10 <fsm_manual_run+0x2e8>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a4a      	ldr	r2, [pc, #296]	; (8000a00 <fsm_manual_run+0x2d8>)
 80008d8:	6013      	str	r3, [r2, #0]
				printf("Current time: %d\r\n", yellow_duration_clone);
 80008da:	4b49      	ldr	r3, [pc, #292]	; (8000a00 <fsm_manual_run+0x2d8>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4619      	mov	r1, r3
 80008e0:	4848      	ldr	r0, [pc, #288]	; (8000a04 <fsm_manual_run+0x2dc>)
 80008e2:	f002 fd55 	bl	8003390 <iprintf>
			}
			if(isButtonPressed(3) == 1){
 80008e6:	2003      	movs	r0, #3
 80008e8:	f7ff fc30 	bl	800014c <isButtonPressed>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d17b      	bne.n	80009ea <fsm_manual_run+0x2c2>
				yellow_duration =  yellow_duration_clone;
 80008f2:	4b43      	ldr	r3, [pc, #268]	; (8000a00 <fsm_manual_run+0x2d8>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a46      	ldr	r2, [pc, #280]	; (8000a10 <fsm_manual_run+0x2e8>)
 80008f8:	6013      	str	r3, [r2, #0]
				red_duration = green_duration + yellow_duration;
 80008fa:	4b46      	ldr	r3, [pc, #280]	; (8000a14 <fsm_manual_run+0x2ec>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4b44      	ldr	r3, [pc, #272]	; (8000a10 <fsm_manual_run+0x2e8>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4413      	add	r3, r2
 8000904:	4a41      	ldr	r2, [pc, #260]	; (8000a0c <fsm_manual_run+0x2e4>)
 8000906:	6013      	str	r3, [r2, #0]
				status = INIT;
 8000908:	4b3a      	ldr	r3, [pc, #232]	; (80009f4 <fsm_manual_run+0x2cc>)
 800090a:	2201      	movs	r2, #1
 800090c:	601a      	str	r2, [r3, #0]
			}
			break;
 800090e:	e06c      	b.n	80009ea <fsm_manual_run+0x2c2>
		case MAN_GREEN:
			if(timer_flag[3] == 1){
 8000910:	4b39      	ldr	r3, [pc, #228]	; (80009f8 <fsm_manual_run+0x2d0>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d122      	bne.n	800095e <fsm_manual_run+0x236>
				if(toggle){
 8000918:	4b38      	ldr	r3, [pc, #224]	; (80009fc <fsm_manual_run+0x2d4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d00a      	beq.n	8000936 <fsm_manual_run+0x20e>
					setHorizontalLeds(RESET,SET,RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2101      	movs	r1, #1
 8000924:	2000      	movs	r0, #0
 8000926:	f000 f8d1 	bl	8000acc <setHorizontalLeds>
					setVerticalLeds(RESET,SET,RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2101      	movs	r1, #1
 800092e:	2000      	movs	r0, #0
 8000930:	f000 f912 	bl	8000b58 <setVerticalLeds>
 8000934:	e009      	b.n	800094a <fsm_manual_run+0x222>
				}else {
					setHorizontalLeds(RESET,RESET,RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	2000      	movs	r0, #0
 800093c:	f000 f8c6 	bl	8000acc <setHorizontalLeds>
					setVerticalLeds(RESET,RESET,RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2100      	movs	r1, #0
 8000944:	2000      	movs	r0, #0
 8000946:	f000 f907 	bl	8000b58 <setVerticalLeds>
				}
				toggle = 1 - toggle;
 800094a:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <fsm_manual_run+0x2d4>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f1c3 0301 	rsb	r3, r3, #1
 8000952:	4a2a      	ldr	r2, [pc, #168]	; (80009fc <fsm_manual_run+0x2d4>)
 8000954:	6013      	str	r3, [r2, #0]
				setTimer(100, 3);
 8000956:	2103      	movs	r1, #3
 8000958:	2064      	movs	r0, #100	; 0x64
 800095a:	f000 fb73 	bl	8001044 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 800095e:	2001      	movs	r0, #1
 8000960:	f7ff fbf4 	bl	800014c <isButtonPressed>
 8000964:	4603      	mov	r3, r0
 8000966:	2b01      	cmp	r3, #1
 8000968:	d10c      	bne.n	8000984 <fsm_manual_run+0x25c>
				setHorizontalLeds(RESET,RESET,RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	2000      	movs	r0, #0
 8000970:	f000 f8ac 	bl	8000acc <setHorizontalLeds>
				setVerticalLeds(RESET,RESET,RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2000      	movs	r0, #0
 800097a:	f000 f8ed 	bl	8000b58 <setVerticalLeds>
				status = INIT;
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <fsm_manual_run+0x2cc>)
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(2) == 1){
 8000984:	2002      	movs	r0, #2
 8000986:	f7ff fbe1 	bl	800014c <isButtonPressed>
 800098a:	4603      	mov	r3, r0
 800098c:	2b01      	cmp	r3, #1
 800098e:	d112      	bne.n	80009b6 <fsm_manual_run+0x28e>
				green_duration_clone++;
 8000990:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <fsm_manual_run+0x2f0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	3301      	adds	r3, #1
 8000996:	4a20      	ldr	r2, [pc, #128]	; (8000a18 <fsm_manual_run+0x2f0>)
 8000998:	6013      	str	r3, [r2, #0]
				if(green_duration_clone >= 99) green_duration_clone = green_duration;
 800099a:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <fsm_manual_run+0x2f0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b62      	cmp	r3, #98	; 0x62
 80009a0:	dd03      	ble.n	80009aa <fsm_manual_run+0x282>
 80009a2:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <fsm_manual_run+0x2ec>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a1c      	ldr	r2, [pc, #112]	; (8000a18 <fsm_manual_run+0x2f0>)
 80009a8:	6013      	str	r3, [r2, #0]
				printf("Current time: %d\r\n", green_duration_clone);
 80009aa:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <fsm_manual_run+0x2f0>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4619      	mov	r1, r3
 80009b0:	4814      	ldr	r0, [pc, #80]	; (8000a04 <fsm_manual_run+0x2dc>)
 80009b2:	f002 fced 	bl	8003390 <iprintf>
			}
			if(isButtonPressed(3) == 1){
 80009b6:	2003      	movs	r0, #3
 80009b8:	f7ff fbc8 	bl	800014c <isButtonPressed>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d115      	bne.n	80009ee <fsm_manual_run+0x2c6>
				green_duration =  green_duration_clone;
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <fsm_manual_run+0x2f0>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a13      	ldr	r2, [pc, #76]	; (8000a14 <fsm_manual_run+0x2ec>)
 80009c8:	6013      	str	r3, [r2, #0]
				red_duration = green_duration + yellow_duration;
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <fsm_manual_run+0x2ec>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <fsm_manual_run+0x2e8>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <fsm_manual_run+0x2e4>)
 80009d6:	6013      	str	r3, [r2, #0]
				status = INIT;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <fsm_manual_run+0x2cc>)
 80009da:	2201      	movs	r2, #1
 80009dc:	601a      	str	r2, [r3, #0]
			}
			break;
 80009de:	e006      	b.n	80009ee <fsm_manual_run+0x2c6>
		default:
			initializeDurationClones();
 80009e0:	f7ff fe84 	bl	80006ec <initializeDurationClones>
			break;
 80009e4:	e004      	b.n	80009f0 <fsm_manual_run+0x2c8>
			break;
 80009e6:	bf00      	nop
 80009e8:	e002      	b.n	80009f0 <fsm_manual_run+0x2c8>
			break;
 80009ea:	bf00      	nop
 80009ec:	e000      	b.n	80009f0 <fsm_manual_run+0x2c8>
			break;
 80009ee:	bf00      	nop
	}
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000110 	.word	0x20000110
 80009f8:	20000148 	.word	0x20000148
 80009fc:	20000064 	.word	0x20000064
 8000a00:	20000188 	.word	0x20000188
 8000a04:	08004268 	.word	0x08004268
 8000a08:	20000180 	.word	0x20000180
 8000a0c:	20000068 	.word	0x20000068
 8000a10:	20000070 	.word	0x20000070
 8000a14:	2000006c 	.word	0x2000006c
 8000a18:	20000184 	.word	0x20000184

08000a1c <__io_putchar>:
int green_duration=3;
int yellow_duration=2;
int index_led=0;
int pedeson=0;	//used to check whether ped button is pressed or not

int __io_putchar(int ch) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000a24:	1d39      	adds	r1, r7, #4
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <__io_putchar+0x20>)
 8000a2e:	f002 fafd 	bl	800302c <HAL_UART_Transmit>
    return ch;
 8000a32:	687b      	ldr	r3, [r7, #4]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2000021c 	.word	0x2000021c

08000a40 <countDown>:

//time counting down
void countDown(){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	horizontal_number--;
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <countDown+0x34>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <countDown+0x34>)
 8000a4c:	6013      	str	r3, [r2, #0]
	vertical_number--;
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <countDown+0x38>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <countDown+0x38>)
 8000a56:	6013      	str	r3, [r2, #0]
        printf("Remaining horizontal second: %d\r\n", horizontal_number);
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <countDown+0x34>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4807      	ldr	r0, [pc, #28]	; (8000a7c <countDown+0x3c>)
 8000a60:	f002 fc96 	bl	8003390 <iprintf>
        printf("Remaining vertical second: %d\r\n", vertical_number);
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <countDown+0x38>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <countDown+0x40>)
 8000a6c:	f002 fc90 	bl	8003390 <iprintf>
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000114 	.word	0x20000114
 8000a78:	20000118 	.word	0x20000118
 8000a7c:	0800427c 	.word	0x0800427c
 8000a80:	080042a0 	.word	0x080042a0

08000a84 <setInitialValue>:

void setInitialValue(int horizontal, int vertical){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
    horizontal_number = horizontal;
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <setInitialValue+0x38>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6013      	str	r3, [r2, #0]
    vertical_number = vertical;
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <setInitialValue+0x3c>)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	6013      	str	r3, [r2, #0]
    printf("Remaining horizontal second: %d\r\n", horizontal_number);
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <setInitialValue+0x38>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4808      	ldr	r0, [pc, #32]	; (8000ac4 <setInitialValue+0x40>)
 8000aa2:	f002 fc75 	bl	8003390 <iprintf>
    printf("Remaining vertical second: %d\r\n", vertical_number);
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <setInitialValue+0x3c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <setInitialValue+0x44>)
 8000aae:	f002 fc6f 	bl	8003390 <iprintf>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000114 	.word	0x20000114
 8000ac0:	20000118 	.word	0x20000118
 8000ac4:	0800427c 	.word	0x0800427c
 8000ac8:	080042a0 	.word	0x080042a0

08000acc <setHorizontalLeds>:

void setHorizontalLeds(int red, int green, int yellow){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
    if(red == SET){
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d109      	bne.n	8000af2 <setHorizontalLeds+0x26>
        HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2120      	movs	r1, #32
 8000ae2:	481c      	ldr	r0, [pc, #112]	; (8000b54 <setHorizontalLeds+0x88>)
 8000ae4:	f000 ffdd 	bl	8001aa2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2110      	movs	r1, #16
 8000aec:	4819      	ldr	r0, [pc, #100]	; (8000b54 <setHorizontalLeds+0x88>)
 8000aee:	f000 ffd8 	bl	8001aa2 <HAL_GPIO_WritePin>
    }
    if(green == SET){
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d109      	bne.n	8000b0c <setHorizontalLeds+0x40>
        HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2120      	movs	r1, #32
 8000afc:	4815      	ldr	r0, [pc, #84]	; (8000b54 <setHorizontalLeds+0x88>)
 8000afe:	f000 ffd0 	bl	8001aa2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2110      	movs	r1, #16
 8000b06:	4813      	ldr	r0, [pc, #76]	; (8000b54 <setHorizontalLeds+0x88>)
 8000b08:	f000 ffcb 	bl	8001aa2 <HAL_GPIO_WritePin>
    }
    if(yellow == SET){
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d109      	bne.n	8000b26 <setHorizontalLeds+0x5a>
        HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	2120      	movs	r1, #32
 8000b16:	480f      	ldr	r0, [pc, #60]	; (8000b54 <setHorizontalLeds+0x88>)
 8000b18:	f000 ffc3 	bl	8001aa2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	2110      	movs	r1, #16
 8000b20:	480c      	ldr	r0, [pc, #48]	; (8000b54 <setHorizontalLeds+0x88>)
 8000b22:	f000 ffbe 	bl	8001aa2 <HAL_GPIO_WritePin>
    }
    if(red==RESET && green==RESET && yellow==RESET){
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d10f      	bne.n	8000b4c <setHorizontalLeds+0x80>
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d10c      	bne.n	8000b4c <setHorizontalLeds+0x80>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d109      	bne.n	8000b4c <setHorizontalLeds+0x80>
        HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2120      	movs	r1, #32
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <setHorizontalLeds+0x88>)
 8000b3e:	f000 ffb0 	bl	8001aa2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2110      	movs	r1, #16
 8000b46:	4803      	ldr	r0, [pc, #12]	; (8000b54 <setHorizontalLeds+0x88>)
 8000b48:	f000 ffab 	bl	8001aa2 <HAL_GPIO_WritePin>
    }
}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40010c00 	.word	0x40010c00

08000b58 <setVerticalLeds>:
void setVerticalLeds(int red, int green, int yellow){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
    if(red == SET){
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d10a      	bne.n	8000b80 <setVerticalLeds+0x28>
        HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b70:	481d      	ldr	r0, [pc, #116]	; (8000be8 <setVerticalLeds+0x90>)
 8000b72:	f000 ff96 	bl	8001aa2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2108      	movs	r1, #8
 8000b7a:	481c      	ldr	r0, [pc, #112]	; (8000bec <setVerticalLeds+0x94>)
 8000b7c:	f000 ff91 	bl	8001aa2 <HAL_GPIO_WritePin>
    }
    if(green == SET){
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d10a      	bne.n	8000b9c <setVerticalLeds+0x44>
        HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b8c:	4816      	ldr	r0, [pc, #88]	; (8000be8 <setVerticalLeds+0x90>)
 8000b8e:	f000 ff88 	bl	8001aa2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2108      	movs	r1, #8
 8000b96:	4815      	ldr	r0, [pc, #84]	; (8000bec <setVerticalLeds+0x94>)
 8000b98:	f000 ff83 	bl	8001aa2 <HAL_GPIO_WritePin>
    }
    if(yellow == SET){
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d10a      	bne.n	8000bb8 <setVerticalLeds+0x60>
        HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ba8:	480f      	ldr	r0, [pc, #60]	; (8000be8 <setVerticalLeds+0x90>)
 8000baa:	f000 ff7a 	bl	8001aa2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2108      	movs	r1, #8
 8000bb2:	480e      	ldr	r0, [pc, #56]	; (8000bec <setVerticalLeds+0x94>)
 8000bb4:	f000 ff75 	bl	8001aa2 <HAL_GPIO_WritePin>
    }
    if(red==RESET && green==RESET && yellow==RESET){
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d110      	bne.n	8000be0 <setVerticalLeds+0x88>
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d10d      	bne.n	8000be0 <setVerticalLeds+0x88>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d10a      	bne.n	8000be0 <setVerticalLeds+0x88>
        HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bd0:	4805      	ldr	r0, [pc, #20]	; (8000be8 <setVerticalLeds+0x90>)
 8000bd2:	f000 ff66 	bl	8001aa2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2108      	movs	r1, #8
 8000bda:	4804      	ldr	r0, [pc, #16]	; (8000bec <setVerticalLeds+0x94>)
 8000bdc:	f000 ff61 	bl	8001aa2 <HAL_GPIO_WritePin>
    }
}
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40010800 	.word	0x40010800
 8000bec:	40010c00 	.word	0x40010c00

08000bf0 <setPedesLeds>:

void setPedesLeds(int red, int green, int mixed){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
    if(red == SET){
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d10b      	bne.n	8000c1a <setPedesLeds+0x2a>
        HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c08:	481f      	ldr	r0, [pc, #124]	; (8000c88 <setPedesLeds+0x98>)
 8000c0a:	f000 ff4a 	bl	8001aa2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c14:	481d      	ldr	r0, [pc, #116]	; (8000c8c <setPedesLeds+0x9c>)
 8000c16:	f000 ff44 	bl	8001aa2 <HAL_GPIO_WritePin>
    }
    if(green == SET){
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d10b      	bne.n	8000c38 <setPedesLeds+0x48>
        HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c26:	4818      	ldr	r0, [pc, #96]	; (8000c88 <setPedesLeds+0x98>)
 8000c28:	f000 ff3b 	bl	8001aa2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c32:	4816      	ldr	r0, [pc, #88]	; (8000c8c <setPedesLeds+0x9c>)
 8000c34:	f000 ff35 	bl	8001aa2 <HAL_GPIO_WritePin>
    }
    if(mixed == SET){
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d10b      	bne.n	8000c56 <setPedesLeds+0x66>
        HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c44:	4810      	ldr	r0, [pc, #64]	; (8000c88 <setPedesLeds+0x98>)
 8000c46:	f000 ff2c 	bl	8001aa2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c50:	480e      	ldr	r0, [pc, #56]	; (8000c8c <setPedesLeds+0x9c>)
 8000c52:	f000 ff26 	bl	8001aa2 <HAL_GPIO_WritePin>
    }
    if(red==RESET && green==RESET && mixed==RESET){
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d111      	bne.n	8000c80 <setPedesLeds+0x90>
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d10e      	bne.n	8000c80 <setPedesLeds+0x90>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d10b      	bne.n	8000c80 <setPedesLeds+0x90>
        HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c6e:	4806      	ldr	r0, [pc, #24]	; (8000c88 <setPedesLeds+0x98>)
 8000c70:	f000 ff17 	bl	8001aa2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c7a:	4804      	ldr	r0, [pc, #16]	; (8000c8c <setPedesLeds+0x9c>)
 8000c7c:	f000 ff11 	bl	8001aa2 <HAL_GPIO_WritePin>
    }
//    HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
//    HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);	Toggle Led error
}
 8000c80:	bf00      	nop
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40010c00 	.word	0x40010c00
 8000c8c:	40010800 	.word	0x40010800

08000c90 <HAL_TIM_PeriodElapsedCallback>:
  getKeyInput(1);
  getKeyInput(2);
  getKeyInput(3);
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca0:	d117      	bne.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0x42>
    //SCH_Update();
    timerRun(0); // led duration
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 f9e6 	bl	8001074 <timerRun>
    timerRun(1); //  7-segment counter 1s
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f000 f9e3 	bl	8001074 <timerRun>
    timerRun(3); // blinking led
 8000cae:	2003      	movs	r0, #3
 8000cb0:	f000 f9e0 	bl	8001074 <timerRun>
    timerRun(9);
 8000cb4:	2009      	movs	r0, #9
 8000cb6:	f000 f9dd 	bl	8001074 <timerRun>
    getKeyInput(0);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff fa70 	bl	80001a0 <getKeyInput>
    getKeyInput(1);
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f7ff fa6d 	bl	80001a0 <getKeyInput>
    getKeyInput(2);
 8000cc6:	2002      	movs	r0, #2
 8000cc8:	f7ff fa6a 	bl	80001a0 <getKeyInput>
    getKeyInput(3);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f7ff fa67 	bl	80001a0 <getKeyInput>
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cde:	f000 fbd5 	bl	800148c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce2:	f000 f80d 	bl	8000d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce6:	f000 f939 	bl	8000f5c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000cea:	f000 f84b 	bl	8000d84 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000cee:	f000 f895 	bl	8000e1c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000cf2:	f000 f909 	bl	8000f08 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
   fsm_automatic_run();
 8000cf6:	f7ff fae3 	bl	80002c0 <fsm_automatic_run>
   fsm_manual_run();
 8000cfa:	f7ff fd15 	bl	8000728 <fsm_manual_run>
  {
 8000cfe:	e7fa      	b.n	8000cf6 <main+0x1c>

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b090      	sub	sp, #64	; 0x40
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 0318 	add.w	r3, r7, #24
 8000d0a:	2228      	movs	r2, #40	; 0x28
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f002 fb36 	bl	8003380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d26:	2301      	movs	r3, #1
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d2a:	2310      	movs	r3, #16
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d32:	2300      	movs	r3, #0
 8000d34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d36:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3c:	f107 0318 	add.w	r3, r7, #24
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 fec7 	bl	8001ad4 <HAL_RCC_OscConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d4c:	f000 f974 	bl	8001038 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d50:	230f      	movs	r3, #15
 8000d52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d54:	2302      	movs	r3, #2
 8000d56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2102      	movs	r1, #2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 f932 	bl	8001fd4 <HAL_RCC_ClockConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d76:	f000 f95f 	bl	8001038 <Error_Handler>
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	3740      	adds	r7, #64	; 0x40
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8a:	f107 0308 	add.w	r3, r7, #8
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d98:	463b      	mov	r3, r7
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000da0:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000da2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000da6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000daa:	f242 720f 	movw	r2, #9999	; 0x270f
 8000dae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000db8:	223f      	movs	r2, #63	; 0x3f
 8000dba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dc8:	4813      	ldr	r0, [pc, #76]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000dca:	f001 fa91 	bl	80022f0 <HAL_TIM_Base_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000dd4:	f000 f930 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ddc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	4619      	mov	r1, r3
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000de6:	f001 fcf5 	bl	80027d4 <HAL_TIM_ConfigClockSource>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000df0:	f000 f922 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df4:	2300      	movs	r3, #0
 8000df6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000e02:	f002 f853 	bl	8002eac <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e0c:	f000 f914 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200001d4 	.word	0x200001d4

08000e1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08e      	sub	sp, #56	; 0x38
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e30:	f107 0320 	add.w	r3, r7, #32
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
 8000e48:	615a      	str	r2, [r3, #20]
 8000e4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e4c:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000e4e:	4a2d      	ldr	r2, [pc, #180]	; (8000f04 <MX_TIM3_Init+0xe8>)
 8000e50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1799;
 8000e52:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000e54:	f240 7207 	movw	r2, #1799	; 0x707
 8000e58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000e60:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000e62:	2264      	movs	r2, #100	; 0x64
 8000e64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e66:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6c:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e72:	4823      	ldr	r0, [pc, #140]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000e74:	f001 fa3c 	bl	80022f0 <HAL_TIM_Base_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000e7e:	f000 f8db 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	481c      	ldr	r0, [pc, #112]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000e90:	f001 fca0 	bl	80027d4 <HAL_TIM_ConfigClockSource>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000e9a:	f000 f8cd 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e9e:	4818      	ldr	r0, [pc, #96]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000ea0:	f001 fa75 	bl	800238e <HAL_TIM_PWM_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000eaa:	f000 f8c5 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eb6:	f107 0320 	add.w	r3, r7, #32
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4810      	ldr	r0, [pc, #64]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000ebe:	f001 fff5 	bl	8002eac <HAL_TIMEx_MasterConfigSynchronization>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ec8:	f000 f8b6 	bl	8001038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ecc:	2360      	movs	r3, #96	; 0x60
 8000ece:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2200      	movs	r2, #0
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4807      	ldr	r0, [pc, #28]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000ee4:	f001 fbb4 	bl	8002650 <HAL_TIM_PWM_ConfigChannel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000eee:	f000 f8a3 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ef2:	4803      	ldr	r0, [pc, #12]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000ef4:	f000 f950 	bl	8001198 <HAL_TIM_MspPostInit>

}
 8000ef8:	bf00      	nop
 8000efa:	3738      	adds	r7, #56	; 0x38
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000018c 	.word	0x2000018c
 8000f04:	40000400 	.word	0x40000400

08000f08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <MX_USART2_UART_Init+0x50>)
 8000f10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f2e:	220c      	movs	r2, #12
 8000f30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_USART2_UART_Init+0x4c>)
 8000f40:	f002 f824 	bl	8002f8c <HAL_UART_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f4a:	f000 f875 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000021c 	.word	0x2000021c
 8000f58:	40004400 	.word	0x40004400

08000f5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f70:	4b2e      	ldr	r3, [pc, #184]	; (800102c <MX_GPIO_Init+0xd0>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a2d      	ldr	r2, [pc, #180]	; (800102c <MX_GPIO_Init+0xd0>)
 8000f76:	f043 0304 	orr.w	r3, r3, #4
 8000f7a:	6193      	str	r3, [r2, #24]
 8000f7c:	4b2b      	ldr	r3, [pc, #172]	; (800102c <MX_GPIO_Init+0xd0>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f88:	4b28      	ldr	r3, [pc, #160]	; (800102c <MX_GPIO_Init+0xd0>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	4a27      	ldr	r2, [pc, #156]	; (800102c <MX_GPIO_Init+0xd0>)
 8000f8e:	f043 0308 	orr.w	r3, r3, #8
 8000f92:	6193      	str	r3, [r2, #24]
 8000f94:	4b25      	ldr	r3, [pc, #148]	; (800102c <MX_GPIO_Init+0xd0>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	f003 0308 	and.w	r3, r3, #8
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000fa6:	4822      	ldr	r0, [pc, #136]	; (8001030 <MX_GPIO_Init+0xd4>)
 8000fa8:	f000 fd7b 	bl	8001aa2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000fb2:	4820      	ldr	r0, [pc, #128]	; (8001034 <MX_GPIO_Init+0xd8>)
 8000fb4:	f000 fd75 	bl	8001aa2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8000fb8:	2313      	movs	r3, #19
 8000fba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	4619      	mov	r1, r3
 8000fca:	481a      	ldr	r0, [pc, #104]	; (8001034 <MX_GPIO_Init+0xd8>)
 8000fcc:	f000 fbce 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 0308 	add.w	r3, r7, #8
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4813      	ldr	r0, [pc, #76]	; (8001030 <MX_GPIO_Init+0xd4>)
 8000fe4:	f000 fbc2 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000fe8:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000fec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	4619      	mov	r1, r3
 8001000:	480b      	ldr	r0, [pc, #44]	; (8001030 <MX_GPIO_Init+0xd4>)
 8001002:	f000 fbb3 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8001006:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800100a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2302      	movs	r3, #2
 8001016:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 0308 	add.w	r3, r7, #8
 800101c:	4619      	mov	r1, r3
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_GPIO_Init+0xd8>)
 8001020:	f000 fba4 	bl	800176c <HAL_GPIO_Init>

}
 8001024:	bf00      	nop
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40021000 	.word	0x40021000
 8001030:	40010c00 	.word	0x40010c00
 8001034:	40010800 	.word	0x40010800

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	e7fe      	b.n	8001040 <Error_Handler+0x8>
	...

08001044 <setTimer>:
#include "software_timer.h"

int timer_counter[10] = {0};
int timer_flag[10] = {0};

void setTimer(int duration, int timerId){
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
	timer_counter[timerId] = duration;
 800104e:	4907      	ldr	r1, [pc, #28]	; (800106c <setTimer+0x28>)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timerId] = 0;
 8001058:	4a05      	ldr	r2, [pc, #20]	; (8001070 <setTimer+0x2c>)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	2100      	movs	r1, #0
 800105e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	20000120 	.word	0x20000120
 8001070:	20000148 	.word	0x20000148

08001074 <timerRun>:
void timerRun(int timerId){
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	if(timer_counter[timerId] > 0){
 800107c:	4a0f      	ldr	r2, [pc, #60]	; (80010bc <timerRun+0x48>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001084:	2b00      	cmp	r3, #0
 8001086:	dd13      	ble.n	80010b0 <timerRun+0x3c>
		timer_counter[timerId]--;
 8001088:	4a0c      	ldr	r2, [pc, #48]	; (80010bc <timerRun+0x48>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001090:	1e5a      	subs	r2, r3, #1
 8001092:	490a      	ldr	r1, [pc, #40]	; (80010bc <timerRun+0x48>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[timerId] <= 0){
 800109a:	4a08      	ldr	r2, [pc, #32]	; (80010bc <timerRun+0x48>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	dc04      	bgt.n	80010b0 <timerRun+0x3c>
			timer_flag[timerId] = 1;
 80010a6:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <timerRun+0x4c>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2101      	movs	r1, #1
 80010ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000120 	.word	0x20000120
 80010c0:	20000148 	.word	0x20000148

080010c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <HAL_MspInit+0x5c>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	4a14      	ldr	r2, [pc, #80]	; (8001120 <HAL_MspInit+0x5c>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6193      	str	r3, [r2, #24]
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_MspInit+0x5c>)
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <HAL_MspInit+0x5c>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <HAL_MspInit+0x5c>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ec:	61d3      	str	r3, [r2, #28]
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <HAL_MspInit+0x5c>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_MspInit+0x60>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	4a04      	ldr	r2, [pc, #16]	; (8001124 <HAL_MspInit+0x60>)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	40021000 	.word	0x40021000
 8001124:	40010000 	.word	0x40010000

08001128 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001138:	d114      	bne.n	8001164 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_TIM_Base_MspInit+0x68>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	4a14      	ldr	r2, [pc, #80]	; (8001190 <HAL_TIM_Base_MspInit+0x68>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	61d3      	str	r3, [r2, #28]
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_TIM_Base_MspInit+0x68>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	201c      	movs	r0, #28
 8001158:	f000 fad1 	bl	80016fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800115c:	201c      	movs	r0, #28
 800115e:	f000 faea 	bl	8001736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001162:	e010      	b.n	8001186 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <HAL_TIM_Base_MspInit+0x6c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d10b      	bne.n	8001186 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_TIM_Base_MspInit+0x68>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	4a07      	ldr	r2, [pc, #28]	; (8001190 <HAL_TIM_Base_MspInit+0x68>)
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	61d3      	str	r3, [r2, #28]
 800117a:	4b05      	ldr	r3, [pc, #20]	; (8001190 <HAL_TIM_Base_MspInit+0x68>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000
 8001194:	40000400 	.word	0x40000400

08001198 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <HAL_TIM_MspPostInit+0x58>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d117      	bne.n	80011e8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <HAL_TIM_MspPostInit+0x5c>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a0d      	ldr	r2, [pc, #52]	; (80011f4 <HAL_TIM_MspPostInit+0x5c>)
 80011be:	f043 0304 	orr.w	r3, r3, #4
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_TIM_MspPostInit+0x5c>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011d0:	2340      	movs	r3, #64	; 0x40
 80011d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2302      	movs	r3, #2
 80011da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	4619      	mov	r1, r3
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <HAL_TIM_MspPostInit+0x60>)
 80011e4:	f000 fac2 	bl	800176c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011e8:	bf00      	nop
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40000400 	.word	0x40000400
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40010800 	.word	0x40010800

080011fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a1b      	ldr	r2, [pc, #108]	; (8001284 <HAL_UART_MspInit+0x88>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d12f      	bne.n	800127c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <HAL_UART_MspInit+0x8c>)
 800121e:	69db      	ldr	r3, [r3, #28]
 8001220:	4a19      	ldr	r2, [pc, #100]	; (8001288 <HAL_UART_MspInit+0x8c>)
 8001222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001226:	61d3      	str	r3, [r2, #28]
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <HAL_UART_MspInit+0x8c>)
 800122a:	69db      	ldr	r3, [r3, #28]
 800122c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <HAL_UART_MspInit+0x8c>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	4a13      	ldr	r2, [pc, #76]	; (8001288 <HAL_UART_MspInit+0x8c>)
 800123a:	f043 0304 	orr.w	r3, r3, #4
 800123e:	6193      	str	r3, [r2, #24]
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <HAL_UART_MspInit+0x8c>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800124c:	2304      	movs	r3, #4
 800124e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	4619      	mov	r1, r3
 800125e:	480b      	ldr	r0, [pc, #44]	; (800128c <HAL_UART_MspInit+0x90>)
 8001260:	f000 fa84 	bl	800176c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001264:	2308      	movs	r3, #8
 8001266:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	4619      	mov	r1, r3
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <HAL_UART_MspInit+0x90>)
 8001278:	f000 fa78 	bl	800176c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40004400 	.word	0x40004400
 8001288:	40021000 	.word	0x40021000
 800128c:	40010800 	.word	0x40010800

08001290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <NMI_Handler+0x4>

08001296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129a:	e7fe      	b.n	800129a <HardFault_Handler+0x4>

0800129c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <MemManage_Handler+0x4>

080012a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <BusFault_Handler+0x4>

080012a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <UsageFault_Handler+0x4>

080012ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d6:	f000 f91f 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <TIM2_IRQHandler+0x10>)
 80012e6:	f001 f8aa 	bl	800243e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200001d4 	.word	0x200001d4

080012f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	e00a      	b.n	800131c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001306:	f3af 8000 	nop.w
 800130a:	4601      	mov	r1, r0
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	60ba      	str	r2, [r7, #8]
 8001312:	b2ca      	uxtb	r2, r1
 8001314:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	429a      	cmp	r2, r3
 8001322:	dbf0      	blt.n	8001306 <_read+0x12>
	}

return len;
 8001324:	687b      	ldr	r3, [r7, #4]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	e009      	b.n	8001354 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	60ba      	str	r2, [r7, #8]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fb67 	bl	8000a1c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3301      	adds	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	429a      	cmp	r2, r3
 800135a:	dbf1      	blt.n	8001340 <_write+0x12>
	}
	return len;
 800135c:	687b      	ldr	r3, [r7, #4]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <_close>:

int _close(int file)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	return -1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800138c:	605a      	str	r2, [r3, #4]
	return 0;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr

0800139a <_isatty>:

int _isatty(int file)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
	return 1;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b085      	sub	sp, #20
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
	return 0;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
	...

080013c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d0:	4a14      	ldr	r2, [pc, #80]	; (8001424 <_sbrk+0x5c>)
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <_sbrk+0x60>)
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <_sbrk+0x64>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	; (8001430 <_sbrk+0x68>)
 80013e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d207      	bcs.n	8001408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f8:	f001 ff98 	bl	800332c <__errno>
 80013fc:	4603      	mov	r3, r0
 80013fe:	220c      	movs	r2, #12
 8001400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	e009      	b.n	800141c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <_sbrk+0x64>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <_sbrk+0x64>)
 8001418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141a:	68fb      	ldr	r3, [r7, #12]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20005000 	.word	0x20005000
 8001428:	00000400 	.word	0x00000400
 800142c:	20000170 	.word	0x20000170
 8001430:	20000278 	.word	0x20000278

08001434 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001440:	f7ff fff8 	bl	8001434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001444:	480b      	ldr	r0, [pc, #44]	; (8001474 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001446:	490c      	ldr	r1, [pc, #48]	; (8001478 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001448:	4a0c      	ldr	r2, [pc, #48]	; (800147c <LoopFillZerobss+0x16>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800144c:	e002      	b.n	8001454 <LoopCopyDataInit>

0800144e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001452:	3304      	adds	r3, #4

08001454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001458:	d3f9      	bcc.n	800144e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145a:	4a09      	ldr	r2, [pc, #36]	; (8001480 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800145c:	4c09      	ldr	r4, [pc, #36]	; (8001484 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001460:	e001      	b.n	8001466 <LoopFillZerobss>

08001462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001464:	3204      	adds	r2, #4

08001466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001468:	d3fb      	bcc.n	8001462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146a:	f001 ff65 	bl	8003338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800146e:	f7ff fc34 	bl	8000cda <main>
  bx lr
 8001472:	4770      	bx	lr
  ldr r0, =_sdata
 8001474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001478:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 800147c:	0800438c 	.word	0x0800438c
  ldr r2, =_sbss
 8001480:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8001484:	20000278 	.word	0x20000278

08001488 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001488:	e7fe      	b.n	8001488 <ADC1_2_IRQHandler>
	...

0800148c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <HAL_Init+0x28>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_Init+0x28>)
 8001496:	f043 0310 	orr.w	r3, r3, #16
 800149a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149c:	2003      	movs	r0, #3
 800149e:	f000 f923 	bl	80016e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a2:	200f      	movs	r0, #15
 80014a4:	f000 f808 	bl	80014b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a8:	f7ff fe0c 	bl	80010c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40022000 	.word	0x40022000

080014b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_InitTick+0x54>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_InitTick+0x58>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f93b 	bl	8001752 <HAL_SYSTICK_Config>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00e      	b.n	8001504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d80a      	bhi.n	8001502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ec:	2200      	movs	r2, #0
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f000 f903 	bl	80016fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f8:	4a06      	ldr	r2, [pc, #24]	; (8001514 <HAL_InitTick+0x5c>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000074 	.word	0x20000074
 8001510:	2000007c 	.word	0x2000007c
 8001514:	20000078 	.word	0x20000078

08001518 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_IncTick+0x1c>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_IncTick+0x20>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4413      	add	r3, r2
 8001528:	4a03      	ldr	r2, [pc, #12]	; (8001538 <HAL_IncTick+0x20>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	2000007c 	.word	0x2000007c
 8001538:	20000264 	.word	0x20000264

0800153c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return uwTick;
 8001540:	4b02      	ldr	r3, [pc, #8]	; (800154c <HAL_GetTick+0x10>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	20000264 	.word	0x20000264

08001550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <__NVIC_SetPriorityGrouping+0x44>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800156c:	4013      	ands	r3, r2
 800156e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800157c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001582:	4a04      	ldr	r2, [pc, #16]	; (8001594 <__NVIC_SetPriorityGrouping+0x44>)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	60d3      	str	r3, [r2, #12]
}
 8001588:	bf00      	nop
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <__NVIC_GetPriorityGrouping+0x18>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	0a1b      	lsrs	r3, r3, #8
 80015a2:	f003 0307 	and.w	r3, r3, #7
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	db0b      	blt.n	80015de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	f003 021f 	and.w	r2, r3, #31
 80015cc:	4906      	ldr	r1, [pc, #24]	; (80015e8 <__NVIC_EnableIRQ+0x34>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	095b      	lsrs	r3, r3, #5
 80015d4:	2001      	movs	r0, #1
 80015d6:	fa00 f202 	lsl.w	r2, r0, r2
 80015da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	e000e100 	.word	0xe000e100

080015ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db0a      	blt.n	8001616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	490c      	ldr	r1, [pc, #48]	; (8001638 <__NVIC_SetPriority+0x4c>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	0112      	lsls	r2, r2, #4
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	440b      	add	r3, r1
 8001610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001614:	e00a      	b.n	800162c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4908      	ldr	r1, [pc, #32]	; (800163c <__NVIC_SetPriority+0x50>)
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	3b04      	subs	r3, #4
 8001624:	0112      	lsls	r2, r2, #4
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	440b      	add	r3, r1
 800162a:	761a      	strb	r2, [r3, #24]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000e100 	.word	0xe000e100
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f1c3 0307 	rsb	r3, r3, #7
 800165a:	2b04      	cmp	r3, #4
 800165c:	bf28      	it	cs
 800165e:	2304      	movcs	r3, #4
 8001660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3304      	adds	r3, #4
 8001666:	2b06      	cmp	r3, #6
 8001668:	d902      	bls.n	8001670 <NVIC_EncodePriority+0x30>
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3b03      	subs	r3, #3
 800166e:	e000      	b.n	8001672 <NVIC_EncodePriority+0x32>
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	401a      	ands	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001688:	f04f 31ff 	mov.w	r1, #4294967295
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	43d9      	mvns	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	4313      	orrs	r3, r2
         );
}
 800169a:	4618      	mov	r0, r3
 800169c:	3724      	adds	r7, #36	; 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b4:	d301      	bcc.n	80016ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00f      	b.n	80016da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <SysTick_Config+0x40>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c2:	210f      	movs	r1, #15
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f7ff ff90 	bl	80015ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <SysTick_Config+0x40>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d2:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <SysTick_Config+0x40>)
 80016d4:	2207      	movs	r2, #7
 80016d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	e000e010 	.word	0xe000e010

080016e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ff2d 	bl	8001550 <__NVIC_SetPriorityGrouping>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001710:	f7ff ff42 	bl	8001598 <__NVIC_GetPriorityGrouping>
 8001714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7ff ff90 	bl	8001640 <NVIC_EncodePriority>
 8001720:	4602      	mov	r2, r0
 8001722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff5f 	bl	80015ec <__NVIC_SetPriority>
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff35 	bl	80015b4 <__NVIC_EnableIRQ>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ffa2 	bl	80016a4 <SysTick_Config>
 8001760:	4603      	mov	r3, r0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800176c:	b480      	push	{r7}
 800176e:	b08b      	sub	sp, #44	; 0x2c
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800177a:	2300      	movs	r3, #0
 800177c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800177e:	e169      	b.n	8001a54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001780:	2201      	movs	r2, #1
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	429a      	cmp	r2, r3
 800179a:	f040 8158 	bne.w	8001a4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4a9a      	ldr	r2, [pc, #616]	; (8001a0c <HAL_GPIO_Init+0x2a0>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d05e      	beq.n	8001866 <HAL_GPIO_Init+0xfa>
 80017a8:	4a98      	ldr	r2, [pc, #608]	; (8001a0c <HAL_GPIO_Init+0x2a0>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d875      	bhi.n	800189a <HAL_GPIO_Init+0x12e>
 80017ae:	4a98      	ldr	r2, [pc, #608]	; (8001a10 <HAL_GPIO_Init+0x2a4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d058      	beq.n	8001866 <HAL_GPIO_Init+0xfa>
 80017b4:	4a96      	ldr	r2, [pc, #600]	; (8001a10 <HAL_GPIO_Init+0x2a4>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d86f      	bhi.n	800189a <HAL_GPIO_Init+0x12e>
 80017ba:	4a96      	ldr	r2, [pc, #600]	; (8001a14 <HAL_GPIO_Init+0x2a8>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d052      	beq.n	8001866 <HAL_GPIO_Init+0xfa>
 80017c0:	4a94      	ldr	r2, [pc, #592]	; (8001a14 <HAL_GPIO_Init+0x2a8>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d869      	bhi.n	800189a <HAL_GPIO_Init+0x12e>
 80017c6:	4a94      	ldr	r2, [pc, #592]	; (8001a18 <HAL_GPIO_Init+0x2ac>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d04c      	beq.n	8001866 <HAL_GPIO_Init+0xfa>
 80017cc:	4a92      	ldr	r2, [pc, #584]	; (8001a18 <HAL_GPIO_Init+0x2ac>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d863      	bhi.n	800189a <HAL_GPIO_Init+0x12e>
 80017d2:	4a92      	ldr	r2, [pc, #584]	; (8001a1c <HAL_GPIO_Init+0x2b0>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d046      	beq.n	8001866 <HAL_GPIO_Init+0xfa>
 80017d8:	4a90      	ldr	r2, [pc, #576]	; (8001a1c <HAL_GPIO_Init+0x2b0>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d85d      	bhi.n	800189a <HAL_GPIO_Init+0x12e>
 80017de:	2b12      	cmp	r3, #18
 80017e0:	d82a      	bhi.n	8001838 <HAL_GPIO_Init+0xcc>
 80017e2:	2b12      	cmp	r3, #18
 80017e4:	d859      	bhi.n	800189a <HAL_GPIO_Init+0x12e>
 80017e6:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <HAL_GPIO_Init+0x80>)
 80017e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ec:	08001867 	.word	0x08001867
 80017f0:	08001841 	.word	0x08001841
 80017f4:	08001853 	.word	0x08001853
 80017f8:	08001895 	.word	0x08001895
 80017fc:	0800189b 	.word	0x0800189b
 8001800:	0800189b 	.word	0x0800189b
 8001804:	0800189b 	.word	0x0800189b
 8001808:	0800189b 	.word	0x0800189b
 800180c:	0800189b 	.word	0x0800189b
 8001810:	0800189b 	.word	0x0800189b
 8001814:	0800189b 	.word	0x0800189b
 8001818:	0800189b 	.word	0x0800189b
 800181c:	0800189b 	.word	0x0800189b
 8001820:	0800189b 	.word	0x0800189b
 8001824:	0800189b 	.word	0x0800189b
 8001828:	0800189b 	.word	0x0800189b
 800182c:	0800189b 	.word	0x0800189b
 8001830:	08001849 	.word	0x08001849
 8001834:	0800185d 	.word	0x0800185d
 8001838:	4a79      	ldr	r2, [pc, #484]	; (8001a20 <HAL_GPIO_Init+0x2b4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d013      	beq.n	8001866 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800183e:	e02c      	b.n	800189a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	623b      	str	r3, [r7, #32]
          break;
 8001846:	e029      	b.n	800189c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	3304      	adds	r3, #4
 800184e:	623b      	str	r3, [r7, #32]
          break;
 8001850:	e024      	b.n	800189c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	3308      	adds	r3, #8
 8001858:	623b      	str	r3, [r7, #32]
          break;
 800185a:	e01f      	b.n	800189c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	330c      	adds	r3, #12
 8001862:	623b      	str	r3, [r7, #32]
          break;
 8001864:	e01a      	b.n	800189c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d102      	bne.n	8001874 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800186e:	2304      	movs	r3, #4
 8001870:	623b      	str	r3, [r7, #32]
          break;
 8001872:	e013      	b.n	800189c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d105      	bne.n	8001888 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800187c:	2308      	movs	r3, #8
 800187e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	611a      	str	r2, [r3, #16]
          break;
 8001886:	e009      	b.n	800189c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001888:	2308      	movs	r3, #8
 800188a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	615a      	str	r2, [r3, #20]
          break;
 8001892:	e003      	b.n	800189c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
          break;
 8001898:	e000      	b.n	800189c <HAL_GPIO_Init+0x130>
          break;
 800189a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	2bff      	cmp	r3, #255	; 0xff
 80018a0:	d801      	bhi.n	80018a6 <HAL_GPIO_Init+0x13a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	e001      	b.n	80018aa <HAL_GPIO_Init+0x13e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3304      	adds	r3, #4
 80018aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2bff      	cmp	r3, #255	; 0xff
 80018b0:	d802      	bhi.n	80018b8 <HAL_GPIO_Init+0x14c>
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	e002      	b.n	80018be <HAL_GPIO_Init+0x152>
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	3b08      	subs	r3, #8
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	210f      	movs	r1, #15
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	401a      	ands	r2, r3
 80018d0:	6a39      	ldr	r1, [r7, #32]
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	fa01 f303 	lsl.w	r3, r1, r3
 80018d8:	431a      	orrs	r2, r3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 80b1 	beq.w	8001a4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018ec:	4b4d      	ldr	r3, [pc, #308]	; (8001a24 <HAL_GPIO_Init+0x2b8>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4a4c      	ldr	r2, [pc, #304]	; (8001a24 <HAL_GPIO_Init+0x2b8>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6193      	str	r3, [r2, #24]
 80018f8:	4b4a      	ldr	r3, [pc, #296]	; (8001a24 <HAL_GPIO_Init+0x2b8>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001904:	4a48      	ldr	r2, [pc, #288]	; (8001a28 <HAL_GPIO_Init+0x2bc>)
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	089b      	lsrs	r3, r3, #2
 800190a:	3302      	adds	r3, #2
 800190c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001910:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	220f      	movs	r2, #15
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	4013      	ands	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a40      	ldr	r2, [pc, #256]	; (8001a2c <HAL_GPIO_Init+0x2c0>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d013      	beq.n	8001958 <HAL_GPIO_Init+0x1ec>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a3f      	ldr	r2, [pc, #252]	; (8001a30 <HAL_GPIO_Init+0x2c4>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d00d      	beq.n	8001954 <HAL_GPIO_Init+0x1e8>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a3e      	ldr	r2, [pc, #248]	; (8001a34 <HAL_GPIO_Init+0x2c8>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d007      	beq.n	8001950 <HAL_GPIO_Init+0x1e4>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a3d      	ldr	r2, [pc, #244]	; (8001a38 <HAL_GPIO_Init+0x2cc>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d101      	bne.n	800194c <HAL_GPIO_Init+0x1e0>
 8001948:	2303      	movs	r3, #3
 800194a:	e006      	b.n	800195a <HAL_GPIO_Init+0x1ee>
 800194c:	2304      	movs	r3, #4
 800194e:	e004      	b.n	800195a <HAL_GPIO_Init+0x1ee>
 8001950:	2302      	movs	r3, #2
 8001952:	e002      	b.n	800195a <HAL_GPIO_Init+0x1ee>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <HAL_GPIO_Init+0x1ee>
 8001958:	2300      	movs	r3, #0
 800195a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800195c:	f002 0203 	and.w	r2, r2, #3
 8001960:	0092      	lsls	r2, r2, #2
 8001962:	4093      	lsls	r3, r2
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800196a:	492f      	ldr	r1, [pc, #188]	; (8001a28 <HAL_GPIO_Init+0x2bc>)
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	089b      	lsrs	r3, r3, #2
 8001970:	3302      	adds	r3, #2
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d006      	beq.n	8001992 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001984:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	492c      	ldr	r1, [pc, #176]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	608b      	str	r3, [r1, #8]
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001992:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	43db      	mvns	r3, r3
 800199a:	4928      	ldr	r1, [pc, #160]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 800199c:	4013      	ands	r3, r2
 800199e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d006      	beq.n	80019ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019ac:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	4922      	ldr	r1, [pc, #136]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	60cb      	str	r3, [r1, #12]
 80019b8:	e006      	b.n	80019c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019ba:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	491e      	ldr	r1, [pc, #120]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d006      	beq.n	80019e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019d4:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	4918      	ldr	r1, [pc, #96]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
 80019e0:	e006      	b.n	80019f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019e2:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	4914      	ldr	r1, [pc, #80]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d021      	beq.n	8001a40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	490e      	ldr	r1, [pc, #56]	; (8001a3c <HAL_GPIO_Init+0x2d0>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
 8001a08:	e021      	b.n	8001a4e <HAL_GPIO_Init+0x2e2>
 8001a0a:	bf00      	nop
 8001a0c:	10320000 	.word	0x10320000
 8001a10:	10310000 	.word	0x10310000
 8001a14:	10220000 	.word	0x10220000
 8001a18:	10210000 	.word	0x10210000
 8001a1c:	10120000 	.word	0x10120000
 8001a20:	10110000 	.word	0x10110000
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40010000 	.word	0x40010000
 8001a2c:	40010800 	.word	0x40010800
 8001a30:	40010c00 	.word	0x40010c00
 8001a34:	40011000 	.word	0x40011000
 8001a38:	40011400 	.word	0x40011400
 8001a3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_GPIO_Init+0x304>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	4909      	ldr	r1, [pc, #36]	; (8001a70 <HAL_GPIO_Init+0x304>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	3301      	adds	r3, #1
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f47f ae8e 	bne.w	8001780 <HAL_GPIO_Init+0x14>
  }
}
 8001a64:	bf00      	nop
 8001a66:	bf00      	nop
 8001a68:	372c      	adds	r7, #44	; 0x2c
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	40010400 	.word	0x40010400

08001a74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	887b      	ldrh	r3, [r7, #2]
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	73fb      	strb	r3, [r7, #15]
 8001a90:	e001      	b.n	8001a96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	807b      	strh	r3, [r7, #2]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ab2:	787b      	ldrb	r3, [r7, #1]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ab8:	887a      	ldrh	r2, [r7, #2]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001abe:	e003      	b.n	8001ac8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ac0:	887b      	ldrh	r3, [r7, #2]
 8001ac2:	041a      	lsls	r2, r3, #16
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	611a      	str	r2, [r3, #16]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
	...

08001ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e26c      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 8087 	beq.w	8001c02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001af4:	4b92      	ldr	r3, [pc, #584]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d00c      	beq.n	8001b1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b00:	4b8f      	ldr	r3, [pc, #572]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d112      	bne.n	8001b32 <HAL_RCC_OscConfig+0x5e>
 8001b0c:	4b8c      	ldr	r3, [pc, #560]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b18:	d10b      	bne.n	8001b32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1a:	4b89      	ldr	r3, [pc, #548]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d06c      	beq.n	8001c00 <HAL_RCC_OscConfig+0x12c>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d168      	bne.n	8001c00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e246      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3a:	d106      	bne.n	8001b4a <HAL_RCC_OscConfig+0x76>
 8001b3c:	4b80      	ldr	r3, [pc, #512]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a7f      	ldr	r2, [pc, #508]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	e02e      	b.n	8001ba8 <HAL_RCC_OscConfig+0xd4>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x98>
 8001b52:	4b7b      	ldr	r3, [pc, #492]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a7a      	ldr	r2, [pc, #488]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	4b78      	ldr	r3, [pc, #480]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a77      	ldr	r2, [pc, #476]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e01d      	b.n	8001ba8 <HAL_RCC_OscConfig+0xd4>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b74:	d10c      	bne.n	8001b90 <HAL_RCC_OscConfig+0xbc>
 8001b76:	4b72      	ldr	r3, [pc, #456]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a71      	ldr	r2, [pc, #452]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	4b6f      	ldr	r3, [pc, #444]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a6e      	ldr	r2, [pc, #440]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e00b      	b.n	8001ba8 <HAL_RCC_OscConfig+0xd4>
 8001b90:	4b6b      	ldr	r3, [pc, #428]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a6a      	ldr	r2, [pc, #424]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	4b68      	ldr	r3, [pc, #416]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a67      	ldr	r2, [pc, #412]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d013      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fcc4 	bl	800153c <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb8:	f7ff fcc0 	bl	800153c <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b64      	cmp	r3, #100	; 0x64
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e1fa      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bca:	4b5d      	ldr	r3, [pc, #372]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0xe4>
 8001bd6:	e014      	b.n	8001c02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7ff fcb0 	bl	800153c <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be0:	f7ff fcac 	bl	800153c <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b64      	cmp	r3, #100	; 0x64
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e1e6      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf2:	4b53      	ldr	r3, [pc, #332]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x10c>
 8001bfe:	e000      	b.n	8001c02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d063      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c0e:	4b4c      	ldr	r3, [pc, #304]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00b      	beq.n	8001c32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c1a:	4b49      	ldr	r3, [pc, #292]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d11c      	bne.n	8001c60 <HAL_RCC_OscConfig+0x18c>
 8001c26:	4b46      	ldr	r3, [pc, #280]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d116      	bne.n	8001c60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c32:	4b43      	ldr	r3, [pc, #268]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d005      	beq.n	8001c4a <HAL_RCC_OscConfig+0x176>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d001      	beq.n	8001c4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e1ba      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4a:	4b3d      	ldr	r3, [pc, #244]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	4939      	ldr	r1, [pc, #228]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5e:	e03a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d020      	beq.n	8001caa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c68:	4b36      	ldr	r3, [pc, #216]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6e:	f7ff fc65 	bl	800153c <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c76:	f7ff fc61 	bl	800153c <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e19b      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c88:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c94:	4b2a      	ldr	r3, [pc, #168]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4927      	ldr	r1, [pc, #156]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	600b      	str	r3, [r1, #0]
 8001ca8:	e015      	b.n	8001cd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001caa:	4b26      	ldr	r3, [pc, #152]	; (8001d44 <HAL_RCC_OscConfig+0x270>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fc44 	bl	800153c <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb8:	f7ff fc40 	bl	800153c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e17a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cca:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d03a      	beq.n	8001d58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d019      	beq.n	8001d1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_RCC_OscConfig+0x274>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf0:	f7ff fc24 	bl	800153c <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf8:	f7ff fc20 	bl	800153c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e15a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d16:	2001      	movs	r0, #1
 8001d18:	f000 facc 	bl	80022b4 <RCC_Delay>
 8001d1c:	e01c      	b.n	8001d58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_RCC_OscConfig+0x274>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d24:	f7ff fc0a 	bl	800153c <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2a:	e00f      	b.n	8001d4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2c:	f7ff fc06 	bl	800153c <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d908      	bls.n	8001d4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e140      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000
 8001d44:	42420000 	.word	0x42420000
 8001d48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4c:	4b9e      	ldr	r3, [pc, #632]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1e9      	bne.n	8001d2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 80a6 	beq.w	8001eb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6a:	4b97      	ldr	r3, [pc, #604]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10d      	bne.n	8001d92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	4b94      	ldr	r3, [pc, #592]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	4a93      	ldr	r2, [pc, #588]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d80:	61d3      	str	r3, [r2, #28]
 8001d82:	4b91      	ldr	r3, [pc, #580]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d92:	4b8e      	ldr	r3, [pc, #568]	; (8001fcc <HAL_RCC_OscConfig+0x4f8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d118      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d9e:	4b8b      	ldr	r3, [pc, #556]	; (8001fcc <HAL_RCC_OscConfig+0x4f8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a8a      	ldr	r2, [pc, #552]	; (8001fcc <HAL_RCC_OscConfig+0x4f8>)
 8001da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001daa:	f7ff fbc7 	bl	800153c <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db2:	f7ff fbc3 	bl	800153c <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b64      	cmp	r3, #100	; 0x64
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e0fd      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc4:	4b81      	ldr	r3, [pc, #516]	; (8001fcc <HAL_RCC_OscConfig+0x4f8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d106      	bne.n	8001de6 <HAL_RCC_OscConfig+0x312>
 8001dd8:	4b7b      	ldr	r3, [pc, #492]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4a7a      	ldr	r2, [pc, #488]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6213      	str	r3, [r2, #32]
 8001de4:	e02d      	b.n	8001e42 <HAL_RCC_OscConfig+0x36e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10c      	bne.n	8001e08 <HAL_RCC_OscConfig+0x334>
 8001dee:	4b76      	ldr	r3, [pc, #472]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a75      	ldr	r2, [pc, #468]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	6213      	str	r3, [r2, #32]
 8001dfa:	4b73      	ldr	r3, [pc, #460]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4a72      	ldr	r2, [pc, #456]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001e00:	f023 0304 	bic.w	r3, r3, #4
 8001e04:	6213      	str	r3, [r2, #32]
 8001e06:	e01c      	b.n	8001e42 <HAL_RCC_OscConfig+0x36e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	2b05      	cmp	r3, #5
 8001e0e:	d10c      	bne.n	8001e2a <HAL_RCC_OscConfig+0x356>
 8001e10:	4b6d      	ldr	r3, [pc, #436]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4a6c      	ldr	r2, [pc, #432]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	6213      	str	r3, [r2, #32]
 8001e1c:	4b6a      	ldr	r3, [pc, #424]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4a69      	ldr	r2, [pc, #420]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6213      	str	r3, [r2, #32]
 8001e28:	e00b      	b.n	8001e42 <HAL_RCC_OscConfig+0x36e>
 8001e2a:	4b67      	ldr	r3, [pc, #412]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4a66      	ldr	r2, [pc, #408]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	6213      	str	r3, [r2, #32]
 8001e36:	4b64      	ldr	r3, [pc, #400]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	4a63      	ldr	r2, [pc, #396]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	f023 0304 	bic.w	r3, r3, #4
 8001e40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d015      	beq.n	8001e76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff fb77 	bl	800153c <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e50:	e00a      	b.n	8001e68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e52:	f7ff fb73 	bl	800153c <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e0ab      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e68:	4b57      	ldr	r3, [pc, #348]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0ee      	beq.n	8001e52 <HAL_RCC_OscConfig+0x37e>
 8001e74:	e014      	b.n	8001ea0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e76:	f7ff fb61 	bl	800153c <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7c:	e00a      	b.n	8001e94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7ff fb5d 	bl	800153c <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e095      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e94:	4b4c      	ldr	r3, [pc, #304]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1ee      	bne.n	8001e7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d105      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea6:	4b48      	ldr	r3, [pc, #288]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a47      	ldr	r2, [pc, #284]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8081 	beq.w	8001fbe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ebc:	4b42      	ldr	r3, [pc, #264]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d061      	beq.n	8001f8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d146      	bne.n	8001f5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed0:	4b3f      	ldr	r3, [pc, #252]	; (8001fd0 <HAL_RCC_OscConfig+0x4fc>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed6:	f7ff fb31 	bl	800153c <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ede:	f7ff fb2d 	bl	800153c <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e067      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef0:	4b35      	ldr	r3, [pc, #212]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f0      	bne.n	8001ede <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f04:	d108      	bne.n	8001f18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f06:	4b30      	ldr	r3, [pc, #192]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	492d      	ldr	r1, [pc, #180]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f18:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a19      	ldr	r1, [r3, #32]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	4927      	ldr	r1, [pc, #156]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f30:	4b27      	ldr	r3, [pc, #156]	; (8001fd0 <HAL_RCC_OscConfig+0x4fc>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7ff fb01 	bl	800153c <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3e:	f7ff fafd 	bl	800153c <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e037      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f50:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x46a>
 8001f5c:	e02f      	b.n	8001fbe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <HAL_RCC_OscConfig+0x4fc>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff faea 	bl	800153c <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6c:	f7ff fae6 	bl	800153c <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e020      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x498>
 8001f8a:	e018      	b.n	8001fbe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e013      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d106      	bne.n	8001fba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d001      	beq.n	8001fbe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40007000 	.word	0x40007000
 8001fd0:	42420060 	.word	0x42420060

08001fd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0d0      	b.n	800218a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b6a      	ldr	r3, [pc, #424]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d910      	bls.n	8002018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b67      	ldr	r3, [pc, #412]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 0207 	bic.w	r2, r3, #7
 8001ffe:	4965      	ldr	r1, [pc, #404]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b63      	ldr	r3, [pc, #396]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0b8      	b.n	800218a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d020      	beq.n	8002066 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002030:	4b59      	ldr	r3, [pc, #356]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	4a58      	ldr	r2, [pc, #352]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800203a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002048:	4b53      	ldr	r3, [pc, #332]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	4a52      	ldr	r2, [pc, #328]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002052:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002054:	4b50      	ldr	r3, [pc, #320]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	494d      	ldr	r1, [pc, #308]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	4313      	orrs	r3, r2
 8002064:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d040      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	4b47      	ldr	r3, [pc, #284]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d115      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e07f      	b.n	800218a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002092:	4b41      	ldr	r3, [pc, #260]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d109      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e073      	b.n	800218a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a2:	4b3d      	ldr	r3, [pc, #244]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e06b      	b.n	800218a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b2:	4b39      	ldr	r3, [pc, #228]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f023 0203 	bic.w	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4936      	ldr	r1, [pc, #216]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c4:	f7ff fa3a 	bl	800153c <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020cc:	f7ff fa36 	bl	800153c <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e053      	b.n	800218a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 020c 	and.w	r2, r3, #12
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d1eb      	bne.n	80020cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020f4:	4b27      	ldr	r3, [pc, #156]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d210      	bcs.n	8002124 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b24      	ldr	r3, [pc, #144]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 0207 	bic.w	r2, r3, #7
 800210a:	4922      	ldr	r1, [pc, #136]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e032      	b.n	800218a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002130:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4916      	ldr	r1, [pc, #88]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	4313      	orrs	r3, r2
 8002140:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	490e      	ldr	r1, [pc, #56]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002162:	f000 f821 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 8002166:	4602      	mov	r2, r0
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	490a      	ldr	r1, [pc, #40]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002174:	5ccb      	ldrb	r3, [r1, r3]
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	4a09      	ldr	r2, [pc, #36]	; (80021a0 <HAL_RCC_ClockConfig+0x1cc>)
 800217c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff f998 	bl	80014b8 <HAL_InitTick>

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40022000 	.word	0x40022000
 8002198:	40021000 	.word	0x40021000
 800219c:	080042c0 	.word	0x080042c0
 80021a0:	20000074 	.word	0x20000074
 80021a4:	20000078 	.word	0x20000078

080021a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	2300      	movs	r3, #0
 80021bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021c2:	4b1e      	ldr	r3, [pc, #120]	; (800223c <HAL_RCC_GetSysClockFreq+0x94>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d002      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0x30>
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d003      	beq.n	80021de <HAL_RCC_GetSysClockFreq+0x36>
 80021d6:	e027      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_RCC_GetSysClockFreq+0x98>)
 80021da:	613b      	str	r3, [r7, #16]
      break;
 80021dc:	e027      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	0c9b      	lsrs	r3, r3, #18
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	4a17      	ldr	r2, [pc, #92]	; (8002244 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021e8:	5cd3      	ldrb	r3, [r2, r3]
 80021ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d010      	beq.n	8002218 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <HAL_RCC_GetSysClockFreq+0x94>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	0c5b      	lsrs	r3, r3, #17
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	4a11      	ldr	r2, [pc, #68]	; (8002248 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002202:	5cd3      	ldrb	r3, [r2, r3]
 8002204:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a0d      	ldr	r2, [pc, #52]	; (8002240 <HAL_RCC_GetSysClockFreq+0x98>)
 800220a:	fb02 f203 	mul.w	r2, r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	fbb2 f3f3 	udiv	r3, r2, r3
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	e004      	b.n	8002222 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a0c      	ldr	r2, [pc, #48]	; (800224c <HAL_RCC_GetSysClockFreq+0xa4>)
 800221c:	fb02 f303 	mul.w	r3, r2, r3
 8002220:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	613b      	str	r3, [r7, #16]
      break;
 8002226:	e002      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_RCC_GetSysClockFreq+0x98>)
 800222a:	613b      	str	r3, [r7, #16]
      break;
 800222c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800222e:	693b      	ldr	r3, [r7, #16]
}
 8002230:	4618      	mov	r0, r3
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	007a1200 	.word	0x007a1200
 8002244:	080042d8 	.word	0x080042d8
 8002248:	080042e8 	.word	0x080042e8
 800224c:	003d0900 	.word	0x003d0900

08002250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002254:	4b02      	ldr	r3, [pc, #8]	; (8002260 <HAL_RCC_GetHCLKFreq+0x10>)
 8002256:	681b      	ldr	r3, [r3, #0]
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	20000074 	.word	0x20000074

08002264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002268:	f7ff fff2 	bl	8002250 <HAL_RCC_GetHCLKFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	4903      	ldr	r1, [pc, #12]	; (8002288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40021000 	.word	0x40021000
 8002288:	080042d0 	.word	0x080042d0

0800228c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002290:	f7ff ffde 	bl	8002250 <HAL_RCC_GetHCLKFreq>
 8002294:	4602      	mov	r2, r0
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	0adb      	lsrs	r3, r3, #11
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	4903      	ldr	r1, [pc, #12]	; (80022b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022a2:	5ccb      	ldrb	r3, [r1, r3]
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40021000 	.word	0x40021000
 80022b0:	080042d0 	.word	0x080042d0

080022b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022bc:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <RCC_Delay+0x34>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <RCC_Delay+0x38>)
 80022c2:	fba2 2303 	umull	r2, r3, r2, r3
 80022c6:	0a5b      	lsrs	r3, r3, #9
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	fb02 f303 	mul.w	r3, r2, r3
 80022ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022d0:	bf00      	nop
  }
  while (Delay --);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1e5a      	subs	r2, r3, #1
 80022d6:	60fa      	str	r2, [r7, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f9      	bne.n	80022d0 <RCC_Delay+0x1c>
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	20000074 	.word	0x20000074
 80022ec:	10624dd3 	.word	0x10624dd3

080022f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e041      	b.n	8002386 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d106      	bne.n	800231c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7fe ff06 	bl	8001128 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3304      	adds	r3, #4
 800232c:	4619      	mov	r1, r3
 800232e:	4610      	mov	r0, r2
 8002330:	f000 fb3c 	bl	80029ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e041      	b.n	8002424 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d106      	bne.n	80023ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f839 	bl	800242c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2202      	movs	r2, #2
 80023be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3304      	adds	r3, #4
 80023ca:	4619      	mov	r1, r3
 80023cc:	4610      	mov	r0, r2
 80023ce:	f000 faed 	bl	80029ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr

0800243e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b02      	cmp	r3, #2
 8002452:	d122      	bne.n	800249a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b02      	cmp	r3, #2
 8002460:	d11b      	bne.n	800249a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f06f 0202 	mvn.w	r2, #2
 800246a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 fa77 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 8002486:	e005      	b.n	8002494 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 fa6a 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fa79 	bl	8002986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d122      	bne.n	80024ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d11b      	bne.n	80024ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f06f 0204 	mvn.w	r2, #4
 80024be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fa4d 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 80024da:	e005      	b.n	80024e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 fa40 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fa4f 	bl	8002986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d122      	bne.n	8002542 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b08      	cmp	r3, #8
 8002508:	d11b      	bne.n	8002542 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f06f 0208 	mvn.w	r2, #8
 8002512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2204      	movs	r2, #4
 8002518:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fa23 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 800252e:	e005      	b.n	800253c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fa16 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fa25 	bl	8002986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	2b10      	cmp	r3, #16
 800254e:	d122      	bne.n	8002596 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b10      	cmp	r3, #16
 800255c:	d11b      	bne.n	8002596 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f06f 0210 	mvn.w	r2, #16
 8002566:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2208      	movs	r2, #8
 800256c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f9f9 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 8002582:	e005      	b.n	8002590 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f9ec 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f9fb 	bl	8002986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d10e      	bne.n	80025c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d107      	bne.n	80025c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f06f 0201 	mvn.w	r2, #1
 80025ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7fe fb67 	bl	8000c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025cc:	2b80      	cmp	r3, #128	; 0x80
 80025ce:	d10e      	bne.n	80025ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025da:	2b80      	cmp	r3, #128	; 0x80
 80025dc:	d107      	bne.n	80025ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 fcc6 	bl	8002f7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f8:	2b40      	cmp	r3, #64	; 0x40
 80025fa:	d10e      	bne.n	800261a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002606:	2b40      	cmp	r3, #64	; 0x40
 8002608:	d107      	bne.n	800261a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f9bf 	bl	8002998 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	f003 0320 	and.w	r3, r3, #32
 8002624:	2b20      	cmp	r3, #32
 8002626:	d10e      	bne.n	8002646 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	2b20      	cmp	r3, #32
 8002634:	d107      	bne.n	8002646 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f06f 0220 	mvn.w	r2, #32
 800263e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fc91 	bl	8002f68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800266a:	2302      	movs	r3, #2
 800266c:	e0ae      	b.n	80027cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b0c      	cmp	r3, #12
 800267a:	f200 809f 	bhi.w	80027bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800267e:	a201      	add	r2, pc, #4	; (adr r2, 8002684 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002684:	080026b9 	.word	0x080026b9
 8002688:	080027bd 	.word	0x080027bd
 800268c:	080027bd 	.word	0x080027bd
 8002690:	080027bd 	.word	0x080027bd
 8002694:	080026f9 	.word	0x080026f9
 8002698:	080027bd 	.word	0x080027bd
 800269c:	080027bd 	.word	0x080027bd
 80026a0:	080027bd 	.word	0x080027bd
 80026a4:	0800273b 	.word	0x0800273b
 80026a8:	080027bd 	.word	0x080027bd
 80026ac:	080027bd 	.word	0x080027bd
 80026b0:	080027bd 	.word	0x080027bd
 80026b4:	0800277b 	.word	0x0800277b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f9d6 	bl	8002a70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0208 	orr.w	r2, r2, #8
 80026d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0204 	bic.w	r2, r2, #4
 80026e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6999      	ldr	r1, [r3, #24]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	619a      	str	r2, [r3, #24]
      break;
 80026f6:	e064      	b.n	80027c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 fa1c 	bl	8002b3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6999      	ldr	r1, [r3, #24]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	021a      	lsls	r2, r3, #8
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	619a      	str	r2, [r3, #24]
      break;
 8002738:	e043      	b.n	80027c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fa65 	bl	8002c10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0208 	orr.w	r2, r2, #8
 8002754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69da      	ldr	r2, [r3, #28]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0204 	bic.w	r2, r2, #4
 8002764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69d9      	ldr	r1, [r3, #28]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	61da      	str	r2, [r3, #28]
      break;
 8002778:	e023      	b.n	80027c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	4618      	mov	r0, r3
 8002782:	f000 faaf 	bl	8002ce4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69da      	ldr	r2, [r3, #28]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69da      	ldr	r2, [r3, #28]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69d9      	ldr	r1, [r3, #28]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	021a      	lsls	r2, r3, #8
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	61da      	str	r2, [r3, #28]
      break;
 80027ba:	e002      	b.n	80027c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	75fb      	strb	r3, [r7, #23]
      break;
 80027c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_TIM_ConfigClockSource+0x1c>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e0b4      	b.n	800295a <HAL_TIM_ConfigClockSource+0x186>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800280e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002816:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002828:	d03e      	beq.n	80028a8 <HAL_TIM_ConfigClockSource+0xd4>
 800282a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282e:	f200 8087 	bhi.w	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002836:	f000 8086 	beq.w	8002946 <HAL_TIM_ConfigClockSource+0x172>
 800283a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283e:	d87f      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002840:	2b70      	cmp	r3, #112	; 0x70
 8002842:	d01a      	beq.n	800287a <HAL_TIM_ConfigClockSource+0xa6>
 8002844:	2b70      	cmp	r3, #112	; 0x70
 8002846:	d87b      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002848:	2b60      	cmp	r3, #96	; 0x60
 800284a:	d050      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0x11a>
 800284c:	2b60      	cmp	r3, #96	; 0x60
 800284e:	d877      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002850:	2b50      	cmp	r3, #80	; 0x50
 8002852:	d03c      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0xfa>
 8002854:	2b50      	cmp	r3, #80	; 0x50
 8002856:	d873      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002858:	2b40      	cmp	r3, #64	; 0x40
 800285a:	d058      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x13a>
 800285c:	2b40      	cmp	r3, #64	; 0x40
 800285e:	d86f      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002860:	2b30      	cmp	r3, #48	; 0x30
 8002862:	d064      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x15a>
 8002864:	2b30      	cmp	r3, #48	; 0x30
 8002866:	d86b      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002868:	2b20      	cmp	r3, #32
 800286a:	d060      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x15a>
 800286c:	2b20      	cmp	r3, #32
 800286e:	d867      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002870:	2b00      	cmp	r3, #0
 8002872:	d05c      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x15a>
 8002874:	2b10      	cmp	r3, #16
 8002876:	d05a      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x15a>
 8002878:	e062      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6899      	ldr	r1, [r3, #8]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f000 faf0 	bl	8002e6e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800289c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	609a      	str	r2, [r3, #8]
      break;
 80028a6:	e04f      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	6899      	ldr	r1, [r3, #8]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f000 fad9 	bl	8002e6e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ca:	609a      	str	r2, [r3, #8]
      break;
 80028cc:	e03c      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6859      	ldr	r1, [r3, #4]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	461a      	mov	r2, r3
 80028dc:	f000 fa50 	bl	8002d80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2150      	movs	r1, #80	; 0x50
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 faa7 	bl	8002e3a <TIM_ITRx_SetConfig>
      break;
 80028ec:	e02c      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f000 fa6e 	bl	8002ddc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2160      	movs	r1, #96	; 0x60
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fa97 	bl	8002e3a <TIM_ITRx_SetConfig>
      break;
 800290c:	e01c      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	461a      	mov	r2, r3
 800291c:	f000 fa30 	bl	8002d80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2140      	movs	r1, #64	; 0x40
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fa87 	bl	8002e3a <TIM_ITRx_SetConfig>
      break;
 800292c:	e00c      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4619      	mov	r1, r3
 8002938:	4610      	mov	r0, r2
 800293a:	f000 fa7e 	bl	8002e3a <TIM_ITRx_SetConfig>
      break;
 800293e:	e003      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
      break;
 8002944:	e000      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002946:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002958:	7bfb      	ldrb	r3, [r7, #15]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
	...

080029ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a29      	ldr	r2, [pc, #164]	; (8002a64 <TIM_Base_SetConfig+0xb8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00b      	beq.n	80029dc <TIM_Base_SetConfig+0x30>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ca:	d007      	beq.n	80029dc <TIM_Base_SetConfig+0x30>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a26      	ldr	r2, [pc, #152]	; (8002a68 <TIM_Base_SetConfig+0xbc>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d003      	beq.n	80029dc <TIM_Base_SetConfig+0x30>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a25      	ldr	r2, [pc, #148]	; (8002a6c <TIM_Base_SetConfig+0xc0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d108      	bne.n	80029ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <TIM_Base_SetConfig+0xb8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00b      	beq.n	8002a0e <TIM_Base_SetConfig+0x62>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fc:	d007      	beq.n	8002a0e <TIM_Base_SetConfig+0x62>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a19      	ldr	r2, [pc, #100]	; (8002a68 <TIM_Base_SetConfig+0xbc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d003      	beq.n	8002a0e <TIM_Base_SetConfig+0x62>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <TIM_Base_SetConfig+0xc0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d108      	bne.n	8002a20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a07      	ldr	r2, [pc, #28]	; (8002a64 <TIM_Base_SetConfig+0xb8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d103      	bne.n	8002a54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	615a      	str	r2, [r3, #20]
}
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	40000400 	.word	0x40000400
 8002a6c:	40000800 	.word	0x40000800

08002a70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f023 0201 	bic.w	r2, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0303 	bic.w	r3, r3, #3
 8002aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f023 0302 	bic.w	r3, r3, #2
 8002ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a1c      	ldr	r2, [pc, #112]	; (8002b38 <TIM_OC1_SetConfig+0xc8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d10c      	bne.n	8002ae6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f023 0308 	bic.w	r3, r3, #8
 8002ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f023 0304 	bic.w	r3, r3, #4
 8002ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a13      	ldr	r2, [pc, #76]	; (8002b38 <TIM_OC1_SetConfig+0xc8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d111      	bne.n	8002b12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	621a      	str	r2, [r3, #32]
}
 8002b2c:	bf00      	nop
 8002b2e:	371c      	adds	r7, #28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40012c00 	.word	0x40012c00

08002b3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	f023 0210 	bic.w	r2, r3, #16
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f023 0320 	bic.w	r3, r3, #32
 8002b86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a1d      	ldr	r2, [pc, #116]	; (8002c0c <TIM_OC2_SetConfig+0xd0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d10d      	bne.n	8002bb8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a14      	ldr	r2, [pc, #80]	; (8002c0c <TIM_OC2_SetConfig+0xd0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d113      	bne.n	8002be8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	621a      	str	r2, [r3, #32]
}
 8002c02:	bf00      	nop
 8002c04:	371c      	adds	r7, #28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr
 8002c0c:	40012c00 	.word	0x40012c00

08002c10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0303 	bic.w	r3, r3, #3
 8002c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	021b      	lsls	r3, r3, #8
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <TIM_OC3_SetConfig+0xd0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d10d      	bne.n	8002c8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a14      	ldr	r2, [pc, #80]	; (8002ce0 <TIM_OC3_SetConfig+0xd0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d113      	bne.n	8002cba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	621a      	str	r2, [r3, #32]
}
 8002cd4:	bf00      	nop
 8002cd6:	371c      	adds	r7, #28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40012c00 	.word	0x40012c00

08002ce4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	031b      	lsls	r3, r3, #12
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a0f      	ldr	r2, [pc, #60]	; (8002d7c <TIM_OC4_SetConfig+0x98>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d109      	bne.n	8002d58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	019b      	lsls	r3, r3, #6
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	621a      	str	r2, [r3, #32]
}
 8002d72:	bf00      	nop
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	40012c00 	.word	0x40012c00

08002d80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	f023 0201 	bic.w	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f023 030a 	bic.w	r3, r3, #10
 8002dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	621a      	str	r2, [r3, #32]
}
 8002dd2:	bf00      	nop
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr

08002ddc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	f023 0210 	bic.w	r2, r3, #16
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	031b      	lsls	r3, r3, #12
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e18:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	621a      	str	r2, [r3, #32]
}
 8002e30:	bf00      	nop
 8002e32:	371c      	adds	r7, #28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f043 0307 	orr.w	r3, r3, #7
 8002e5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	609a      	str	r2, [r3, #8]
}
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b087      	sub	sp, #28
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
 8002e7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	021a      	lsls	r2, r3, #8
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	431a      	orrs	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	609a      	str	r2, [r3, #8]
}
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e046      	b.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a16      	ldr	r2, [pc, #88]	; (8002f5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00e      	beq.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f10:	d009      	beq.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d004      	beq.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a10      	ldr	r2, [pc, #64]	; (8002f64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d10c      	bne.n	8002f40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr
 8002f5c:	40012c00 	.word	0x40012c00
 8002f60:	40000400 	.word	0x40000400
 8002f64:	40000800 	.word	0x40000800

08002f68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr

08002f7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e042      	b.n	8003024 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fe f922 	bl	80011fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2224      	movs	r2, #36	; 0x24
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f91d 	bl	8003210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695a      	ldr	r2, [r3, #20]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ff4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003004:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08a      	sub	sp, #40	; 0x28
 8003030:	af02      	add	r7, sp, #8
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	603b      	str	r3, [r7, #0]
 8003038:	4613      	mov	r3, r2
 800303a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b20      	cmp	r3, #32
 800304a:	d16d      	bne.n	8003128 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_UART_Transmit+0x2c>
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e066      	b.n	800312a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2221      	movs	r2, #33	; 0x21
 8003066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800306a:	f7fe fa67 	bl	800153c <HAL_GetTick>
 800306e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	88fa      	ldrh	r2, [r7, #6]
 8003074:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	88fa      	ldrh	r2, [r7, #6]
 800307a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003084:	d108      	bne.n	8003098 <HAL_UART_Transmit+0x6c>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d104      	bne.n	8003098 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	e003      	b.n	80030a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800309c:	2300      	movs	r3, #0
 800309e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030a0:	e02a      	b.n	80030f8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2200      	movs	r2, #0
 80030aa:	2180      	movs	r1, #128	; 0x80
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f840 	bl	8003132 <UART_WaitOnFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e036      	b.n	800312a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10b      	bne.n	80030da <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	461a      	mov	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	3302      	adds	r3, #2
 80030d6:	61bb      	str	r3, [r7, #24]
 80030d8:	e007      	b.n	80030ea <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	781a      	ldrb	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	3301      	adds	r3, #1
 80030e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1cf      	bne.n	80030a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2200      	movs	r2, #0
 800310a:	2140      	movs	r1, #64	; 0x40
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 f810 	bl	8003132 <UART_WaitOnFlagUntilTimeout>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e006      	b.n	800312a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	e000      	b.n	800312a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003128:	2302      	movs	r3, #2
  }
}
 800312a:	4618      	mov	r0, r3
 800312c:	3720      	adds	r7, #32
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b090      	sub	sp, #64	; 0x40
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	4613      	mov	r3, r2
 8003140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003142:	e050      	b.n	80031e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314a:	d04c      	beq.n	80031e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800314c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800314e:	2b00      	cmp	r3, #0
 8003150:	d007      	beq.n	8003162 <UART_WaitOnFlagUntilTimeout+0x30>
 8003152:	f7fe f9f3 	bl	800153c <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800315e:	429a      	cmp	r2, r3
 8003160:	d241      	bcs.n	80031e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	330c      	adds	r3, #12
 8003168:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	e853 3f00 	ldrex	r3, [r3]
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	330c      	adds	r3, #12
 8003180:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003182:	637a      	str	r2, [r7, #52]	; 0x34
 8003184:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003186:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800318a:	e841 2300 	strex	r3, r2, [r1]
 800318e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1e5      	bne.n	8003162 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3314      	adds	r3, #20
 800319c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	e853 3f00 	ldrex	r3, [r3]
 80031a4:	613b      	str	r3, [r7, #16]
   return(result);
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3314      	adds	r3, #20
 80031b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031b6:	623a      	str	r2, [r7, #32]
 80031b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ba:	69f9      	ldr	r1, [r7, #28]
 80031bc:	6a3a      	ldr	r2, [r7, #32]
 80031be:	e841 2300 	strex	r3, r2, [r1]
 80031c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1e5      	bne.n	8003196 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e00f      	b.n	8003206 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4013      	ands	r3, r2
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	bf0c      	ite	eq
 80031f6:	2301      	moveq	r3, #1
 80031f8:	2300      	movne	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	429a      	cmp	r2, r3
 8003202:	d09f      	beq.n	8003144 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3740      	adds	r7, #64	; 0x40
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800324a:	f023 030c 	bic.w	r3, r3, #12
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	430b      	orrs	r3, r1
 8003256:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a2c      	ldr	r2, [pc, #176]	; (8003324 <UART_SetConfig+0x114>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d103      	bne.n	8003280 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003278:	f7ff f808 	bl	800228c <HAL_RCC_GetPCLK2Freq>
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	e002      	b.n	8003286 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7fe fff0 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 8003284:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	009a      	lsls	r2, r3, #2
 8003290:	441a      	add	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	fbb2 f3f3 	udiv	r3, r2, r3
 800329c:	4a22      	ldr	r2, [pc, #136]	; (8003328 <UART_SetConfig+0x118>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	0119      	lsls	r1, r3, #4
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	009a      	lsls	r2, r3, #2
 80032b0:	441a      	add	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032bc:	4b1a      	ldr	r3, [pc, #104]	; (8003328 <UART_SetConfig+0x118>)
 80032be:	fba3 0302 	umull	r0, r3, r3, r2
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	2064      	movs	r0, #100	; 0x64
 80032c6:	fb00 f303 	mul.w	r3, r0, r3
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	3332      	adds	r3, #50	; 0x32
 80032d0:	4a15      	ldr	r2, [pc, #84]	; (8003328 <UART_SetConfig+0x118>)
 80032d2:	fba2 2303 	umull	r2, r3, r2, r3
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032dc:	4419      	add	r1, r3
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	009a      	lsls	r2, r3, #2
 80032e8:	441a      	add	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032f4:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <UART_SetConfig+0x118>)
 80032f6:	fba3 0302 	umull	r0, r3, r3, r2
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	2064      	movs	r0, #100	; 0x64
 80032fe:	fb00 f303 	mul.w	r3, r0, r3
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	3332      	adds	r3, #50	; 0x32
 8003308:	4a07      	ldr	r2, [pc, #28]	; (8003328 <UART_SetConfig+0x118>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	f003 020f 	and.w	r2, r3, #15
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	440a      	add	r2, r1
 800331a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800331c:	bf00      	nop
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40013800 	.word	0x40013800
 8003328:	51eb851f 	.word	0x51eb851f

0800332c <__errno>:
 800332c:	4b01      	ldr	r3, [pc, #4]	; (8003334 <__errno+0x8>)
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20000080 	.word	0x20000080

08003338 <__libc_init_array>:
 8003338:	b570      	push	{r4, r5, r6, lr}
 800333a:	2600      	movs	r6, #0
 800333c:	4d0c      	ldr	r5, [pc, #48]	; (8003370 <__libc_init_array+0x38>)
 800333e:	4c0d      	ldr	r4, [pc, #52]	; (8003374 <__libc_init_array+0x3c>)
 8003340:	1b64      	subs	r4, r4, r5
 8003342:	10a4      	asrs	r4, r4, #2
 8003344:	42a6      	cmp	r6, r4
 8003346:	d109      	bne.n	800335c <__libc_init_array+0x24>
 8003348:	f000 ff82 	bl	8004250 <_init>
 800334c:	2600      	movs	r6, #0
 800334e:	4d0a      	ldr	r5, [pc, #40]	; (8003378 <__libc_init_array+0x40>)
 8003350:	4c0a      	ldr	r4, [pc, #40]	; (800337c <__libc_init_array+0x44>)
 8003352:	1b64      	subs	r4, r4, r5
 8003354:	10a4      	asrs	r4, r4, #2
 8003356:	42a6      	cmp	r6, r4
 8003358:	d105      	bne.n	8003366 <__libc_init_array+0x2e>
 800335a:	bd70      	pop	{r4, r5, r6, pc}
 800335c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003360:	4798      	blx	r3
 8003362:	3601      	adds	r6, #1
 8003364:	e7ee      	b.n	8003344 <__libc_init_array+0xc>
 8003366:	f855 3b04 	ldr.w	r3, [r5], #4
 800336a:	4798      	blx	r3
 800336c:	3601      	adds	r6, #1
 800336e:	e7f2      	b.n	8003356 <__libc_init_array+0x1e>
 8003370:	08004384 	.word	0x08004384
 8003374:	08004384 	.word	0x08004384
 8003378:	08004384 	.word	0x08004384
 800337c:	08004388 	.word	0x08004388

08003380 <memset>:
 8003380:	4603      	mov	r3, r0
 8003382:	4402      	add	r2, r0
 8003384:	4293      	cmp	r3, r2
 8003386:	d100      	bne.n	800338a <memset+0xa>
 8003388:	4770      	bx	lr
 800338a:	f803 1b01 	strb.w	r1, [r3], #1
 800338e:	e7f9      	b.n	8003384 <memset+0x4>

08003390 <iprintf>:
 8003390:	b40f      	push	{r0, r1, r2, r3}
 8003392:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <iprintf+0x2c>)
 8003394:	b513      	push	{r0, r1, r4, lr}
 8003396:	681c      	ldr	r4, [r3, #0]
 8003398:	b124      	cbz	r4, 80033a4 <iprintf+0x14>
 800339a:	69a3      	ldr	r3, [r4, #24]
 800339c:	b913      	cbnz	r3, 80033a4 <iprintf+0x14>
 800339e:	4620      	mov	r0, r4
 80033a0:	f000 f866 	bl	8003470 <__sinit>
 80033a4:	ab05      	add	r3, sp, #20
 80033a6:	4620      	mov	r0, r4
 80033a8:	9a04      	ldr	r2, [sp, #16]
 80033aa:	68a1      	ldr	r1, [r4, #8]
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	f000 f981 	bl	80036b4 <_vfiprintf_r>
 80033b2:	b002      	add	sp, #8
 80033b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033b8:	b004      	add	sp, #16
 80033ba:	4770      	bx	lr
 80033bc:	20000080 	.word	0x20000080

080033c0 <std>:
 80033c0:	2300      	movs	r3, #0
 80033c2:	b510      	push	{r4, lr}
 80033c4:	4604      	mov	r4, r0
 80033c6:	e9c0 3300 	strd	r3, r3, [r0]
 80033ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033ce:	6083      	str	r3, [r0, #8]
 80033d0:	8181      	strh	r1, [r0, #12]
 80033d2:	6643      	str	r3, [r0, #100]	; 0x64
 80033d4:	81c2      	strh	r2, [r0, #14]
 80033d6:	6183      	str	r3, [r0, #24]
 80033d8:	4619      	mov	r1, r3
 80033da:	2208      	movs	r2, #8
 80033dc:	305c      	adds	r0, #92	; 0x5c
 80033de:	f7ff ffcf 	bl	8003380 <memset>
 80033e2:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <std+0x38>)
 80033e4:	6224      	str	r4, [r4, #32]
 80033e6:	6263      	str	r3, [r4, #36]	; 0x24
 80033e8:	4b04      	ldr	r3, [pc, #16]	; (80033fc <std+0x3c>)
 80033ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80033ec:	4b04      	ldr	r3, [pc, #16]	; (8003400 <std+0x40>)
 80033ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033f0:	4b04      	ldr	r3, [pc, #16]	; (8003404 <std+0x44>)
 80033f2:	6323      	str	r3, [r4, #48]	; 0x30
 80033f4:	bd10      	pop	{r4, pc}
 80033f6:	bf00      	nop
 80033f8:	08003c61 	.word	0x08003c61
 80033fc:	08003c83 	.word	0x08003c83
 8003400:	08003cbb 	.word	0x08003cbb
 8003404:	08003cdf 	.word	0x08003cdf

08003408 <_cleanup_r>:
 8003408:	4901      	ldr	r1, [pc, #4]	; (8003410 <_cleanup_r+0x8>)
 800340a:	f000 b8af 	b.w	800356c <_fwalk_reent>
 800340e:	bf00      	nop
 8003410:	08003fb9 	.word	0x08003fb9

08003414 <__sfmoreglue>:
 8003414:	b570      	push	{r4, r5, r6, lr}
 8003416:	2568      	movs	r5, #104	; 0x68
 8003418:	1e4a      	subs	r2, r1, #1
 800341a:	4355      	muls	r5, r2
 800341c:	460e      	mov	r6, r1
 800341e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003422:	f000 f8c5 	bl	80035b0 <_malloc_r>
 8003426:	4604      	mov	r4, r0
 8003428:	b140      	cbz	r0, 800343c <__sfmoreglue+0x28>
 800342a:	2100      	movs	r1, #0
 800342c:	e9c0 1600 	strd	r1, r6, [r0]
 8003430:	300c      	adds	r0, #12
 8003432:	60a0      	str	r0, [r4, #8]
 8003434:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003438:	f7ff ffa2 	bl	8003380 <memset>
 800343c:	4620      	mov	r0, r4
 800343e:	bd70      	pop	{r4, r5, r6, pc}

08003440 <__sfp_lock_acquire>:
 8003440:	4801      	ldr	r0, [pc, #4]	; (8003448 <__sfp_lock_acquire+0x8>)
 8003442:	f000 b8b3 	b.w	80035ac <__retarget_lock_acquire_recursive>
 8003446:	bf00      	nop
 8003448:	20000270 	.word	0x20000270

0800344c <__sfp_lock_release>:
 800344c:	4801      	ldr	r0, [pc, #4]	; (8003454 <__sfp_lock_release+0x8>)
 800344e:	f000 b8ae 	b.w	80035ae <__retarget_lock_release_recursive>
 8003452:	bf00      	nop
 8003454:	20000270 	.word	0x20000270

08003458 <__sinit_lock_acquire>:
 8003458:	4801      	ldr	r0, [pc, #4]	; (8003460 <__sinit_lock_acquire+0x8>)
 800345a:	f000 b8a7 	b.w	80035ac <__retarget_lock_acquire_recursive>
 800345e:	bf00      	nop
 8003460:	2000026b 	.word	0x2000026b

08003464 <__sinit_lock_release>:
 8003464:	4801      	ldr	r0, [pc, #4]	; (800346c <__sinit_lock_release+0x8>)
 8003466:	f000 b8a2 	b.w	80035ae <__retarget_lock_release_recursive>
 800346a:	bf00      	nop
 800346c:	2000026b 	.word	0x2000026b

08003470 <__sinit>:
 8003470:	b510      	push	{r4, lr}
 8003472:	4604      	mov	r4, r0
 8003474:	f7ff fff0 	bl	8003458 <__sinit_lock_acquire>
 8003478:	69a3      	ldr	r3, [r4, #24]
 800347a:	b11b      	cbz	r3, 8003484 <__sinit+0x14>
 800347c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003480:	f7ff bff0 	b.w	8003464 <__sinit_lock_release>
 8003484:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003488:	6523      	str	r3, [r4, #80]	; 0x50
 800348a:	4b13      	ldr	r3, [pc, #76]	; (80034d8 <__sinit+0x68>)
 800348c:	4a13      	ldr	r2, [pc, #76]	; (80034dc <__sinit+0x6c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	62a2      	str	r2, [r4, #40]	; 0x28
 8003492:	42a3      	cmp	r3, r4
 8003494:	bf08      	it	eq
 8003496:	2301      	moveq	r3, #1
 8003498:	4620      	mov	r0, r4
 800349a:	bf08      	it	eq
 800349c:	61a3      	streq	r3, [r4, #24]
 800349e:	f000 f81f 	bl	80034e0 <__sfp>
 80034a2:	6060      	str	r0, [r4, #4]
 80034a4:	4620      	mov	r0, r4
 80034a6:	f000 f81b 	bl	80034e0 <__sfp>
 80034aa:	60a0      	str	r0, [r4, #8]
 80034ac:	4620      	mov	r0, r4
 80034ae:	f000 f817 	bl	80034e0 <__sfp>
 80034b2:	2200      	movs	r2, #0
 80034b4:	2104      	movs	r1, #4
 80034b6:	60e0      	str	r0, [r4, #12]
 80034b8:	6860      	ldr	r0, [r4, #4]
 80034ba:	f7ff ff81 	bl	80033c0 <std>
 80034be:	2201      	movs	r2, #1
 80034c0:	2109      	movs	r1, #9
 80034c2:	68a0      	ldr	r0, [r4, #8]
 80034c4:	f7ff ff7c 	bl	80033c0 <std>
 80034c8:	2202      	movs	r2, #2
 80034ca:	2112      	movs	r1, #18
 80034cc:	68e0      	ldr	r0, [r4, #12]
 80034ce:	f7ff ff77 	bl	80033c0 <std>
 80034d2:	2301      	movs	r3, #1
 80034d4:	61a3      	str	r3, [r4, #24]
 80034d6:	e7d1      	b.n	800347c <__sinit+0xc>
 80034d8:	080042ec 	.word	0x080042ec
 80034dc:	08003409 	.word	0x08003409

080034e0 <__sfp>:
 80034e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e2:	4607      	mov	r7, r0
 80034e4:	f7ff ffac 	bl	8003440 <__sfp_lock_acquire>
 80034e8:	4b1e      	ldr	r3, [pc, #120]	; (8003564 <__sfp+0x84>)
 80034ea:	681e      	ldr	r6, [r3, #0]
 80034ec:	69b3      	ldr	r3, [r6, #24]
 80034ee:	b913      	cbnz	r3, 80034f6 <__sfp+0x16>
 80034f0:	4630      	mov	r0, r6
 80034f2:	f7ff ffbd 	bl	8003470 <__sinit>
 80034f6:	3648      	adds	r6, #72	; 0x48
 80034f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80034fc:	3b01      	subs	r3, #1
 80034fe:	d503      	bpl.n	8003508 <__sfp+0x28>
 8003500:	6833      	ldr	r3, [r6, #0]
 8003502:	b30b      	cbz	r3, 8003548 <__sfp+0x68>
 8003504:	6836      	ldr	r6, [r6, #0]
 8003506:	e7f7      	b.n	80034f8 <__sfp+0x18>
 8003508:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800350c:	b9d5      	cbnz	r5, 8003544 <__sfp+0x64>
 800350e:	4b16      	ldr	r3, [pc, #88]	; (8003568 <__sfp+0x88>)
 8003510:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003514:	60e3      	str	r3, [r4, #12]
 8003516:	6665      	str	r5, [r4, #100]	; 0x64
 8003518:	f000 f847 	bl	80035aa <__retarget_lock_init_recursive>
 800351c:	f7ff ff96 	bl	800344c <__sfp_lock_release>
 8003520:	2208      	movs	r2, #8
 8003522:	4629      	mov	r1, r5
 8003524:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003528:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800352c:	6025      	str	r5, [r4, #0]
 800352e:	61a5      	str	r5, [r4, #24]
 8003530:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003534:	f7ff ff24 	bl	8003380 <memset>
 8003538:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800353c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003540:	4620      	mov	r0, r4
 8003542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003544:	3468      	adds	r4, #104	; 0x68
 8003546:	e7d9      	b.n	80034fc <__sfp+0x1c>
 8003548:	2104      	movs	r1, #4
 800354a:	4638      	mov	r0, r7
 800354c:	f7ff ff62 	bl	8003414 <__sfmoreglue>
 8003550:	4604      	mov	r4, r0
 8003552:	6030      	str	r0, [r6, #0]
 8003554:	2800      	cmp	r0, #0
 8003556:	d1d5      	bne.n	8003504 <__sfp+0x24>
 8003558:	f7ff ff78 	bl	800344c <__sfp_lock_release>
 800355c:	230c      	movs	r3, #12
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	e7ee      	b.n	8003540 <__sfp+0x60>
 8003562:	bf00      	nop
 8003564:	080042ec 	.word	0x080042ec
 8003568:	ffff0001 	.word	0xffff0001

0800356c <_fwalk_reent>:
 800356c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003570:	4606      	mov	r6, r0
 8003572:	4688      	mov	r8, r1
 8003574:	2700      	movs	r7, #0
 8003576:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800357a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800357e:	f1b9 0901 	subs.w	r9, r9, #1
 8003582:	d505      	bpl.n	8003590 <_fwalk_reent+0x24>
 8003584:	6824      	ldr	r4, [r4, #0]
 8003586:	2c00      	cmp	r4, #0
 8003588:	d1f7      	bne.n	800357a <_fwalk_reent+0xe>
 800358a:	4638      	mov	r0, r7
 800358c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003590:	89ab      	ldrh	r3, [r5, #12]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d907      	bls.n	80035a6 <_fwalk_reent+0x3a>
 8003596:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800359a:	3301      	adds	r3, #1
 800359c:	d003      	beq.n	80035a6 <_fwalk_reent+0x3a>
 800359e:	4629      	mov	r1, r5
 80035a0:	4630      	mov	r0, r6
 80035a2:	47c0      	blx	r8
 80035a4:	4307      	orrs	r7, r0
 80035a6:	3568      	adds	r5, #104	; 0x68
 80035a8:	e7e9      	b.n	800357e <_fwalk_reent+0x12>

080035aa <__retarget_lock_init_recursive>:
 80035aa:	4770      	bx	lr

080035ac <__retarget_lock_acquire_recursive>:
 80035ac:	4770      	bx	lr

080035ae <__retarget_lock_release_recursive>:
 80035ae:	4770      	bx	lr

080035b0 <_malloc_r>:
 80035b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b2:	1ccd      	adds	r5, r1, #3
 80035b4:	f025 0503 	bic.w	r5, r5, #3
 80035b8:	3508      	adds	r5, #8
 80035ba:	2d0c      	cmp	r5, #12
 80035bc:	bf38      	it	cc
 80035be:	250c      	movcc	r5, #12
 80035c0:	2d00      	cmp	r5, #0
 80035c2:	4606      	mov	r6, r0
 80035c4:	db01      	blt.n	80035ca <_malloc_r+0x1a>
 80035c6:	42a9      	cmp	r1, r5
 80035c8:	d903      	bls.n	80035d2 <_malloc_r+0x22>
 80035ca:	230c      	movs	r3, #12
 80035cc:	6033      	str	r3, [r6, #0]
 80035ce:	2000      	movs	r0, #0
 80035d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035d2:	f000 fdb1 	bl	8004138 <__malloc_lock>
 80035d6:	4921      	ldr	r1, [pc, #132]	; (800365c <_malloc_r+0xac>)
 80035d8:	680a      	ldr	r2, [r1, #0]
 80035da:	4614      	mov	r4, r2
 80035dc:	b99c      	cbnz	r4, 8003606 <_malloc_r+0x56>
 80035de:	4f20      	ldr	r7, [pc, #128]	; (8003660 <_malloc_r+0xb0>)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	b923      	cbnz	r3, 80035ee <_malloc_r+0x3e>
 80035e4:	4621      	mov	r1, r4
 80035e6:	4630      	mov	r0, r6
 80035e8:	f000 fb2a 	bl	8003c40 <_sbrk_r>
 80035ec:	6038      	str	r0, [r7, #0]
 80035ee:	4629      	mov	r1, r5
 80035f0:	4630      	mov	r0, r6
 80035f2:	f000 fb25 	bl	8003c40 <_sbrk_r>
 80035f6:	1c43      	adds	r3, r0, #1
 80035f8:	d123      	bne.n	8003642 <_malloc_r+0x92>
 80035fa:	230c      	movs	r3, #12
 80035fc:	4630      	mov	r0, r6
 80035fe:	6033      	str	r3, [r6, #0]
 8003600:	f000 fda0 	bl	8004144 <__malloc_unlock>
 8003604:	e7e3      	b.n	80035ce <_malloc_r+0x1e>
 8003606:	6823      	ldr	r3, [r4, #0]
 8003608:	1b5b      	subs	r3, r3, r5
 800360a:	d417      	bmi.n	800363c <_malloc_r+0x8c>
 800360c:	2b0b      	cmp	r3, #11
 800360e:	d903      	bls.n	8003618 <_malloc_r+0x68>
 8003610:	6023      	str	r3, [r4, #0]
 8003612:	441c      	add	r4, r3
 8003614:	6025      	str	r5, [r4, #0]
 8003616:	e004      	b.n	8003622 <_malloc_r+0x72>
 8003618:	6863      	ldr	r3, [r4, #4]
 800361a:	42a2      	cmp	r2, r4
 800361c:	bf0c      	ite	eq
 800361e:	600b      	streq	r3, [r1, #0]
 8003620:	6053      	strne	r3, [r2, #4]
 8003622:	4630      	mov	r0, r6
 8003624:	f000 fd8e 	bl	8004144 <__malloc_unlock>
 8003628:	f104 000b 	add.w	r0, r4, #11
 800362c:	1d23      	adds	r3, r4, #4
 800362e:	f020 0007 	bic.w	r0, r0, #7
 8003632:	1ac2      	subs	r2, r0, r3
 8003634:	d0cc      	beq.n	80035d0 <_malloc_r+0x20>
 8003636:	1a1b      	subs	r3, r3, r0
 8003638:	50a3      	str	r3, [r4, r2]
 800363a:	e7c9      	b.n	80035d0 <_malloc_r+0x20>
 800363c:	4622      	mov	r2, r4
 800363e:	6864      	ldr	r4, [r4, #4]
 8003640:	e7cc      	b.n	80035dc <_malloc_r+0x2c>
 8003642:	1cc4      	adds	r4, r0, #3
 8003644:	f024 0403 	bic.w	r4, r4, #3
 8003648:	42a0      	cmp	r0, r4
 800364a:	d0e3      	beq.n	8003614 <_malloc_r+0x64>
 800364c:	1a21      	subs	r1, r4, r0
 800364e:	4630      	mov	r0, r6
 8003650:	f000 faf6 	bl	8003c40 <_sbrk_r>
 8003654:	3001      	adds	r0, #1
 8003656:	d1dd      	bne.n	8003614 <_malloc_r+0x64>
 8003658:	e7cf      	b.n	80035fa <_malloc_r+0x4a>
 800365a:	bf00      	nop
 800365c:	20000174 	.word	0x20000174
 8003660:	20000178 	.word	0x20000178

08003664 <__sfputc_r>:
 8003664:	6893      	ldr	r3, [r2, #8]
 8003666:	b410      	push	{r4}
 8003668:	3b01      	subs	r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	6093      	str	r3, [r2, #8]
 800366e:	da07      	bge.n	8003680 <__sfputc_r+0x1c>
 8003670:	6994      	ldr	r4, [r2, #24]
 8003672:	42a3      	cmp	r3, r4
 8003674:	db01      	blt.n	800367a <__sfputc_r+0x16>
 8003676:	290a      	cmp	r1, #10
 8003678:	d102      	bne.n	8003680 <__sfputc_r+0x1c>
 800367a:	bc10      	pop	{r4}
 800367c:	f000 bb34 	b.w	8003ce8 <__swbuf_r>
 8003680:	6813      	ldr	r3, [r2, #0]
 8003682:	1c58      	adds	r0, r3, #1
 8003684:	6010      	str	r0, [r2, #0]
 8003686:	7019      	strb	r1, [r3, #0]
 8003688:	4608      	mov	r0, r1
 800368a:	bc10      	pop	{r4}
 800368c:	4770      	bx	lr

0800368e <__sfputs_r>:
 800368e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003690:	4606      	mov	r6, r0
 8003692:	460f      	mov	r7, r1
 8003694:	4614      	mov	r4, r2
 8003696:	18d5      	adds	r5, r2, r3
 8003698:	42ac      	cmp	r4, r5
 800369a:	d101      	bne.n	80036a0 <__sfputs_r+0x12>
 800369c:	2000      	movs	r0, #0
 800369e:	e007      	b.n	80036b0 <__sfputs_r+0x22>
 80036a0:	463a      	mov	r2, r7
 80036a2:	4630      	mov	r0, r6
 80036a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036a8:	f7ff ffdc 	bl	8003664 <__sfputc_r>
 80036ac:	1c43      	adds	r3, r0, #1
 80036ae:	d1f3      	bne.n	8003698 <__sfputs_r+0xa>
 80036b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036b4 <_vfiprintf_r>:
 80036b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b8:	460d      	mov	r5, r1
 80036ba:	4614      	mov	r4, r2
 80036bc:	4698      	mov	r8, r3
 80036be:	4606      	mov	r6, r0
 80036c0:	b09d      	sub	sp, #116	; 0x74
 80036c2:	b118      	cbz	r0, 80036cc <_vfiprintf_r+0x18>
 80036c4:	6983      	ldr	r3, [r0, #24]
 80036c6:	b90b      	cbnz	r3, 80036cc <_vfiprintf_r+0x18>
 80036c8:	f7ff fed2 	bl	8003470 <__sinit>
 80036cc:	4b89      	ldr	r3, [pc, #548]	; (80038f4 <_vfiprintf_r+0x240>)
 80036ce:	429d      	cmp	r5, r3
 80036d0:	d11b      	bne.n	800370a <_vfiprintf_r+0x56>
 80036d2:	6875      	ldr	r5, [r6, #4]
 80036d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036d6:	07d9      	lsls	r1, r3, #31
 80036d8:	d405      	bmi.n	80036e6 <_vfiprintf_r+0x32>
 80036da:	89ab      	ldrh	r3, [r5, #12]
 80036dc:	059a      	lsls	r2, r3, #22
 80036de:	d402      	bmi.n	80036e6 <_vfiprintf_r+0x32>
 80036e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036e2:	f7ff ff63 	bl	80035ac <__retarget_lock_acquire_recursive>
 80036e6:	89ab      	ldrh	r3, [r5, #12]
 80036e8:	071b      	lsls	r3, r3, #28
 80036ea:	d501      	bpl.n	80036f0 <_vfiprintf_r+0x3c>
 80036ec:	692b      	ldr	r3, [r5, #16]
 80036ee:	b9eb      	cbnz	r3, 800372c <_vfiprintf_r+0x78>
 80036f0:	4629      	mov	r1, r5
 80036f2:	4630      	mov	r0, r6
 80036f4:	f000 fb5c 	bl	8003db0 <__swsetup_r>
 80036f8:	b1c0      	cbz	r0, 800372c <_vfiprintf_r+0x78>
 80036fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036fc:	07dc      	lsls	r4, r3, #31
 80036fe:	d50e      	bpl.n	800371e <_vfiprintf_r+0x6a>
 8003700:	f04f 30ff 	mov.w	r0, #4294967295
 8003704:	b01d      	add	sp, #116	; 0x74
 8003706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800370a:	4b7b      	ldr	r3, [pc, #492]	; (80038f8 <_vfiprintf_r+0x244>)
 800370c:	429d      	cmp	r5, r3
 800370e:	d101      	bne.n	8003714 <_vfiprintf_r+0x60>
 8003710:	68b5      	ldr	r5, [r6, #8]
 8003712:	e7df      	b.n	80036d4 <_vfiprintf_r+0x20>
 8003714:	4b79      	ldr	r3, [pc, #484]	; (80038fc <_vfiprintf_r+0x248>)
 8003716:	429d      	cmp	r5, r3
 8003718:	bf08      	it	eq
 800371a:	68f5      	ldreq	r5, [r6, #12]
 800371c:	e7da      	b.n	80036d4 <_vfiprintf_r+0x20>
 800371e:	89ab      	ldrh	r3, [r5, #12]
 8003720:	0598      	lsls	r0, r3, #22
 8003722:	d4ed      	bmi.n	8003700 <_vfiprintf_r+0x4c>
 8003724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003726:	f7ff ff42 	bl	80035ae <__retarget_lock_release_recursive>
 800372a:	e7e9      	b.n	8003700 <_vfiprintf_r+0x4c>
 800372c:	2300      	movs	r3, #0
 800372e:	9309      	str	r3, [sp, #36]	; 0x24
 8003730:	2320      	movs	r3, #32
 8003732:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003736:	2330      	movs	r3, #48	; 0x30
 8003738:	f04f 0901 	mov.w	r9, #1
 800373c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003740:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003900 <_vfiprintf_r+0x24c>
 8003744:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003748:	4623      	mov	r3, r4
 800374a:	469a      	mov	sl, r3
 800374c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003750:	b10a      	cbz	r2, 8003756 <_vfiprintf_r+0xa2>
 8003752:	2a25      	cmp	r2, #37	; 0x25
 8003754:	d1f9      	bne.n	800374a <_vfiprintf_r+0x96>
 8003756:	ebba 0b04 	subs.w	fp, sl, r4
 800375a:	d00b      	beq.n	8003774 <_vfiprintf_r+0xc0>
 800375c:	465b      	mov	r3, fp
 800375e:	4622      	mov	r2, r4
 8003760:	4629      	mov	r1, r5
 8003762:	4630      	mov	r0, r6
 8003764:	f7ff ff93 	bl	800368e <__sfputs_r>
 8003768:	3001      	adds	r0, #1
 800376a:	f000 80aa 	beq.w	80038c2 <_vfiprintf_r+0x20e>
 800376e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003770:	445a      	add	r2, fp
 8003772:	9209      	str	r2, [sp, #36]	; 0x24
 8003774:	f89a 3000 	ldrb.w	r3, [sl]
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80a2 	beq.w	80038c2 <_vfiprintf_r+0x20e>
 800377e:	2300      	movs	r3, #0
 8003780:	f04f 32ff 	mov.w	r2, #4294967295
 8003784:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003788:	f10a 0a01 	add.w	sl, sl, #1
 800378c:	9304      	str	r3, [sp, #16]
 800378e:	9307      	str	r3, [sp, #28]
 8003790:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003794:	931a      	str	r3, [sp, #104]	; 0x68
 8003796:	4654      	mov	r4, sl
 8003798:	2205      	movs	r2, #5
 800379a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800379e:	4858      	ldr	r0, [pc, #352]	; (8003900 <_vfiprintf_r+0x24c>)
 80037a0:	f000 fcbc 	bl	800411c <memchr>
 80037a4:	9a04      	ldr	r2, [sp, #16]
 80037a6:	b9d8      	cbnz	r0, 80037e0 <_vfiprintf_r+0x12c>
 80037a8:	06d1      	lsls	r1, r2, #27
 80037aa:	bf44      	itt	mi
 80037ac:	2320      	movmi	r3, #32
 80037ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037b2:	0713      	lsls	r3, r2, #28
 80037b4:	bf44      	itt	mi
 80037b6:	232b      	movmi	r3, #43	; 0x2b
 80037b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037bc:	f89a 3000 	ldrb.w	r3, [sl]
 80037c0:	2b2a      	cmp	r3, #42	; 0x2a
 80037c2:	d015      	beq.n	80037f0 <_vfiprintf_r+0x13c>
 80037c4:	4654      	mov	r4, sl
 80037c6:	2000      	movs	r0, #0
 80037c8:	f04f 0c0a 	mov.w	ip, #10
 80037cc:	9a07      	ldr	r2, [sp, #28]
 80037ce:	4621      	mov	r1, r4
 80037d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037d4:	3b30      	subs	r3, #48	; 0x30
 80037d6:	2b09      	cmp	r3, #9
 80037d8:	d94e      	bls.n	8003878 <_vfiprintf_r+0x1c4>
 80037da:	b1b0      	cbz	r0, 800380a <_vfiprintf_r+0x156>
 80037dc:	9207      	str	r2, [sp, #28]
 80037de:	e014      	b.n	800380a <_vfiprintf_r+0x156>
 80037e0:	eba0 0308 	sub.w	r3, r0, r8
 80037e4:	fa09 f303 	lsl.w	r3, r9, r3
 80037e8:	4313      	orrs	r3, r2
 80037ea:	46a2      	mov	sl, r4
 80037ec:	9304      	str	r3, [sp, #16]
 80037ee:	e7d2      	b.n	8003796 <_vfiprintf_r+0xe2>
 80037f0:	9b03      	ldr	r3, [sp, #12]
 80037f2:	1d19      	adds	r1, r3, #4
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	9103      	str	r1, [sp, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	bfbb      	ittet	lt
 80037fc:	425b      	neglt	r3, r3
 80037fe:	f042 0202 	orrlt.w	r2, r2, #2
 8003802:	9307      	strge	r3, [sp, #28]
 8003804:	9307      	strlt	r3, [sp, #28]
 8003806:	bfb8      	it	lt
 8003808:	9204      	strlt	r2, [sp, #16]
 800380a:	7823      	ldrb	r3, [r4, #0]
 800380c:	2b2e      	cmp	r3, #46	; 0x2e
 800380e:	d10c      	bne.n	800382a <_vfiprintf_r+0x176>
 8003810:	7863      	ldrb	r3, [r4, #1]
 8003812:	2b2a      	cmp	r3, #42	; 0x2a
 8003814:	d135      	bne.n	8003882 <_vfiprintf_r+0x1ce>
 8003816:	9b03      	ldr	r3, [sp, #12]
 8003818:	3402      	adds	r4, #2
 800381a:	1d1a      	adds	r2, r3, #4
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	9203      	str	r2, [sp, #12]
 8003820:	2b00      	cmp	r3, #0
 8003822:	bfb8      	it	lt
 8003824:	f04f 33ff 	movlt.w	r3, #4294967295
 8003828:	9305      	str	r3, [sp, #20]
 800382a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003910 <_vfiprintf_r+0x25c>
 800382e:	2203      	movs	r2, #3
 8003830:	4650      	mov	r0, sl
 8003832:	7821      	ldrb	r1, [r4, #0]
 8003834:	f000 fc72 	bl	800411c <memchr>
 8003838:	b140      	cbz	r0, 800384c <_vfiprintf_r+0x198>
 800383a:	2340      	movs	r3, #64	; 0x40
 800383c:	eba0 000a 	sub.w	r0, r0, sl
 8003840:	fa03 f000 	lsl.w	r0, r3, r0
 8003844:	9b04      	ldr	r3, [sp, #16]
 8003846:	3401      	adds	r4, #1
 8003848:	4303      	orrs	r3, r0
 800384a:	9304      	str	r3, [sp, #16]
 800384c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003850:	2206      	movs	r2, #6
 8003852:	482c      	ldr	r0, [pc, #176]	; (8003904 <_vfiprintf_r+0x250>)
 8003854:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003858:	f000 fc60 	bl	800411c <memchr>
 800385c:	2800      	cmp	r0, #0
 800385e:	d03f      	beq.n	80038e0 <_vfiprintf_r+0x22c>
 8003860:	4b29      	ldr	r3, [pc, #164]	; (8003908 <_vfiprintf_r+0x254>)
 8003862:	bb1b      	cbnz	r3, 80038ac <_vfiprintf_r+0x1f8>
 8003864:	9b03      	ldr	r3, [sp, #12]
 8003866:	3307      	adds	r3, #7
 8003868:	f023 0307 	bic.w	r3, r3, #7
 800386c:	3308      	adds	r3, #8
 800386e:	9303      	str	r3, [sp, #12]
 8003870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003872:	443b      	add	r3, r7
 8003874:	9309      	str	r3, [sp, #36]	; 0x24
 8003876:	e767      	b.n	8003748 <_vfiprintf_r+0x94>
 8003878:	460c      	mov	r4, r1
 800387a:	2001      	movs	r0, #1
 800387c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003880:	e7a5      	b.n	80037ce <_vfiprintf_r+0x11a>
 8003882:	2300      	movs	r3, #0
 8003884:	f04f 0c0a 	mov.w	ip, #10
 8003888:	4619      	mov	r1, r3
 800388a:	3401      	adds	r4, #1
 800388c:	9305      	str	r3, [sp, #20]
 800388e:	4620      	mov	r0, r4
 8003890:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003894:	3a30      	subs	r2, #48	; 0x30
 8003896:	2a09      	cmp	r2, #9
 8003898:	d903      	bls.n	80038a2 <_vfiprintf_r+0x1ee>
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0c5      	beq.n	800382a <_vfiprintf_r+0x176>
 800389e:	9105      	str	r1, [sp, #20]
 80038a0:	e7c3      	b.n	800382a <_vfiprintf_r+0x176>
 80038a2:	4604      	mov	r4, r0
 80038a4:	2301      	movs	r3, #1
 80038a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80038aa:	e7f0      	b.n	800388e <_vfiprintf_r+0x1da>
 80038ac:	ab03      	add	r3, sp, #12
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	462a      	mov	r2, r5
 80038b2:	4630      	mov	r0, r6
 80038b4:	4b15      	ldr	r3, [pc, #84]	; (800390c <_vfiprintf_r+0x258>)
 80038b6:	a904      	add	r1, sp, #16
 80038b8:	f3af 8000 	nop.w
 80038bc:	4607      	mov	r7, r0
 80038be:	1c78      	adds	r0, r7, #1
 80038c0:	d1d6      	bne.n	8003870 <_vfiprintf_r+0x1bc>
 80038c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038c4:	07d9      	lsls	r1, r3, #31
 80038c6:	d405      	bmi.n	80038d4 <_vfiprintf_r+0x220>
 80038c8:	89ab      	ldrh	r3, [r5, #12]
 80038ca:	059a      	lsls	r2, r3, #22
 80038cc:	d402      	bmi.n	80038d4 <_vfiprintf_r+0x220>
 80038ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038d0:	f7ff fe6d 	bl	80035ae <__retarget_lock_release_recursive>
 80038d4:	89ab      	ldrh	r3, [r5, #12]
 80038d6:	065b      	lsls	r3, r3, #25
 80038d8:	f53f af12 	bmi.w	8003700 <_vfiprintf_r+0x4c>
 80038dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038de:	e711      	b.n	8003704 <_vfiprintf_r+0x50>
 80038e0:	ab03      	add	r3, sp, #12
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	462a      	mov	r2, r5
 80038e6:	4630      	mov	r0, r6
 80038e8:	4b08      	ldr	r3, [pc, #32]	; (800390c <_vfiprintf_r+0x258>)
 80038ea:	a904      	add	r1, sp, #16
 80038ec:	f000 f882 	bl	80039f4 <_printf_i>
 80038f0:	e7e4      	b.n	80038bc <_vfiprintf_r+0x208>
 80038f2:	bf00      	nop
 80038f4:	08004310 	.word	0x08004310
 80038f8:	08004330 	.word	0x08004330
 80038fc:	080042f0 	.word	0x080042f0
 8003900:	08004350 	.word	0x08004350
 8003904:	0800435a 	.word	0x0800435a
 8003908:	00000000 	.word	0x00000000
 800390c:	0800368f 	.word	0x0800368f
 8003910:	08004356 	.word	0x08004356

08003914 <_printf_common>:
 8003914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003918:	4616      	mov	r6, r2
 800391a:	4699      	mov	r9, r3
 800391c:	688a      	ldr	r2, [r1, #8]
 800391e:	690b      	ldr	r3, [r1, #16]
 8003920:	4607      	mov	r7, r0
 8003922:	4293      	cmp	r3, r2
 8003924:	bfb8      	it	lt
 8003926:	4613      	movlt	r3, r2
 8003928:	6033      	str	r3, [r6, #0]
 800392a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800392e:	460c      	mov	r4, r1
 8003930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003934:	b10a      	cbz	r2, 800393a <_printf_common+0x26>
 8003936:	3301      	adds	r3, #1
 8003938:	6033      	str	r3, [r6, #0]
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	0699      	lsls	r1, r3, #26
 800393e:	bf42      	ittt	mi
 8003940:	6833      	ldrmi	r3, [r6, #0]
 8003942:	3302      	addmi	r3, #2
 8003944:	6033      	strmi	r3, [r6, #0]
 8003946:	6825      	ldr	r5, [r4, #0]
 8003948:	f015 0506 	ands.w	r5, r5, #6
 800394c:	d106      	bne.n	800395c <_printf_common+0x48>
 800394e:	f104 0a19 	add.w	sl, r4, #25
 8003952:	68e3      	ldr	r3, [r4, #12]
 8003954:	6832      	ldr	r2, [r6, #0]
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	42ab      	cmp	r3, r5
 800395a:	dc28      	bgt.n	80039ae <_printf_common+0x9a>
 800395c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003960:	1e13      	subs	r3, r2, #0
 8003962:	6822      	ldr	r2, [r4, #0]
 8003964:	bf18      	it	ne
 8003966:	2301      	movne	r3, #1
 8003968:	0692      	lsls	r2, r2, #26
 800396a:	d42d      	bmi.n	80039c8 <_printf_common+0xb4>
 800396c:	4649      	mov	r1, r9
 800396e:	4638      	mov	r0, r7
 8003970:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003974:	47c0      	blx	r8
 8003976:	3001      	adds	r0, #1
 8003978:	d020      	beq.n	80039bc <_printf_common+0xa8>
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	68e5      	ldr	r5, [r4, #12]
 800397e:	f003 0306 	and.w	r3, r3, #6
 8003982:	2b04      	cmp	r3, #4
 8003984:	bf18      	it	ne
 8003986:	2500      	movne	r5, #0
 8003988:	6832      	ldr	r2, [r6, #0]
 800398a:	f04f 0600 	mov.w	r6, #0
 800398e:	68a3      	ldr	r3, [r4, #8]
 8003990:	bf08      	it	eq
 8003992:	1aad      	subeq	r5, r5, r2
 8003994:	6922      	ldr	r2, [r4, #16]
 8003996:	bf08      	it	eq
 8003998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800399c:	4293      	cmp	r3, r2
 800399e:	bfc4      	itt	gt
 80039a0:	1a9b      	subgt	r3, r3, r2
 80039a2:	18ed      	addgt	r5, r5, r3
 80039a4:	341a      	adds	r4, #26
 80039a6:	42b5      	cmp	r5, r6
 80039a8:	d11a      	bne.n	80039e0 <_printf_common+0xcc>
 80039aa:	2000      	movs	r0, #0
 80039ac:	e008      	b.n	80039c0 <_printf_common+0xac>
 80039ae:	2301      	movs	r3, #1
 80039b0:	4652      	mov	r2, sl
 80039b2:	4649      	mov	r1, r9
 80039b4:	4638      	mov	r0, r7
 80039b6:	47c0      	blx	r8
 80039b8:	3001      	adds	r0, #1
 80039ba:	d103      	bne.n	80039c4 <_printf_common+0xb0>
 80039bc:	f04f 30ff 	mov.w	r0, #4294967295
 80039c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039c4:	3501      	adds	r5, #1
 80039c6:	e7c4      	b.n	8003952 <_printf_common+0x3e>
 80039c8:	2030      	movs	r0, #48	; 0x30
 80039ca:	18e1      	adds	r1, r4, r3
 80039cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039d6:	4422      	add	r2, r4
 80039d8:	3302      	adds	r3, #2
 80039da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039de:	e7c5      	b.n	800396c <_printf_common+0x58>
 80039e0:	2301      	movs	r3, #1
 80039e2:	4622      	mov	r2, r4
 80039e4:	4649      	mov	r1, r9
 80039e6:	4638      	mov	r0, r7
 80039e8:	47c0      	blx	r8
 80039ea:	3001      	adds	r0, #1
 80039ec:	d0e6      	beq.n	80039bc <_printf_common+0xa8>
 80039ee:	3601      	adds	r6, #1
 80039f0:	e7d9      	b.n	80039a6 <_printf_common+0x92>
	...

080039f4 <_printf_i>:
 80039f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039f8:	460c      	mov	r4, r1
 80039fa:	7e27      	ldrb	r7, [r4, #24]
 80039fc:	4691      	mov	r9, r2
 80039fe:	2f78      	cmp	r7, #120	; 0x78
 8003a00:	4680      	mov	r8, r0
 8003a02:	469a      	mov	sl, r3
 8003a04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003a06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a0a:	d807      	bhi.n	8003a1c <_printf_i+0x28>
 8003a0c:	2f62      	cmp	r7, #98	; 0x62
 8003a0e:	d80a      	bhi.n	8003a26 <_printf_i+0x32>
 8003a10:	2f00      	cmp	r7, #0
 8003a12:	f000 80d9 	beq.w	8003bc8 <_printf_i+0x1d4>
 8003a16:	2f58      	cmp	r7, #88	; 0x58
 8003a18:	f000 80a4 	beq.w	8003b64 <_printf_i+0x170>
 8003a1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a24:	e03a      	b.n	8003a9c <_printf_i+0xa8>
 8003a26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a2a:	2b15      	cmp	r3, #21
 8003a2c:	d8f6      	bhi.n	8003a1c <_printf_i+0x28>
 8003a2e:	a001      	add	r0, pc, #4	; (adr r0, 8003a34 <_printf_i+0x40>)
 8003a30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003a34:	08003a8d 	.word	0x08003a8d
 8003a38:	08003aa1 	.word	0x08003aa1
 8003a3c:	08003a1d 	.word	0x08003a1d
 8003a40:	08003a1d 	.word	0x08003a1d
 8003a44:	08003a1d 	.word	0x08003a1d
 8003a48:	08003a1d 	.word	0x08003a1d
 8003a4c:	08003aa1 	.word	0x08003aa1
 8003a50:	08003a1d 	.word	0x08003a1d
 8003a54:	08003a1d 	.word	0x08003a1d
 8003a58:	08003a1d 	.word	0x08003a1d
 8003a5c:	08003a1d 	.word	0x08003a1d
 8003a60:	08003baf 	.word	0x08003baf
 8003a64:	08003ad1 	.word	0x08003ad1
 8003a68:	08003b91 	.word	0x08003b91
 8003a6c:	08003a1d 	.word	0x08003a1d
 8003a70:	08003a1d 	.word	0x08003a1d
 8003a74:	08003bd1 	.word	0x08003bd1
 8003a78:	08003a1d 	.word	0x08003a1d
 8003a7c:	08003ad1 	.word	0x08003ad1
 8003a80:	08003a1d 	.word	0x08003a1d
 8003a84:	08003a1d 	.word	0x08003a1d
 8003a88:	08003b99 	.word	0x08003b99
 8003a8c:	680b      	ldr	r3, [r1, #0]
 8003a8e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a92:	1d1a      	adds	r2, r3, #4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	600a      	str	r2, [r1, #0]
 8003a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0a4      	b.n	8003bea <_printf_i+0x1f6>
 8003aa0:	6825      	ldr	r5, [r4, #0]
 8003aa2:	6808      	ldr	r0, [r1, #0]
 8003aa4:	062e      	lsls	r6, r5, #24
 8003aa6:	f100 0304 	add.w	r3, r0, #4
 8003aaa:	d50a      	bpl.n	8003ac2 <_printf_i+0xce>
 8003aac:	6805      	ldr	r5, [r0, #0]
 8003aae:	600b      	str	r3, [r1, #0]
 8003ab0:	2d00      	cmp	r5, #0
 8003ab2:	da03      	bge.n	8003abc <_printf_i+0xc8>
 8003ab4:	232d      	movs	r3, #45	; 0x2d
 8003ab6:	426d      	negs	r5, r5
 8003ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003abc:	230a      	movs	r3, #10
 8003abe:	485e      	ldr	r0, [pc, #376]	; (8003c38 <_printf_i+0x244>)
 8003ac0:	e019      	b.n	8003af6 <_printf_i+0x102>
 8003ac2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003ac6:	6805      	ldr	r5, [r0, #0]
 8003ac8:	600b      	str	r3, [r1, #0]
 8003aca:	bf18      	it	ne
 8003acc:	b22d      	sxthne	r5, r5
 8003ace:	e7ef      	b.n	8003ab0 <_printf_i+0xbc>
 8003ad0:	680b      	ldr	r3, [r1, #0]
 8003ad2:	6825      	ldr	r5, [r4, #0]
 8003ad4:	1d18      	adds	r0, r3, #4
 8003ad6:	6008      	str	r0, [r1, #0]
 8003ad8:	0628      	lsls	r0, r5, #24
 8003ada:	d501      	bpl.n	8003ae0 <_printf_i+0xec>
 8003adc:	681d      	ldr	r5, [r3, #0]
 8003ade:	e002      	b.n	8003ae6 <_printf_i+0xf2>
 8003ae0:	0669      	lsls	r1, r5, #25
 8003ae2:	d5fb      	bpl.n	8003adc <_printf_i+0xe8>
 8003ae4:	881d      	ldrh	r5, [r3, #0]
 8003ae6:	2f6f      	cmp	r7, #111	; 0x6f
 8003ae8:	bf0c      	ite	eq
 8003aea:	2308      	moveq	r3, #8
 8003aec:	230a      	movne	r3, #10
 8003aee:	4852      	ldr	r0, [pc, #328]	; (8003c38 <_printf_i+0x244>)
 8003af0:	2100      	movs	r1, #0
 8003af2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003af6:	6866      	ldr	r6, [r4, #4]
 8003af8:	2e00      	cmp	r6, #0
 8003afa:	bfa8      	it	ge
 8003afc:	6821      	ldrge	r1, [r4, #0]
 8003afe:	60a6      	str	r6, [r4, #8]
 8003b00:	bfa4      	itt	ge
 8003b02:	f021 0104 	bicge.w	r1, r1, #4
 8003b06:	6021      	strge	r1, [r4, #0]
 8003b08:	b90d      	cbnz	r5, 8003b0e <_printf_i+0x11a>
 8003b0a:	2e00      	cmp	r6, #0
 8003b0c:	d04d      	beq.n	8003baa <_printf_i+0x1b6>
 8003b0e:	4616      	mov	r6, r2
 8003b10:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b14:	fb03 5711 	mls	r7, r3, r1, r5
 8003b18:	5dc7      	ldrb	r7, [r0, r7]
 8003b1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b1e:	462f      	mov	r7, r5
 8003b20:	42bb      	cmp	r3, r7
 8003b22:	460d      	mov	r5, r1
 8003b24:	d9f4      	bls.n	8003b10 <_printf_i+0x11c>
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d10b      	bne.n	8003b42 <_printf_i+0x14e>
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	07df      	lsls	r7, r3, #31
 8003b2e:	d508      	bpl.n	8003b42 <_printf_i+0x14e>
 8003b30:	6923      	ldr	r3, [r4, #16]
 8003b32:	6861      	ldr	r1, [r4, #4]
 8003b34:	4299      	cmp	r1, r3
 8003b36:	bfde      	ittt	le
 8003b38:	2330      	movle	r3, #48	; 0x30
 8003b3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b42:	1b92      	subs	r2, r2, r6
 8003b44:	6122      	str	r2, [r4, #16]
 8003b46:	464b      	mov	r3, r9
 8003b48:	4621      	mov	r1, r4
 8003b4a:	4640      	mov	r0, r8
 8003b4c:	f8cd a000 	str.w	sl, [sp]
 8003b50:	aa03      	add	r2, sp, #12
 8003b52:	f7ff fedf 	bl	8003914 <_printf_common>
 8003b56:	3001      	adds	r0, #1
 8003b58:	d14c      	bne.n	8003bf4 <_printf_i+0x200>
 8003b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5e:	b004      	add	sp, #16
 8003b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b64:	4834      	ldr	r0, [pc, #208]	; (8003c38 <_printf_i+0x244>)
 8003b66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b6a:	680e      	ldr	r6, [r1, #0]
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003b72:	061f      	lsls	r7, r3, #24
 8003b74:	600e      	str	r6, [r1, #0]
 8003b76:	d514      	bpl.n	8003ba2 <_printf_i+0x1ae>
 8003b78:	07d9      	lsls	r1, r3, #31
 8003b7a:	bf44      	itt	mi
 8003b7c:	f043 0320 	orrmi.w	r3, r3, #32
 8003b80:	6023      	strmi	r3, [r4, #0]
 8003b82:	b91d      	cbnz	r5, 8003b8c <_printf_i+0x198>
 8003b84:	6823      	ldr	r3, [r4, #0]
 8003b86:	f023 0320 	bic.w	r3, r3, #32
 8003b8a:	6023      	str	r3, [r4, #0]
 8003b8c:	2310      	movs	r3, #16
 8003b8e:	e7af      	b.n	8003af0 <_printf_i+0xfc>
 8003b90:	6823      	ldr	r3, [r4, #0]
 8003b92:	f043 0320 	orr.w	r3, r3, #32
 8003b96:	6023      	str	r3, [r4, #0]
 8003b98:	2378      	movs	r3, #120	; 0x78
 8003b9a:	4828      	ldr	r0, [pc, #160]	; (8003c3c <_printf_i+0x248>)
 8003b9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ba0:	e7e3      	b.n	8003b6a <_printf_i+0x176>
 8003ba2:	065e      	lsls	r6, r3, #25
 8003ba4:	bf48      	it	mi
 8003ba6:	b2ad      	uxthmi	r5, r5
 8003ba8:	e7e6      	b.n	8003b78 <_printf_i+0x184>
 8003baa:	4616      	mov	r6, r2
 8003bac:	e7bb      	b.n	8003b26 <_printf_i+0x132>
 8003bae:	680b      	ldr	r3, [r1, #0]
 8003bb0:	6826      	ldr	r6, [r4, #0]
 8003bb2:	1d1d      	adds	r5, r3, #4
 8003bb4:	6960      	ldr	r0, [r4, #20]
 8003bb6:	600d      	str	r5, [r1, #0]
 8003bb8:	0635      	lsls	r5, r6, #24
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	d501      	bpl.n	8003bc2 <_printf_i+0x1ce>
 8003bbe:	6018      	str	r0, [r3, #0]
 8003bc0:	e002      	b.n	8003bc8 <_printf_i+0x1d4>
 8003bc2:	0671      	lsls	r1, r6, #25
 8003bc4:	d5fb      	bpl.n	8003bbe <_printf_i+0x1ca>
 8003bc6:	8018      	strh	r0, [r3, #0]
 8003bc8:	2300      	movs	r3, #0
 8003bca:	4616      	mov	r6, r2
 8003bcc:	6123      	str	r3, [r4, #16]
 8003bce:	e7ba      	b.n	8003b46 <_printf_i+0x152>
 8003bd0:	680b      	ldr	r3, [r1, #0]
 8003bd2:	1d1a      	adds	r2, r3, #4
 8003bd4:	600a      	str	r2, [r1, #0]
 8003bd6:	681e      	ldr	r6, [r3, #0]
 8003bd8:	2100      	movs	r1, #0
 8003bda:	4630      	mov	r0, r6
 8003bdc:	6862      	ldr	r2, [r4, #4]
 8003bde:	f000 fa9d 	bl	800411c <memchr>
 8003be2:	b108      	cbz	r0, 8003be8 <_printf_i+0x1f4>
 8003be4:	1b80      	subs	r0, r0, r6
 8003be6:	6060      	str	r0, [r4, #4]
 8003be8:	6863      	ldr	r3, [r4, #4]
 8003bea:	6123      	str	r3, [r4, #16]
 8003bec:	2300      	movs	r3, #0
 8003bee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bf2:	e7a8      	b.n	8003b46 <_printf_i+0x152>
 8003bf4:	4632      	mov	r2, r6
 8003bf6:	4649      	mov	r1, r9
 8003bf8:	4640      	mov	r0, r8
 8003bfa:	6923      	ldr	r3, [r4, #16]
 8003bfc:	47d0      	blx	sl
 8003bfe:	3001      	adds	r0, #1
 8003c00:	d0ab      	beq.n	8003b5a <_printf_i+0x166>
 8003c02:	6823      	ldr	r3, [r4, #0]
 8003c04:	079b      	lsls	r3, r3, #30
 8003c06:	d413      	bmi.n	8003c30 <_printf_i+0x23c>
 8003c08:	68e0      	ldr	r0, [r4, #12]
 8003c0a:	9b03      	ldr	r3, [sp, #12]
 8003c0c:	4298      	cmp	r0, r3
 8003c0e:	bfb8      	it	lt
 8003c10:	4618      	movlt	r0, r3
 8003c12:	e7a4      	b.n	8003b5e <_printf_i+0x16a>
 8003c14:	2301      	movs	r3, #1
 8003c16:	4632      	mov	r2, r6
 8003c18:	4649      	mov	r1, r9
 8003c1a:	4640      	mov	r0, r8
 8003c1c:	47d0      	blx	sl
 8003c1e:	3001      	adds	r0, #1
 8003c20:	d09b      	beq.n	8003b5a <_printf_i+0x166>
 8003c22:	3501      	adds	r5, #1
 8003c24:	68e3      	ldr	r3, [r4, #12]
 8003c26:	9903      	ldr	r1, [sp, #12]
 8003c28:	1a5b      	subs	r3, r3, r1
 8003c2a:	42ab      	cmp	r3, r5
 8003c2c:	dcf2      	bgt.n	8003c14 <_printf_i+0x220>
 8003c2e:	e7eb      	b.n	8003c08 <_printf_i+0x214>
 8003c30:	2500      	movs	r5, #0
 8003c32:	f104 0619 	add.w	r6, r4, #25
 8003c36:	e7f5      	b.n	8003c24 <_printf_i+0x230>
 8003c38:	08004361 	.word	0x08004361
 8003c3c:	08004372 	.word	0x08004372

08003c40 <_sbrk_r>:
 8003c40:	b538      	push	{r3, r4, r5, lr}
 8003c42:	2300      	movs	r3, #0
 8003c44:	4d05      	ldr	r5, [pc, #20]	; (8003c5c <_sbrk_r+0x1c>)
 8003c46:	4604      	mov	r4, r0
 8003c48:	4608      	mov	r0, r1
 8003c4a:	602b      	str	r3, [r5, #0]
 8003c4c:	f7fd fbbc 	bl	80013c8 <_sbrk>
 8003c50:	1c43      	adds	r3, r0, #1
 8003c52:	d102      	bne.n	8003c5a <_sbrk_r+0x1a>
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	b103      	cbz	r3, 8003c5a <_sbrk_r+0x1a>
 8003c58:	6023      	str	r3, [r4, #0]
 8003c5a:	bd38      	pop	{r3, r4, r5, pc}
 8003c5c:	20000274 	.word	0x20000274

08003c60 <__sread>:
 8003c60:	b510      	push	{r4, lr}
 8003c62:	460c      	mov	r4, r1
 8003c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c68:	f000 fabe 	bl	80041e8 <_read_r>
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	bfab      	itete	ge
 8003c70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c72:	89a3      	ldrhlt	r3, [r4, #12]
 8003c74:	181b      	addge	r3, r3, r0
 8003c76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c7a:	bfac      	ite	ge
 8003c7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c7e:	81a3      	strhlt	r3, [r4, #12]
 8003c80:	bd10      	pop	{r4, pc}

08003c82 <__swrite>:
 8003c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c86:	461f      	mov	r7, r3
 8003c88:	898b      	ldrh	r3, [r1, #12]
 8003c8a:	4605      	mov	r5, r0
 8003c8c:	05db      	lsls	r3, r3, #23
 8003c8e:	460c      	mov	r4, r1
 8003c90:	4616      	mov	r6, r2
 8003c92:	d505      	bpl.n	8003ca0 <__swrite+0x1e>
 8003c94:	2302      	movs	r3, #2
 8003c96:	2200      	movs	r2, #0
 8003c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c9c:	f000 f9c8 	bl	8004030 <_lseek_r>
 8003ca0:	89a3      	ldrh	r3, [r4, #12]
 8003ca2:	4632      	mov	r2, r6
 8003ca4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ca8:	81a3      	strh	r3, [r4, #12]
 8003caa:	4628      	mov	r0, r5
 8003cac:	463b      	mov	r3, r7
 8003cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cb6:	f000 b869 	b.w	8003d8c <_write_r>

08003cba <__sseek>:
 8003cba:	b510      	push	{r4, lr}
 8003cbc:	460c      	mov	r4, r1
 8003cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cc2:	f000 f9b5 	bl	8004030 <_lseek_r>
 8003cc6:	1c43      	adds	r3, r0, #1
 8003cc8:	89a3      	ldrh	r3, [r4, #12]
 8003cca:	bf15      	itete	ne
 8003ccc:	6560      	strne	r0, [r4, #84]	; 0x54
 8003cce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003cd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003cd6:	81a3      	strheq	r3, [r4, #12]
 8003cd8:	bf18      	it	ne
 8003cda:	81a3      	strhne	r3, [r4, #12]
 8003cdc:	bd10      	pop	{r4, pc}

08003cde <__sclose>:
 8003cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce2:	f000 b8d3 	b.w	8003e8c <_close_r>
	...

08003ce8 <__swbuf_r>:
 8003ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cea:	460e      	mov	r6, r1
 8003cec:	4614      	mov	r4, r2
 8003cee:	4605      	mov	r5, r0
 8003cf0:	b118      	cbz	r0, 8003cfa <__swbuf_r+0x12>
 8003cf2:	6983      	ldr	r3, [r0, #24]
 8003cf4:	b90b      	cbnz	r3, 8003cfa <__swbuf_r+0x12>
 8003cf6:	f7ff fbbb 	bl	8003470 <__sinit>
 8003cfa:	4b21      	ldr	r3, [pc, #132]	; (8003d80 <__swbuf_r+0x98>)
 8003cfc:	429c      	cmp	r4, r3
 8003cfe:	d12b      	bne.n	8003d58 <__swbuf_r+0x70>
 8003d00:	686c      	ldr	r4, [r5, #4]
 8003d02:	69a3      	ldr	r3, [r4, #24]
 8003d04:	60a3      	str	r3, [r4, #8]
 8003d06:	89a3      	ldrh	r3, [r4, #12]
 8003d08:	071a      	lsls	r2, r3, #28
 8003d0a:	d52f      	bpl.n	8003d6c <__swbuf_r+0x84>
 8003d0c:	6923      	ldr	r3, [r4, #16]
 8003d0e:	b36b      	cbz	r3, 8003d6c <__swbuf_r+0x84>
 8003d10:	6923      	ldr	r3, [r4, #16]
 8003d12:	6820      	ldr	r0, [r4, #0]
 8003d14:	b2f6      	uxtb	r6, r6
 8003d16:	1ac0      	subs	r0, r0, r3
 8003d18:	6963      	ldr	r3, [r4, #20]
 8003d1a:	4637      	mov	r7, r6
 8003d1c:	4283      	cmp	r3, r0
 8003d1e:	dc04      	bgt.n	8003d2a <__swbuf_r+0x42>
 8003d20:	4621      	mov	r1, r4
 8003d22:	4628      	mov	r0, r5
 8003d24:	f000 f948 	bl	8003fb8 <_fflush_r>
 8003d28:	bb30      	cbnz	r0, 8003d78 <__swbuf_r+0x90>
 8003d2a:	68a3      	ldr	r3, [r4, #8]
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	60a3      	str	r3, [r4, #8]
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	6022      	str	r2, [r4, #0]
 8003d38:	701e      	strb	r6, [r3, #0]
 8003d3a:	6963      	ldr	r3, [r4, #20]
 8003d3c:	4283      	cmp	r3, r0
 8003d3e:	d004      	beq.n	8003d4a <__swbuf_r+0x62>
 8003d40:	89a3      	ldrh	r3, [r4, #12]
 8003d42:	07db      	lsls	r3, r3, #31
 8003d44:	d506      	bpl.n	8003d54 <__swbuf_r+0x6c>
 8003d46:	2e0a      	cmp	r6, #10
 8003d48:	d104      	bne.n	8003d54 <__swbuf_r+0x6c>
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	f000 f933 	bl	8003fb8 <_fflush_r>
 8003d52:	b988      	cbnz	r0, 8003d78 <__swbuf_r+0x90>
 8003d54:	4638      	mov	r0, r7
 8003d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d58:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <__swbuf_r+0x9c>)
 8003d5a:	429c      	cmp	r4, r3
 8003d5c:	d101      	bne.n	8003d62 <__swbuf_r+0x7a>
 8003d5e:	68ac      	ldr	r4, [r5, #8]
 8003d60:	e7cf      	b.n	8003d02 <__swbuf_r+0x1a>
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <__swbuf_r+0xa0>)
 8003d64:	429c      	cmp	r4, r3
 8003d66:	bf08      	it	eq
 8003d68:	68ec      	ldreq	r4, [r5, #12]
 8003d6a:	e7ca      	b.n	8003d02 <__swbuf_r+0x1a>
 8003d6c:	4621      	mov	r1, r4
 8003d6e:	4628      	mov	r0, r5
 8003d70:	f000 f81e 	bl	8003db0 <__swsetup_r>
 8003d74:	2800      	cmp	r0, #0
 8003d76:	d0cb      	beq.n	8003d10 <__swbuf_r+0x28>
 8003d78:	f04f 37ff 	mov.w	r7, #4294967295
 8003d7c:	e7ea      	b.n	8003d54 <__swbuf_r+0x6c>
 8003d7e:	bf00      	nop
 8003d80:	08004310 	.word	0x08004310
 8003d84:	08004330 	.word	0x08004330
 8003d88:	080042f0 	.word	0x080042f0

08003d8c <_write_r>:
 8003d8c:	b538      	push	{r3, r4, r5, lr}
 8003d8e:	4604      	mov	r4, r0
 8003d90:	4608      	mov	r0, r1
 8003d92:	4611      	mov	r1, r2
 8003d94:	2200      	movs	r2, #0
 8003d96:	4d05      	ldr	r5, [pc, #20]	; (8003dac <_write_r+0x20>)
 8003d98:	602a      	str	r2, [r5, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f7fd fac7 	bl	800132e <_write>
 8003da0:	1c43      	adds	r3, r0, #1
 8003da2:	d102      	bne.n	8003daa <_write_r+0x1e>
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	b103      	cbz	r3, 8003daa <_write_r+0x1e>
 8003da8:	6023      	str	r3, [r4, #0]
 8003daa:	bd38      	pop	{r3, r4, r5, pc}
 8003dac:	20000274 	.word	0x20000274

08003db0 <__swsetup_r>:
 8003db0:	4b32      	ldr	r3, [pc, #200]	; (8003e7c <__swsetup_r+0xcc>)
 8003db2:	b570      	push	{r4, r5, r6, lr}
 8003db4:	681d      	ldr	r5, [r3, #0]
 8003db6:	4606      	mov	r6, r0
 8003db8:	460c      	mov	r4, r1
 8003dba:	b125      	cbz	r5, 8003dc6 <__swsetup_r+0x16>
 8003dbc:	69ab      	ldr	r3, [r5, #24]
 8003dbe:	b913      	cbnz	r3, 8003dc6 <__swsetup_r+0x16>
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	f7ff fb55 	bl	8003470 <__sinit>
 8003dc6:	4b2e      	ldr	r3, [pc, #184]	; (8003e80 <__swsetup_r+0xd0>)
 8003dc8:	429c      	cmp	r4, r3
 8003dca:	d10f      	bne.n	8003dec <__swsetup_r+0x3c>
 8003dcc:	686c      	ldr	r4, [r5, #4]
 8003dce:	89a3      	ldrh	r3, [r4, #12]
 8003dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003dd4:	0719      	lsls	r1, r3, #28
 8003dd6:	d42c      	bmi.n	8003e32 <__swsetup_r+0x82>
 8003dd8:	06dd      	lsls	r5, r3, #27
 8003dda:	d411      	bmi.n	8003e00 <__swsetup_r+0x50>
 8003ddc:	2309      	movs	r3, #9
 8003dde:	6033      	str	r3, [r6, #0]
 8003de0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003de4:	f04f 30ff 	mov.w	r0, #4294967295
 8003de8:	81a3      	strh	r3, [r4, #12]
 8003dea:	e03e      	b.n	8003e6a <__swsetup_r+0xba>
 8003dec:	4b25      	ldr	r3, [pc, #148]	; (8003e84 <__swsetup_r+0xd4>)
 8003dee:	429c      	cmp	r4, r3
 8003df0:	d101      	bne.n	8003df6 <__swsetup_r+0x46>
 8003df2:	68ac      	ldr	r4, [r5, #8]
 8003df4:	e7eb      	b.n	8003dce <__swsetup_r+0x1e>
 8003df6:	4b24      	ldr	r3, [pc, #144]	; (8003e88 <__swsetup_r+0xd8>)
 8003df8:	429c      	cmp	r4, r3
 8003dfa:	bf08      	it	eq
 8003dfc:	68ec      	ldreq	r4, [r5, #12]
 8003dfe:	e7e6      	b.n	8003dce <__swsetup_r+0x1e>
 8003e00:	0758      	lsls	r0, r3, #29
 8003e02:	d512      	bpl.n	8003e2a <__swsetup_r+0x7a>
 8003e04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e06:	b141      	cbz	r1, 8003e1a <__swsetup_r+0x6a>
 8003e08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e0c:	4299      	cmp	r1, r3
 8003e0e:	d002      	beq.n	8003e16 <__swsetup_r+0x66>
 8003e10:	4630      	mov	r0, r6
 8003e12:	f000 f99d 	bl	8004150 <_free_r>
 8003e16:	2300      	movs	r3, #0
 8003e18:	6363      	str	r3, [r4, #52]	; 0x34
 8003e1a:	89a3      	ldrh	r3, [r4, #12]
 8003e1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e20:	81a3      	strh	r3, [r4, #12]
 8003e22:	2300      	movs	r3, #0
 8003e24:	6063      	str	r3, [r4, #4]
 8003e26:	6923      	ldr	r3, [r4, #16]
 8003e28:	6023      	str	r3, [r4, #0]
 8003e2a:	89a3      	ldrh	r3, [r4, #12]
 8003e2c:	f043 0308 	orr.w	r3, r3, #8
 8003e30:	81a3      	strh	r3, [r4, #12]
 8003e32:	6923      	ldr	r3, [r4, #16]
 8003e34:	b94b      	cbnz	r3, 8003e4a <__swsetup_r+0x9a>
 8003e36:	89a3      	ldrh	r3, [r4, #12]
 8003e38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e40:	d003      	beq.n	8003e4a <__swsetup_r+0x9a>
 8003e42:	4621      	mov	r1, r4
 8003e44:	4630      	mov	r0, r6
 8003e46:	f000 f929 	bl	800409c <__smakebuf_r>
 8003e4a:	89a0      	ldrh	r0, [r4, #12]
 8003e4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e50:	f010 0301 	ands.w	r3, r0, #1
 8003e54:	d00a      	beq.n	8003e6c <__swsetup_r+0xbc>
 8003e56:	2300      	movs	r3, #0
 8003e58:	60a3      	str	r3, [r4, #8]
 8003e5a:	6963      	ldr	r3, [r4, #20]
 8003e5c:	425b      	negs	r3, r3
 8003e5e:	61a3      	str	r3, [r4, #24]
 8003e60:	6923      	ldr	r3, [r4, #16]
 8003e62:	b943      	cbnz	r3, 8003e76 <__swsetup_r+0xc6>
 8003e64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e68:	d1ba      	bne.n	8003de0 <__swsetup_r+0x30>
 8003e6a:	bd70      	pop	{r4, r5, r6, pc}
 8003e6c:	0781      	lsls	r1, r0, #30
 8003e6e:	bf58      	it	pl
 8003e70:	6963      	ldrpl	r3, [r4, #20]
 8003e72:	60a3      	str	r3, [r4, #8]
 8003e74:	e7f4      	b.n	8003e60 <__swsetup_r+0xb0>
 8003e76:	2000      	movs	r0, #0
 8003e78:	e7f7      	b.n	8003e6a <__swsetup_r+0xba>
 8003e7a:	bf00      	nop
 8003e7c:	20000080 	.word	0x20000080
 8003e80:	08004310 	.word	0x08004310
 8003e84:	08004330 	.word	0x08004330
 8003e88:	080042f0 	.word	0x080042f0

08003e8c <_close_r>:
 8003e8c:	b538      	push	{r3, r4, r5, lr}
 8003e8e:	2300      	movs	r3, #0
 8003e90:	4d05      	ldr	r5, [pc, #20]	; (8003ea8 <_close_r+0x1c>)
 8003e92:	4604      	mov	r4, r0
 8003e94:	4608      	mov	r0, r1
 8003e96:	602b      	str	r3, [r5, #0]
 8003e98:	f7fd fa65 	bl	8001366 <_close>
 8003e9c:	1c43      	adds	r3, r0, #1
 8003e9e:	d102      	bne.n	8003ea6 <_close_r+0x1a>
 8003ea0:	682b      	ldr	r3, [r5, #0]
 8003ea2:	b103      	cbz	r3, 8003ea6 <_close_r+0x1a>
 8003ea4:	6023      	str	r3, [r4, #0]
 8003ea6:	bd38      	pop	{r3, r4, r5, pc}
 8003ea8:	20000274 	.word	0x20000274

08003eac <__sflush_r>:
 8003eac:	898a      	ldrh	r2, [r1, #12]
 8003eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eb2:	4605      	mov	r5, r0
 8003eb4:	0710      	lsls	r0, r2, #28
 8003eb6:	460c      	mov	r4, r1
 8003eb8:	d458      	bmi.n	8003f6c <__sflush_r+0xc0>
 8003eba:	684b      	ldr	r3, [r1, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	dc05      	bgt.n	8003ecc <__sflush_r+0x20>
 8003ec0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	dc02      	bgt.n	8003ecc <__sflush_r+0x20>
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ecc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ece:	2e00      	cmp	r6, #0
 8003ed0:	d0f9      	beq.n	8003ec6 <__sflush_r+0x1a>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ed8:	682f      	ldr	r7, [r5, #0]
 8003eda:	602b      	str	r3, [r5, #0]
 8003edc:	d032      	beq.n	8003f44 <__sflush_r+0x98>
 8003ede:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ee0:	89a3      	ldrh	r3, [r4, #12]
 8003ee2:	075a      	lsls	r2, r3, #29
 8003ee4:	d505      	bpl.n	8003ef2 <__sflush_r+0x46>
 8003ee6:	6863      	ldr	r3, [r4, #4]
 8003ee8:	1ac0      	subs	r0, r0, r3
 8003eea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003eec:	b10b      	cbz	r3, 8003ef2 <__sflush_r+0x46>
 8003eee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ef0:	1ac0      	subs	r0, r0, r3
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ef8:	4628      	mov	r0, r5
 8003efa:	6a21      	ldr	r1, [r4, #32]
 8003efc:	47b0      	blx	r6
 8003efe:	1c43      	adds	r3, r0, #1
 8003f00:	89a3      	ldrh	r3, [r4, #12]
 8003f02:	d106      	bne.n	8003f12 <__sflush_r+0x66>
 8003f04:	6829      	ldr	r1, [r5, #0]
 8003f06:	291d      	cmp	r1, #29
 8003f08:	d82c      	bhi.n	8003f64 <__sflush_r+0xb8>
 8003f0a:	4a2a      	ldr	r2, [pc, #168]	; (8003fb4 <__sflush_r+0x108>)
 8003f0c:	40ca      	lsrs	r2, r1
 8003f0e:	07d6      	lsls	r6, r2, #31
 8003f10:	d528      	bpl.n	8003f64 <__sflush_r+0xb8>
 8003f12:	2200      	movs	r2, #0
 8003f14:	6062      	str	r2, [r4, #4]
 8003f16:	6922      	ldr	r2, [r4, #16]
 8003f18:	04d9      	lsls	r1, r3, #19
 8003f1a:	6022      	str	r2, [r4, #0]
 8003f1c:	d504      	bpl.n	8003f28 <__sflush_r+0x7c>
 8003f1e:	1c42      	adds	r2, r0, #1
 8003f20:	d101      	bne.n	8003f26 <__sflush_r+0x7a>
 8003f22:	682b      	ldr	r3, [r5, #0]
 8003f24:	b903      	cbnz	r3, 8003f28 <__sflush_r+0x7c>
 8003f26:	6560      	str	r0, [r4, #84]	; 0x54
 8003f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f2a:	602f      	str	r7, [r5, #0]
 8003f2c:	2900      	cmp	r1, #0
 8003f2e:	d0ca      	beq.n	8003ec6 <__sflush_r+0x1a>
 8003f30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f34:	4299      	cmp	r1, r3
 8003f36:	d002      	beq.n	8003f3e <__sflush_r+0x92>
 8003f38:	4628      	mov	r0, r5
 8003f3a:	f000 f909 	bl	8004150 <_free_r>
 8003f3e:	2000      	movs	r0, #0
 8003f40:	6360      	str	r0, [r4, #52]	; 0x34
 8003f42:	e7c1      	b.n	8003ec8 <__sflush_r+0x1c>
 8003f44:	6a21      	ldr	r1, [r4, #32]
 8003f46:	2301      	movs	r3, #1
 8003f48:	4628      	mov	r0, r5
 8003f4a:	47b0      	blx	r6
 8003f4c:	1c41      	adds	r1, r0, #1
 8003f4e:	d1c7      	bne.n	8003ee0 <__sflush_r+0x34>
 8003f50:	682b      	ldr	r3, [r5, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0c4      	beq.n	8003ee0 <__sflush_r+0x34>
 8003f56:	2b1d      	cmp	r3, #29
 8003f58:	d001      	beq.n	8003f5e <__sflush_r+0xb2>
 8003f5a:	2b16      	cmp	r3, #22
 8003f5c:	d101      	bne.n	8003f62 <__sflush_r+0xb6>
 8003f5e:	602f      	str	r7, [r5, #0]
 8003f60:	e7b1      	b.n	8003ec6 <__sflush_r+0x1a>
 8003f62:	89a3      	ldrh	r3, [r4, #12]
 8003f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f68:	81a3      	strh	r3, [r4, #12]
 8003f6a:	e7ad      	b.n	8003ec8 <__sflush_r+0x1c>
 8003f6c:	690f      	ldr	r7, [r1, #16]
 8003f6e:	2f00      	cmp	r7, #0
 8003f70:	d0a9      	beq.n	8003ec6 <__sflush_r+0x1a>
 8003f72:	0793      	lsls	r3, r2, #30
 8003f74:	bf18      	it	ne
 8003f76:	2300      	movne	r3, #0
 8003f78:	680e      	ldr	r6, [r1, #0]
 8003f7a:	bf08      	it	eq
 8003f7c:	694b      	ldreq	r3, [r1, #20]
 8003f7e:	eba6 0807 	sub.w	r8, r6, r7
 8003f82:	600f      	str	r7, [r1, #0]
 8003f84:	608b      	str	r3, [r1, #8]
 8003f86:	f1b8 0f00 	cmp.w	r8, #0
 8003f8a:	dd9c      	ble.n	8003ec6 <__sflush_r+0x1a>
 8003f8c:	4643      	mov	r3, r8
 8003f8e:	463a      	mov	r2, r7
 8003f90:	4628      	mov	r0, r5
 8003f92:	6a21      	ldr	r1, [r4, #32]
 8003f94:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f96:	47b0      	blx	r6
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	dc06      	bgt.n	8003faa <__sflush_r+0xfe>
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fa6:	81a3      	strh	r3, [r4, #12]
 8003fa8:	e78e      	b.n	8003ec8 <__sflush_r+0x1c>
 8003faa:	4407      	add	r7, r0
 8003fac:	eba8 0800 	sub.w	r8, r8, r0
 8003fb0:	e7e9      	b.n	8003f86 <__sflush_r+0xda>
 8003fb2:	bf00      	nop
 8003fb4:	20400001 	.word	0x20400001

08003fb8 <_fflush_r>:
 8003fb8:	b538      	push	{r3, r4, r5, lr}
 8003fba:	690b      	ldr	r3, [r1, #16]
 8003fbc:	4605      	mov	r5, r0
 8003fbe:	460c      	mov	r4, r1
 8003fc0:	b913      	cbnz	r3, 8003fc8 <_fflush_r+0x10>
 8003fc2:	2500      	movs	r5, #0
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	bd38      	pop	{r3, r4, r5, pc}
 8003fc8:	b118      	cbz	r0, 8003fd2 <_fflush_r+0x1a>
 8003fca:	6983      	ldr	r3, [r0, #24]
 8003fcc:	b90b      	cbnz	r3, 8003fd2 <_fflush_r+0x1a>
 8003fce:	f7ff fa4f 	bl	8003470 <__sinit>
 8003fd2:	4b14      	ldr	r3, [pc, #80]	; (8004024 <_fflush_r+0x6c>)
 8003fd4:	429c      	cmp	r4, r3
 8003fd6:	d11b      	bne.n	8004010 <_fflush_r+0x58>
 8003fd8:	686c      	ldr	r4, [r5, #4]
 8003fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0ef      	beq.n	8003fc2 <_fflush_r+0xa>
 8003fe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003fe4:	07d0      	lsls	r0, r2, #31
 8003fe6:	d404      	bmi.n	8003ff2 <_fflush_r+0x3a>
 8003fe8:	0599      	lsls	r1, r3, #22
 8003fea:	d402      	bmi.n	8003ff2 <_fflush_r+0x3a>
 8003fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fee:	f7ff fadd 	bl	80035ac <__retarget_lock_acquire_recursive>
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	f7ff ff59 	bl	8003eac <__sflush_r>
 8003ffa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ffc:	4605      	mov	r5, r0
 8003ffe:	07da      	lsls	r2, r3, #31
 8004000:	d4e0      	bmi.n	8003fc4 <_fflush_r+0xc>
 8004002:	89a3      	ldrh	r3, [r4, #12]
 8004004:	059b      	lsls	r3, r3, #22
 8004006:	d4dd      	bmi.n	8003fc4 <_fflush_r+0xc>
 8004008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800400a:	f7ff fad0 	bl	80035ae <__retarget_lock_release_recursive>
 800400e:	e7d9      	b.n	8003fc4 <_fflush_r+0xc>
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <_fflush_r+0x70>)
 8004012:	429c      	cmp	r4, r3
 8004014:	d101      	bne.n	800401a <_fflush_r+0x62>
 8004016:	68ac      	ldr	r4, [r5, #8]
 8004018:	e7df      	b.n	8003fda <_fflush_r+0x22>
 800401a:	4b04      	ldr	r3, [pc, #16]	; (800402c <_fflush_r+0x74>)
 800401c:	429c      	cmp	r4, r3
 800401e:	bf08      	it	eq
 8004020:	68ec      	ldreq	r4, [r5, #12]
 8004022:	e7da      	b.n	8003fda <_fflush_r+0x22>
 8004024:	08004310 	.word	0x08004310
 8004028:	08004330 	.word	0x08004330
 800402c:	080042f0 	.word	0x080042f0

08004030 <_lseek_r>:
 8004030:	b538      	push	{r3, r4, r5, lr}
 8004032:	4604      	mov	r4, r0
 8004034:	4608      	mov	r0, r1
 8004036:	4611      	mov	r1, r2
 8004038:	2200      	movs	r2, #0
 800403a:	4d05      	ldr	r5, [pc, #20]	; (8004050 <_lseek_r+0x20>)
 800403c:	602a      	str	r2, [r5, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	f7fd f9b5 	bl	80013ae <_lseek>
 8004044:	1c43      	adds	r3, r0, #1
 8004046:	d102      	bne.n	800404e <_lseek_r+0x1e>
 8004048:	682b      	ldr	r3, [r5, #0]
 800404a:	b103      	cbz	r3, 800404e <_lseek_r+0x1e>
 800404c:	6023      	str	r3, [r4, #0]
 800404e:	bd38      	pop	{r3, r4, r5, pc}
 8004050:	20000274 	.word	0x20000274

08004054 <__swhatbuf_r>:
 8004054:	b570      	push	{r4, r5, r6, lr}
 8004056:	460e      	mov	r6, r1
 8004058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800405c:	4614      	mov	r4, r2
 800405e:	2900      	cmp	r1, #0
 8004060:	461d      	mov	r5, r3
 8004062:	b096      	sub	sp, #88	; 0x58
 8004064:	da07      	bge.n	8004076 <__swhatbuf_r+0x22>
 8004066:	2300      	movs	r3, #0
 8004068:	602b      	str	r3, [r5, #0]
 800406a:	89b3      	ldrh	r3, [r6, #12]
 800406c:	061a      	lsls	r2, r3, #24
 800406e:	d410      	bmi.n	8004092 <__swhatbuf_r+0x3e>
 8004070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004074:	e00e      	b.n	8004094 <__swhatbuf_r+0x40>
 8004076:	466a      	mov	r2, sp
 8004078:	f000 f8c8 	bl	800420c <_fstat_r>
 800407c:	2800      	cmp	r0, #0
 800407e:	dbf2      	blt.n	8004066 <__swhatbuf_r+0x12>
 8004080:	9a01      	ldr	r2, [sp, #4]
 8004082:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004086:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800408a:	425a      	negs	r2, r3
 800408c:	415a      	adcs	r2, r3
 800408e:	602a      	str	r2, [r5, #0]
 8004090:	e7ee      	b.n	8004070 <__swhatbuf_r+0x1c>
 8004092:	2340      	movs	r3, #64	; 0x40
 8004094:	2000      	movs	r0, #0
 8004096:	6023      	str	r3, [r4, #0]
 8004098:	b016      	add	sp, #88	; 0x58
 800409a:	bd70      	pop	{r4, r5, r6, pc}

0800409c <__smakebuf_r>:
 800409c:	898b      	ldrh	r3, [r1, #12]
 800409e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80040a0:	079d      	lsls	r5, r3, #30
 80040a2:	4606      	mov	r6, r0
 80040a4:	460c      	mov	r4, r1
 80040a6:	d507      	bpl.n	80040b8 <__smakebuf_r+0x1c>
 80040a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80040ac:	6023      	str	r3, [r4, #0]
 80040ae:	6123      	str	r3, [r4, #16]
 80040b0:	2301      	movs	r3, #1
 80040b2:	6163      	str	r3, [r4, #20]
 80040b4:	b002      	add	sp, #8
 80040b6:	bd70      	pop	{r4, r5, r6, pc}
 80040b8:	466a      	mov	r2, sp
 80040ba:	ab01      	add	r3, sp, #4
 80040bc:	f7ff ffca 	bl	8004054 <__swhatbuf_r>
 80040c0:	9900      	ldr	r1, [sp, #0]
 80040c2:	4605      	mov	r5, r0
 80040c4:	4630      	mov	r0, r6
 80040c6:	f7ff fa73 	bl	80035b0 <_malloc_r>
 80040ca:	b948      	cbnz	r0, 80040e0 <__smakebuf_r+0x44>
 80040cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040d0:	059a      	lsls	r2, r3, #22
 80040d2:	d4ef      	bmi.n	80040b4 <__smakebuf_r+0x18>
 80040d4:	f023 0303 	bic.w	r3, r3, #3
 80040d8:	f043 0302 	orr.w	r3, r3, #2
 80040dc:	81a3      	strh	r3, [r4, #12]
 80040de:	e7e3      	b.n	80040a8 <__smakebuf_r+0xc>
 80040e0:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <__smakebuf_r+0x7c>)
 80040e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80040e4:	89a3      	ldrh	r3, [r4, #12]
 80040e6:	6020      	str	r0, [r4, #0]
 80040e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ec:	81a3      	strh	r3, [r4, #12]
 80040ee:	9b00      	ldr	r3, [sp, #0]
 80040f0:	6120      	str	r0, [r4, #16]
 80040f2:	6163      	str	r3, [r4, #20]
 80040f4:	9b01      	ldr	r3, [sp, #4]
 80040f6:	b15b      	cbz	r3, 8004110 <__smakebuf_r+0x74>
 80040f8:	4630      	mov	r0, r6
 80040fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040fe:	f000 f897 	bl	8004230 <_isatty_r>
 8004102:	b128      	cbz	r0, 8004110 <__smakebuf_r+0x74>
 8004104:	89a3      	ldrh	r3, [r4, #12]
 8004106:	f023 0303 	bic.w	r3, r3, #3
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	81a3      	strh	r3, [r4, #12]
 8004110:	89a0      	ldrh	r0, [r4, #12]
 8004112:	4305      	orrs	r5, r0
 8004114:	81a5      	strh	r5, [r4, #12]
 8004116:	e7cd      	b.n	80040b4 <__smakebuf_r+0x18>
 8004118:	08003409 	.word	0x08003409

0800411c <memchr>:
 800411c:	4603      	mov	r3, r0
 800411e:	b510      	push	{r4, lr}
 8004120:	b2c9      	uxtb	r1, r1
 8004122:	4402      	add	r2, r0
 8004124:	4293      	cmp	r3, r2
 8004126:	4618      	mov	r0, r3
 8004128:	d101      	bne.n	800412e <memchr+0x12>
 800412a:	2000      	movs	r0, #0
 800412c:	e003      	b.n	8004136 <memchr+0x1a>
 800412e:	7804      	ldrb	r4, [r0, #0]
 8004130:	3301      	adds	r3, #1
 8004132:	428c      	cmp	r4, r1
 8004134:	d1f6      	bne.n	8004124 <memchr+0x8>
 8004136:	bd10      	pop	{r4, pc}

08004138 <__malloc_lock>:
 8004138:	4801      	ldr	r0, [pc, #4]	; (8004140 <__malloc_lock+0x8>)
 800413a:	f7ff ba37 	b.w	80035ac <__retarget_lock_acquire_recursive>
 800413e:	bf00      	nop
 8004140:	2000026c 	.word	0x2000026c

08004144 <__malloc_unlock>:
 8004144:	4801      	ldr	r0, [pc, #4]	; (800414c <__malloc_unlock+0x8>)
 8004146:	f7ff ba32 	b.w	80035ae <__retarget_lock_release_recursive>
 800414a:	bf00      	nop
 800414c:	2000026c 	.word	0x2000026c

08004150 <_free_r>:
 8004150:	b538      	push	{r3, r4, r5, lr}
 8004152:	4605      	mov	r5, r0
 8004154:	2900      	cmp	r1, #0
 8004156:	d043      	beq.n	80041e0 <_free_r+0x90>
 8004158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800415c:	1f0c      	subs	r4, r1, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	bfb8      	it	lt
 8004162:	18e4      	addlt	r4, r4, r3
 8004164:	f7ff ffe8 	bl	8004138 <__malloc_lock>
 8004168:	4a1e      	ldr	r2, [pc, #120]	; (80041e4 <_free_r+0x94>)
 800416a:	6813      	ldr	r3, [r2, #0]
 800416c:	4610      	mov	r0, r2
 800416e:	b933      	cbnz	r3, 800417e <_free_r+0x2e>
 8004170:	6063      	str	r3, [r4, #4]
 8004172:	6014      	str	r4, [r2, #0]
 8004174:	4628      	mov	r0, r5
 8004176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800417a:	f7ff bfe3 	b.w	8004144 <__malloc_unlock>
 800417e:	42a3      	cmp	r3, r4
 8004180:	d90a      	bls.n	8004198 <_free_r+0x48>
 8004182:	6821      	ldr	r1, [r4, #0]
 8004184:	1862      	adds	r2, r4, r1
 8004186:	4293      	cmp	r3, r2
 8004188:	bf01      	itttt	eq
 800418a:	681a      	ldreq	r2, [r3, #0]
 800418c:	685b      	ldreq	r3, [r3, #4]
 800418e:	1852      	addeq	r2, r2, r1
 8004190:	6022      	streq	r2, [r4, #0]
 8004192:	6063      	str	r3, [r4, #4]
 8004194:	6004      	str	r4, [r0, #0]
 8004196:	e7ed      	b.n	8004174 <_free_r+0x24>
 8004198:	461a      	mov	r2, r3
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	b10b      	cbz	r3, 80041a2 <_free_r+0x52>
 800419e:	42a3      	cmp	r3, r4
 80041a0:	d9fa      	bls.n	8004198 <_free_r+0x48>
 80041a2:	6811      	ldr	r1, [r2, #0]
 80041a4:	1850      	adds	r0, r2, r1
 80041a6:	42a0      	cmp	r0, r4
 80041a8:	d10b      	bne.n	80041c2 <_free_r+0x72>
 80041aa:	6820      	ldr	r0, [r4, #0]
 80041ac:	4401      	add	r1, r0
 80041ae:	1850      	adds	r0, r2, r1
 80041b0:	4283      	cmp	r3, r0
 80041b2:	6011      	str	r1, [r2, #0]
 80041b4:	d1de      	bne.n	8004174 <_free_r+0x24>
 80041b6:	6818      	ldr	r0, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4401      	add	r1, r0
 80041bc:	6011      	str	r1, [r2, #0]
 80041be:	6053      	str	r3, [r2, #4]
 80041c0:	e7d8      	b.n	8004174 <_free_r+0x24>
 80041c2:	d902      	bls.n	80041ca <_free_r+0x7a>
 80041c4:	230c      	movs	r3, #12
 80041c6:	602b      	str	r3, [r5, #0]
 80041c8:	e7d4      	b.n	8004174 <_free_r+0x24>
 80041ca:	6820      	ldr	r0, [r4, #0]
 80041cc:	1821      	adds	r1, r4, r0
 80041ce:	428b      	cmp	r3, r1
 80041d0:	bf01      	itttt	eq
 80041d2:	6819      	ldreq	r1, [r3, #0]
 80041d4:	685b      	ldreq	r3, [r3, #4]
 80041d6:	1809      	addeq	r1, r1, r0
 80041d8:	6021      	streq	r1, [r4, #0]
 80041da:	6063      	str	r3, [r4, #4]
 80041dc:	6054      	str	r4, [r2, #4]
 80041de:	e7c9      	b.n	8004174 <_free_r+0x24>
 80041e0:	bd38      	pop	{r3, r4, r5, pc}
 80041e2:	bf00      	nop
 80041e4:	20000174 	.word	0x20000174

080041e8 <_read_r>:
 80041e8:	b538      	push	{r3, r4, r5, lr}
 80041ea:	4604      	mov	r4, r0
 80041ec:	4608      	mov	r0, r1
 80041ee:	4611      	mov	r1, r2
 80041f0:	2200      	movs	r2, #0
 80041f2:	4d05      	ldr	r5, [pc, #20]	; (8004208 <_read_r+0x20>)
 80041f4:	602a      	str	r2, [r5, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	f7fd f87c 	bl	80012f4 <_read>
 80041fc:	1c43      	adds	r3, r0, #1
 80041fe:	d102      	bne.n	8004206 <_read_r+0x1e>
 8004200:	682b      	ldr	r3, [r5, #0]
 8004202:	b103      	cbz	r3, 8004206 <_read_r+0x1e>
 8004204:	6023      	str	r3, [r4, #0]
 8004206:	bd38      	pop	{r3, r4, r5, pc}
 8004208:	20000274 	.word	0x20000274

0800420c <_fstat_r>:
 800420c:	b538      	push	{r3, r4, r5, lr}
 800420e:	2300      	movs	r3, #0
 8004210:	4d06      	ldr	r5, [pc, #24]	; (800422c <_fstat_r+0x20>)
 8004212:	4604      	mov	r4, r0
 8004214:	4608      	mov	r0, r1
 8004216:	4611      	mov	r1, r2
 8004218:	602b      	str	r3, [r5, #0]
 800421a:	f7fd f8af 	bl	800137c <_fstat>
 800421e:	1c43      	adds	r3, r0, #1
 8004220:	d102      	bne.n	8004228 <_fstat_r+0x1c>
 8004222:	682b      	ldr	r3, [r5, #0]
 8004224:	b103      	cbz	r3, 8004228 <_fstat_r+0x1c>
 8004226:	6023      	str	r3, [r4, #0]
 8004228:	bd38      	pop	{r3, r4, r5, pc}
 800422a:	bf00      	nop
 800422c:	20000274 	.word	0x20000274

08004230 <_isatty_r>:
 8004230:	b538      	push	{r3, r4, r5, lr}
 8004232:	2300      	movs	r3, #0
 8004234:	4d05      	ldr	r5, [pc, #20]	; (800424c <_isatty_r+0x1c>)
 8004236:	4604      	mov	r4, r0
 8004238:	4608      	mov	r0, r1
 800423a:	602b      	str	r3, [r5, #0]
 800423c:	f7fd f8ad 	bl	800139a <_isatty>
 8004240:	1c43      	adds	r3, r0, #1
 8004242:	d102      	bne.n	800424a <_isatty_r+0x1a>
 8004244:	682b      	ldr	r3, [r5, #0]
 8004246:	b103      	cbz	r3, 800424a <_isatty_r+0x1a>
 8004248:	6023      	str	r3, [r4, #0]
 800424a:	bd38      	pop	{r3, r4, r5, pc}
 800424c:	20000274 	.word	0x20000274

08004250 <_init>:
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	bf00      	nop
 8004254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004256:	bc08      	pop	{r3}
 8004258:	469e      	mov	lr, r3
 800425a:	4770      	bx	lr

0800425c <_fini>:
 800425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425e:	bf00      	nop
 8004260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004262:	bc08      	pop	{r3}
 8004264:	469e      	mov	lr, r3
 8004266:	4770      	bx	lr
