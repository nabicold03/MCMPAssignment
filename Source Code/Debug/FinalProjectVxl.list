
FinalProjectVxl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ae8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08004bf4  08004bf4  00014bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d4c  08004d4c  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  08004d4c  08004d4c  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d4c  08004d4c  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d4c  08004d4c  00014d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08004d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  200000ec  08004e40  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08004e40  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012386  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026a4  00000000  00000000  0003249b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00034b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  000358a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001976e  00000000  00000000  000364f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa4e  00000000  00000000  0004fc66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c3b1  00000000  00000000  0005f6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eba65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e00  00000000  00000000  000ebab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000ec 	.word	0x200000ec
 8000128:	00000000 	.word	0x00000000
 800012c:	08004bdc 	.word	0x08004bdc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f0 	.word	0x200000f0
 8000148:	08004bdc 	.word	0x08004bdc

0800014c <isButtonPressed>:
int TimerForKeyPress = 200;

int button_ports[4] = {A0_GPIO_Port, A1_GPIO_Port, A2_GPIO_Port, A3_GPIO_Port};
int button_pins[4] = {A0_Pin, A1_Pin, A2_Pin, A3_Pin};

int isButtonPressed(int key){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[key] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[key] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000108 	.word	0x20000108

08000180 <subKeyProcess>:
void subKeyProcess(int key){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[key] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000108 	.word	0x20000108

080001a0 <getKeyInput>:
void getKeyInput(int key){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	KeyReg[key][0] = KeyReg[key][1];
 80001a8:	4a41      	ldr	r2, [pc, #260]	; (80002b0 <getKeyInput+0x110>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	011b      	lsls	r3, r3, #4
 80001ae:	4413      	add	r3, r2
 80001b0:	3304      	adds	r3, #4
 80001b2:	681a      	ldr	r2, [r3, #0]
 80001b4:	493e      	ldr	r1, [pc, #248]	; (80002b0 <getKeyInput+0x110>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	011b      	lsls	r3, r3, #4
 80001ba:	440b      	add	r3, r1
 80001bc:	601a      	str	r2, [r3, #0]
	KeyReg[key][1] = KeyReg[key][2];
 80001be:	4a3c      	ldr	r2, [pc, #240]	; (80002b0 <getKeyInput+0x110>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	011b      	lsls	r3, r3, #4
 80001c4:	4413      	add	r3, r2
 80001c6:	3308      	adds	r3, #8
 80001c8:	681a      	ldr	r2, [r3, #0]
 80001ca:	4939      	ldr	r1, [pc, #228]	; (80002b0 <getKeyInput+0x110>)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	011b      	lsls	r3, r3, #4
 80001d0:	440b      	add	r3, r1
 80001d2:	3304      	adds	r3, #4
 80001d4:	601a      	str	r2, [r3, #0]
	KeyReg[key][2] = HAL_GPIO_ReadPin(button_ports[key],button_pins[key]);
 80001d6:	4a37      	ldr	r2, [pc, #220]	; (80002b4 <getKeyInput+0x114>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001de:	4618      	mov	r0, r3
 80001e0:	4a35      	ldr	r2, [pc, #212]	; (80002b8 <getKeyInput+0x118>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001e8:	b29b      	uxth	r3, r3
 80001ea:	4619      	mov	r1, r3
 80001ec:	f001 ffcc 	bl	8002188 <HAL_GPIO_ReadPin>
 80001f0:	4603      	mov	r3, r0
 80001f2:	4619      	mov	r1, r3
 80001f4:	4a2e      	ldr	r2, [pc, #184]	; (80002b0 <getKeyInput+0x110>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	011b      	lsls	r3, r3, #4
 80001fa:	4413      	add	r3, r2
 80001fc:	3308      	adds	r3, #8
 80001fe:	6019      	str	r1, [r3, #0]
	if((KeyReg[key][0] == KeyReg[key][1]) && (KeyReg[key][1] == KeyReg[key][2])){
 8000200:	4a2b      	ldr	r2, [pc, #172]	; (80002b0 <getKeyInput+0x110>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	011b      	lsls	r3, r3, #4
 8000206:	4413      	add	r3, r2
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	4929      	ldr	r1, [pc, #164]	; (80002b0 <getKeyInput+0x110>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	011b      	lsls	r3, r3, #4
 8000210:	440b      	add	r3, r1
 8000212:	3304      	adds	r3, #4
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	429a      	cmp	r2, r3
 8000218:	d146      	bne.n	80002a8 <getKeyInput+0x108>
 800021a:	4a25      	ldr	r2, [pc, #148]	; (80002b0 <getKeyInput+0x110>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	011b      	lsls	r3, r3, #4
 8000220:	4413      	add	r3, r2
 8000222:	3304      	adds	r3, #4
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	4922      	ldr	r1, [pc, #136]	; (80002b0 <getKeyInput+0x110>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	011b      	lsls	r3, r3, #4
 800022c:	440b      	add	r3, r1
 800022e:	3308      	adds	r3, #8
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	429a      	cmp	r2, r3
 8000234:	d138      	bne.n	80002a8 <getKeyInput+0x108>
		if(KeyReg[key][3] != KeyReg[key][2]){
 8000236:	4a1e      	ldr	r2, [pc, #120]	; (80002b0 <getKeyInput+0x110>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	011b      	lsls	r3, r3, #4
 800023c:	4413      	add	r3, r2
 800023e:	330c      	adds	r3, #12
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	491b      	ldr	r1, [pc, #108]	; (80002b0 <getKeyInput+0x110>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	011b      	lsls	r3, r3, #4
 8000248:	440b      	add	r3, r1
 800024a:	3308      	adds	r3, #8
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	429a      	cmp	r2, r3
 8000250:	d01a      	beq.n	8000288 <getKeyInput+0xe8>
			KeyReg[key][3] = KeyReg[key][2];
 8000252:	4a17      	ldr	r2, [pc, #92]	; (80002b0 <getKeyInput+0x110>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	011b      	lsls	r3, r3, #4
 8000258:	4413      	add	r3, r2
 800025a:	3308      	adds	r3, #8
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	4914      	ldr	r1, [pc, #80]	; (80002b0 <getKeyInput+0x110>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	011b      	lsls	r3, r3, #4
 8000264:	440b      	add	r3, r1
 8000266:	330c      	adds	r3, #12
 8000268:	601a      	str	r2, [r3, #0]
			if(KeyReg[key][2] == PRESSED_STATE){
 800026a:	4a11      	ldr	r2, [pc, #68]	; (80002b0 <getKeyInput+0x110>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	011b      	lsls	r3, r3, #4
 8000270:	4413      	add	r3, r2
 8000272:	3308      	adds	r3, #8
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d116      	bne.n	80002a8 <getKeyInput+0x108>
				subKeyProcess(key);
 800027a:	6878      	ldr	r0, [r7, #4]
 800027c:	f7ff ff80 	bl	8000180 <subKeyProcess>
				TimerForKeyPress = 200;
 8000280:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <getKeyInput+0x11c>)
 8000282:	22c8      	movs	r2, #200	; 0xc8
 8000284:	601a      	str	r2, [r3, #0]
			if(TimerForKeyPress == 0){
				KeyReg[key][3] = NORMAL_STATE;
			}
		}
	}
}
 8000286:	e00f      	b.n	80002a8 <getKeyInput+0x108>
			TimerForKeyPress--;
 8000288:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <getKeyInput+0x11c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	3b01      	subs	r3, #1
 800028e:	4a0b      	ldr	r2, [pc, #44]	; (80002bc <getKeyInput+0x11c>)
 8000290:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 8000292:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <getKeyInput+0x11c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d106      	bne.n	80002a8 <getKeyInput+0x108>
				KeyReg[key][3] = NORMAL_STATE;
 800029a:	4a05      	ldr	r2, [pc, #20]	; (80002b0 <getKeyInput+0x110>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	011b      	lsls	r3, r3, #4
 80002a0:	4413      	add	r3, r2
 80002a2:	330c      	adds	r3, #12
 80002a4:	2201      	movs	r2, #1
 80002a6:	601a      	str	r2, [r3, #0]
}
 80002a8:	bf00      	nop
 80002aa:	3708      	adds	r7, #8
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000044 	.word	0x20000044
 80002b8:	20000054 	.word	0x20000054
 80002bc:	20000040 	.word	0x20000040

080002c0 <fsm_automatic_run>:
int buzzer_on = 0;
int buzzer_toggle = 0;
int buzzer_value = 40;
int pedesduration;

void fsm_automatic_run(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	switch(status) {
 80002c4:	4b9a      	ldr	r3, [pc, #616]	; (8000530 <fsm_automatic_run+0x270>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	3b01      	subs	r3, #1
 80002ca:	2b04      	cmp	r3, #4
 80002cc:	f200 82a8 	bhi.w	8000820 <fsm_automatic_run+0x560>
 80002d0:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <fsm_automatic_run+0x18>)
 80002d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d6:	bf00      	nop
 80002d8:	080002ed 	.word	0x080002ed
 80002dc:	0800033d 	.word	0x0800033d
 80002e0:	080004bd 	.word	0x080004bd
 80002e4:	08000635 	.word	0x08000635
 80002e8:	08000721 	.word	0x08000721
		case INIT:
			status = RED_GREEN;
 80002ec:	4b90      	ldr	r3, [pc, #576]	; (8000530 <fsm_automatic_run+0x270>)
 80002ee:	2202      	movs	r2, #2
 80002f0:	601a      	str	r2, [r3, #0]
			setInitialValue(red_duration, green_duration);
 80002f2:	4b90      	ldr	r3, [pc, #576]	; (8000534 <fsm_automatic_run+0x274>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a90      	ldr	r2, [pc, #576]	; (8000538 <fsm_automatic_run+0x278>)
 80002f8:	6812      	ldr	r2, [r2, #0]
 80002fa:	4611      	mov	r1, r2
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 fc7d 	bl	8000bfc <setInitialValue>
			setTimer(green_duration*100, 0);
 8000302:	4b8d      	ldr	r3, [pc, #564]	; (8000538 <fsm_automatic_run+0x278>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2264      	movs	r2, #100	; 0x64
 8000308:	fb02 f303 	mul.w	r3, r2, r3
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f001 fa22 	bl	8001758 <setTimer>
			setTimer(100, 1);
 8000314:	2101      	movs	r1, #1
 8000316:	2064      	movs	r0, #100	; 0x64
 8000318:	f001 fa1e 	bl	8001758 <setTimer>
			setTimer(10, 8);
 800031c:	2108      	movs	r1, #8
 800031e:	200a      	movs	r0, #10
 8000320:	f001 fa1a 	bl	8001758 <setTimer>
			buzzer_value = 100;
 8000324:	4b85      	ldr	r3, [pc, #532]	; (800053c <fsm_automatic_run+0x27c>)
 8000326:	2264      	movs	r2, #100	; 0x64
 8000328:	601a      	str	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800032a:	2100      	movs	r1, #0
 800032c:	4884      	ldr	r0, [pc, #528]	; (8000540 <fsm_automatic_run+0x280>)
 800032e:	f002 fc11 	bl	8002b54 <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000332:	4b83      	ldr	r3, [pc, #524]	; (8000540 <fsm_automatic_run+0x280>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2200      	movs	r2, #0
 8000338:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800033a:	e27a      	b.n	8000832 <fsm_automatic_run+0x572>
		case RED_GREEN:
			setHorizontalLeds(SET,RESET,RESET);	//D4-5 horizontal
 800033c:	2200      	movs	r2, #0
 800033e:	2100      	movs	r1, #0
 8000340:	2001      	movs	r0, #1
 8000342:	f000 fc7f 	bl	8000c44 <setHorizontalLeds>
			setVerticalLeds(RESET,SET, RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	2101      	movs	r1, #1
 800034a:	2000      	movs	r0, #0
 800034c:	f000 fcc0 	bl	8000cd0 <setVerticalLeds>
			if(timer_flag[9]==1){
 8000350:	4b7c      	ldr	r3, [pc, #496]	; (8000544 <fsm_automatic_run+0x284>)
 8000352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000354:	2b01      	cmp	r3, #1
 8000356:	d10d      	bne.n	8000374 <fsm_automatic_run+0xb4>
				pedeson=0;
 8000358:	4b7b      	ldr	r3, [pc, #492]	; (8000548 <fsm_automatic_run+0x288>)
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
				buzzer_on = 0;
 800035e:	4b7b      	ldr	r3, [pc, #492]	; (800054c <fsm_automatic_run+0x28c>)
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
				buzzer_value = 100;
 8000364:	4b75      	ldr	r3, [pc, #468]	; (800053c <fsm_automatic_run+0x27c>)
 8000366:	2264      	movs	r2, #100	; 0x64
 8000368:	601a      	str	r2, [r3, #0]
				//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
				setPedesLeds(RESET, RESET, RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	2100      	movs	r1, #0
 800036e:	2000      	movs	r0, #0
 8000370:	f000 fcfa 	bl	8000d68 <setPedesLeds>
			}
			if(pedeson==1){
 8000374:	4b74      	ldr	r3, [pc, #464]	; (8000548 <fsm_automatic_run+0x288>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2b01      	cmp	r3, #1
 800037a:	d104      	bne.n	8000386 <fsm_automatic_run+0xc6>
				setPedesLeds(RESET, SET, RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	2101      	movs	r1, #1
 8000380:	2000      	movs	r0, #0
 8000382:	f000 fcf1 	bl	8000d68 <setPedesLeds>
			}
			if(buzzer_toggle) {
 8000386:	4b72      	ldr	r3, [pc, #456]	; (8000550 <fsm_automatic_run+0x290>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00f      	beq.n	80003ae <fsm_automatic_run+0xee>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, buzzer_value);
 800038e:	4b6b      	ldr	r3, [pc, #428]	; (800053c <fsm_automatic_run+0x27c>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	4b6b      	ldr	r3, [pc, #428]	; (8000540 <fsm_automatic_run+0x280>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	635a      	str	r2, [r3, #52]	; 0x34
				buzzer_value += 79/red_duration;
 8000398:	4b66      	ldr	r3, [pc, #408]	; (8000534 <fsm_automatic_run+0x274>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	224f      	movs	r2, #79	; 0x4f
 800039e:	fb92 f2f3 	sdiv	r2, r2, r3
 80003a2:	4b66      	ldr	r3, [pc, #408]	; (800053c <fsm_automatic_run+0x27c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4413      	add	r3, r2
 80003a8:	4a64      	ldr	r2, [pc, #400]	; (800053c <fsm_automatic_run+0x27c>)
 80003aa:	6013      	str	r3, [r2, #0]
 80003ac:	e003      	b.n	80003b6 <fsm_automatic_run+0xf6>
			}
			else {
			    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80003ae:	4b64      	ldr	r3, [pc, #400]	; (8000540 <fsm_automatic_run+0x280>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	2200      	movs	r2, #0
 80003b4:	635a      	str	r2, [r3, #52]	; 0x34
			}
			if(timer_flag[0] == 1){
 80003b6:	4b63      	ldr	r3, [pc, #396]	; (8000544 <fsm_automatic_run+0x284>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d113      	bne.n	80003e6 <fsm_automatic_run+0x126>
				//setPedesLeds(RESET,RESET,RESET);
				setTimer(yellow_duration*100, 0);
 80003be:	4b65      	ldr	r3, [pc, #404]	; (8000554 <fsm_automatic_run+0x294>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	2264      	movs	r2, #100	; 0x64
 80003c4:	fb02 f303 	mul.w	r3, r2, r3
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f001 f9c4 	bl	8001758 <setTimer>
				status = RED_YELLOW;
 80003d0:	4b57      	ldr	r3, [pc, #348]	; (8000530 <fsm_automatic_run+0x270>)
 80003d2:	2203      	movs	r2, #3
 80003d4:	601a      	str	r2, [r3, #0]
				setInitialValue(yellow_duration, yellow_duration);
 80003d6:	4b5f      	ldr	r3, [pc, #380]	; (8000554 <fsm_automatic_run+0x294>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a5e      	ldr	r2, [pc, #376]	; (8000554 <fsm_automatic_run+0x294>)
 80003dc:	6812      	ldr	r2, [r2, #0]
 80003de:	4611      	mov	r1, r2
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fc0b 	bl	8000bfc <setInitialValue>
			}
			if(timer_flag[1] == 1){
 80003e6:	4b57      	ldr	r3, [pc, #348]	; (8000544 <fsm_automatic_run+0x284>)
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d105      	bne.n	80003fa <fsm_automatic_run+0x13a>
				countDown();
 80003ee:	f000 fbe3 	bl	8000bb8 <countDown>
				setTimer(100, 1);
 80003f2:	2101      	movs	r1, #1
 80003f4:	2064      	movs	r0, #100	; 0x64
 80003f6:	f001 f9af 	bl	8001758 <setTimer>

			}
			if(timer_flag[8]) {
 80003fa:	4b52      	ldr	r3, [pc, #328]	; (8000544 <fsm_automatic_run+0x284>)
 80003fc:	6a1b      	ldr	r3, [r3, #32]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d00d      	beq.n	800041e <fsm_automatic_run+0x15e>
			    if(buzzer_on) {
 8000402:	4b52      	ldr	r3, [pc, #328]	; (800054c <fsm_automatic_run+0x28c>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d005      	beq.n	8000416 <fsm_automatic_run+0x156>
			        buzzer_toggle ^= 1;
 800040a:	4b51      	ldr	r3, [pc, #324]	; (8000550 <fsm_automatic_run+0x290>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f083 0301 	eor.w	r3, r3, #1
 8000412:	4a4f      	ldr	r2, [pc, #316]	; (8000550 <fsm_automatic_run+0x290>)
 8000414:	6013      	str	r3, [r2, #0]
			    }
			    setTimer(10, 8);
 8000416:	2108      	movs	r1, #8
 8000418:	200a      	movs	r0, #10
 800041a:	f001 f99d 	bl	8001758 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 800041e:	2001      	movs	r0, #1
 8000420:	f7ff fe94 	bl	800014c <isButtonPressed>
 8000424:	4603      	mov	r3, r0
 8000426:	2b01      	cmp	r3, #1
 8000428:	d11e      	bne.n	8000468 <fsm_automatic_run+0x1a8>
				setHorizontalLeds(RESET,RESET,RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	2100      	movs	r1, #0
 800042e:	2000      	movs	r0, #0
 8000430:	f000 fc08 	bl	8000c44 <setHorizontalLeds>
				setVerticalLeds(RESET,RESET, RESET);
 8000434:	2200      	movs	r2, #0
 8000436:	2100      	movs	r1, #0
 8000438:	2000      	movs	r0, #0
 800043a:	f000 fc49 	bl	8000cd0 <setVerticalLeds>
				setPedesLeds(RESET,RESET,RESET);
 800043e:	2200      	movs	r2, #0
 8000440:	2100      	movs	r1, #0
 8000442:	2000      	movs	r0, #0
 8000444:	f000 fc90 	bl	8000d68 <setPedesLeds>
				setTimer(100, 3);
 8000448:	2103      	movs	r1, #3
 800044a:	2064      	movs	r0, #100	; 0x64
 800044c:	f001 f984 	bl	8001758 <setTimer>
				status = MAN_RED;
 8000450:	4b37      	ldr	r3, [pc, #220]	; (8000530 <fsm_automatic_run+0x270>)
 8000452:	220d      	movs	r2, #13
 8000454:	601a      	str	r2, [r3, #0]
				printf("=============MANUAL MODE=============\r\n");
 8000456:	4840      	ldr	r0, [pc, #256]	; (8000558 <fsm_automatic_run+0x298>)
 8000458:	f003 fc70 	bl	8003d3c <puts>
				printf("Current time: %d\r\n", red_duration);
 800045c:	4b35      	ldr	r3, [pc, #212]	; (8000534 <fsm_automatic_run+0x274>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4619      	mov	r1, r3
 8000462:	483e      	ldr	r0, [pc, #248]	; (800055c <fsm_automatic_run+0x29c>)
 8000464:	f003 fbe4 	bl	8003c30 <iprintf>
			}
			if(isButtonPressed(0) == 1){
 8000468:	2000      	movs	r0, #0
 800046a:	f7ff fe6f 	bl	800014c <isButtonPressed>
 800046e:	4603      	mov	r3, r0
 8000470:	2b01      	cmp	r3, #1
 8000472:	f040 81d7 	bne.w	8000824 <fsm_automatic_run+0x564>
				setPedesLeds(RESET,SET,RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	2101      	movs	r1, #1
 800047a:	2000      	movs	r0, #0
 800047c:	f000 fc74 	bl	8000d68 <setPedesLeds>
				pedeson=1;
 8000480:	4b31      	ldr	r3, [pc, #196]	; (8000548 <fsm_automatic_run+0x288>)
 8000482:	2201      	movs	r2, #1
 8000484:	601a      	str	r2, [r3, #0]
				buzzer_on = 1;
 8000486:	4b31      	ldr	r3, [pc, #196]	; (800054c <fsm_automatic_run+0x28c>)
 8000488:	2201      	movs	r2, #1
 800048a:	601a      	str	r2, [r3, #0]
				pedesduration = (red_duration+green_duration+yellow_duration)*200;
 800048c:	4b29      	ldr	r3, [pc, #164]	; (8000534 <fsm_automatic_run+0x274>)
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	4b29      	ldr	r3, [pc, #164]	; (8000538 <fsm_automatic_run+0x278>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	441a      	add	r2, r3
 8000496:	4b2f      	ldr	r3, [pc, #188]	; (8000554 <fsm_automatic_run+0x294>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4413      	add	r3, r2
 800049c:	22c8      	movs	r2, #200	; 0xc8
 800049e:	fb02 f303 	mul.w	r3, r2, r3
 80004a2:	4a2f      	ldr	r2, [pc, #188]	; (8000560 <fsm_automatic_run+0x2a0>)
 80004a4:	6013      	str	r3, [r2, #0]
				setTimer(pedesduration,9);
 80004a6:	4b2e      	ldr	r3, [pc, #184]	; (8000560 <fsm_automatic_run+0x2a0>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2109      	movs	r1, #9
 80004ac:	4618      	mov	r0, r3
 80004ae:	f001 f953 	bl	8001758 <setTimer>
				setTimer(10, 8);
 80004b2:	2108      	movs	r1, #8
 80004b4:	200a      	movs	r0, #10
 80004b6:	f001 f94f 	bl	8001758 <setTimer>
			}
			break;
 80004ba:	e1b3      	b.n	8000824 <fsm_automatic_run+0x564>
		case RED_YELLOW:
			setHorizontalLeds(SET,RESET,RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2100      	movs	r1, #0
 80004c0:	2001      	movs	r0, #1
 80004c2:	f000 fbbf 	bl	8000c44 <setHorizontalLeds>
			setVerticalLeds(RESET,RESET, SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	2100      	movs	r1, #0
 80004ca:	2000      	movs	r0, #0
 80004cc:	f000 fc00 	bl	8000cd0 <setVerticalLeds>
			if(timer_flag[9]==1){
 80004d0:	4b1c      	ldr	r3, [pc, #112]	; (8000544 <fsm_automatic_run+0x284>)
 80004d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d10d      	bne.n	80004f4 <fsm_automatic_run+0x234>
				pedeson=0;
 80004d8:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <fsm_automatic_run+0x288>)
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
				buzzer_on = 0;
 80004de:	4b1b      	ldr	r3, [pc, #108]	; (800054c <fsm_automatic_run+0x28c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
				buzzer_value = 100;
 80004e4:	4b15      	ldr	r3, [pc, #84]	; (800053c <fsm_automatic_run+0x27c>)
 80004e6:	2264      	movs	r2, #100	; 0x64
 80004e8:	601a      	str	r2, [r3, #0]
				setPedesLeds(RESET, RESET, RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2100      	movs	r1, #0
 80004ee:	2000      	movs	r0, #0
 80004f0:	f000 fc3a 	bl	8000d68 <setPedesLeds>
				//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
			}
			if(pedeson==1){
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <fsm_automatic_run+0x288>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d104      	bne.n	8000506 <fsm_automatic_run+0x246>
				setPedesLeds(RESET, SET, RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2101      	movs	r1, #1
 8000500:	2000      	movs	r0, #0
 8000502:	f000 fc31 	bl	8000d68 <setPedesLeds>
			}
			if(buzzer_toggle) {
 8000506:	4b12      	ldr	r3, [pc, #72]	; (8000550 <fsm_automatic_run+0x290>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d02a      	beq.n	8000564 <fsm_automatic_run+0x2a4>
                __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, buzzer_value);
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <fsm_automatic_run+0x27c>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <fsm_automatic_run+0x280>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	635a      	str	r2, [r3, #52]	; 0x34
                buzzer_value += 79/red_duration;
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <fsm_automatic_run+0x274>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	224f      	movs	r2, #79	; 0x4f
 800051e:	fb92 f2f3 	sdiv	r2, r2, r3
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <fsm_automatic_run+0x27c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4413      	add	r3, r2
 8000528:	4a04      	ldr	r2, [pc, #16]	; (800053c <fsm_automatic_run+0x27c>)
 800052a:	6013      	str	r3, [r2, #0]
 800052c:	e01e      	b.n	800056c <fsm_automatic_run+0x2ac>
 800052e:	bf00      	nop
 8000530:	2000006c 	.word	0x2000006c
 8000534:	20000070 	.word	0x20000070
 8000538:	20000074 	.word	0x20000074
 800053c:	20000064 	.word	0x20000064
 8000540:	20000268 	.word	0x20000268
 8000544:	20000224 	.word	0x20000224
 8000548:	20000128 	.word	0x20000128
 800054c:	20000118 	.word	0x20000118
 8000550:	2000011c 	.word	0x2000011c
 8000554:	20000078 	.word	0x20000078
 8000558:	08004bf4 	.word	0x08004bf4
 800055c:	08004c1c 	.word	0x08004c1c
 8000560:	20000258 	.word	0x20000258
            }
            else {
                __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000564:	4bb4      	ldr	r3, [pc, #720]	; (8000838 <fsm_automatic_run+0x578>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2200      	movs	r2, #0
 800056a:	635a      	str	r2, [r3, #52]	; 0x34
            }
			if(timer_flag[0] == 1){
 800056c:	4bb3      	ldr	r3, [pc, #716]	; (800083c <fsm_automatic_run+0x57c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d119      	bne.n	80005a8 <fsm_automatic_run+0x2e8>
				//setPedesLeds(RESET,RESET,RESET);
				setTimer(green_duration*100, 0);
 8000574:	4bb2      	ldr	r3, [pc, #712]	; (8000840 <fsm_automatic_run+0x580>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2264      	movs	r2, #100	; 0x64
 800057a:	fb02 f303 	mul.w	r3, r2, r3
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f001 f8e9 	bl	8001758 <setTimer>
				status = GREEN_RED;
 8000586:	4baf      	ldr	r3, [pc, #700]	; (8000844 <fsm_automatic_run+0x584>)
 8000588:	2204      	movs	r2, #4
 800058a:	601a      	str	r2, [r3, #0]
				buzzer_on = 0;
 800058c:	4bae      	ldr	r3, [pc, #696]	; (8000848 <fsm_automatic_run+0x588>)
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
				buzzer_value = 100;
 8000592:	4bae      	ldr	r3, [pc, #696]	; (800084c <fsm_automatic_run+0x58c>)
 8000594:	2264      	movs	r2, #100	; 0x64
 8000596:	601a      	str	r2, [r3, #0]
				setInitialValue(green_duration, red_duration);
 8000598:	4ba9      	ldr	r3, [pc, #676]	; (8000840 <fsm_automatic_run+0x580>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4aac      	ldr	r2, [pc, #688]	; (8000850 <fsm_automatic_run+0x590>)
 800059e:	6812      	ldr	r2, [r2, #0]
 80005a0:	4611      	mov	r1, r2
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fb2a 	bl	8000bfc <setInitialValue>
			}
			if(timer_flag[1] == 1){
 80005a8:	4ba4      	ldr	r3, [pc, #656]	; (800083c <fsm_automatic_run+0x57c>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d105      	bne.n	80005bc <fsm_automatic_run+0x2fc>
				countDown();
 80005b0:	f000 fb02 	bl	8000bb8 <countDown>
				setTimer(100, 1);
 80005b4:	2101      	movs	r1, #1
 80005b6:	2064      	movs	r0, #100	; 0x64
 80005b8:	f001 f8ce 	bl	8001758 <setTimer>
			}
			if(timer_flag[8]) {
 80005bc:	4b9f      	ldr	r3, [pc, #636]	; (800083c <fsm_automatic_run+0x57c>)
 80005be:	6a1b      	ldr	r3, [r3, #32]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d00d      	beq.n	80005e0 <fsm_automatic_run+0x320>
				if(buzzer_on) {
 80005c4:	4ba0      	ldr	r3, [pc, #640]	; (8000848 <fsm_automatic_run+0x588>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d005      	beq.n	80005d8 <fsm_automatic_run+0x318>
				    buzzer_toggle ^= 1;
 80005cc:	4ba1      	ldr	r3, [pc, #644]	; (8000854 <fsm_automatic_run+0x594>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f083 0301 	eor.w	r3, r3, #1
 80005d4:	4a9f      	ldr	r2, [pc, #636]	; (8000854 <fsm_automatic_run+0x594>)
 80005d6:	6013      	str	r3, [r2, #0]
				}
				setTimer(10, 8);
 80005d8:	2108      	movs	r1, #8
 80005da:	200a      	movs	r0, #10
 80005dc:	f001 f8bc 	bl	8001758 <setTimer>
			}
			if(isButtonPressed(0) == 1){
 80005e0:	2000      	movs	r0, #0
 80005e2:	f7ff fdb3 	bl	800014c <isButtonPressed>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	f040 811d 	bne.w	8000828 <fsm_automatic_run+0x568>
				setPedesLeds(RESET,SET,RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2101      	movs	r1, #1
 80005f2:	2000      	movs	r0, #0
 80005f4:	f000 fbb8 	bl	8000d68 <setPedesLeds>
				pedeson=1;
 80005f8:	4b97      	ldr	r3, [pc, #604]	; (8000858 <fsm_automatic_run+0x598>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	601a      	str	r2, [r3, #0]
				buzzer_on = 1;
 80005fe:	4b92      	ldr	r3, [pc, #584]	; (8000848 <fsm_automatic_run+0x588>)
 8000600:	2201      	movs	r2, #1
 8000602:	601a      	str	r2, [r3, #0]
				pedesduration = (red_duration+green_duration+yellow_duration)*200;
 8000604:	4b92      	ldr	r3, [pc, #584]	; (8000850 <fsm_automatic_run+0x590>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	4b8d      	ldr	r3, [pc, #564]	; (8000840 <fsm_automatic_run+0x580>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	441a      	add	r2, r3
 800060e:	4b93      	ldr	r3, [pc, #588]	; (800085c <fsm_automatic_run+0x59c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4413      	add	r3, r2
 8000614:	22c8      	movs	r2, #200	; 0xc8
 8000616:	fb02 f303 	mul.w	r3, r2, r3
 800061a:	4a91      	ldr	r2, [pc, #580]	; (8000860 <fsm_automatic_run+0x5a0>)
 800061c:	6013      	str	r3, [r2, #0]
				setTimer(pedesduration,9);
 800061e:	4b90      	ldr	r3, [pc, #576]	; (8000860 <fsm_automatic_run+0x5a0>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2109      	movs	r1, #9
 8000624:	4618      	mov	r0, r3
 8000626:	f001 f897 	bl	8001758 <setTimer>
				setTimer(10, 8);
 800062a:	2108      	movs	r1, #8
 800062c:	200a      	movs	r0, #10
 800062e:	f001 f893 	bl	8001758 <setTimer>
			}
			break;
 8000632:	e0f9      	b.n	8000828 <fsm_automatic_run+0x568>
		case GREEN_RED:
			setHorizontalLeds(RESET,SET,RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2101      	movs	r1, #1
 8000638:	2000      	movs	r0, #0
 800063a:	f000 fb03 	bl	8000c44 <setHorizontalLeds>
			setVerticalLeds(SET,RESET,RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	2100      	movs	r1, #0
 8000642:	2001      	movs	r0, #1
 8000644:	f000 fb44 	bl	8000cd0 <setVerticalLeds>
			if(timer_flag[9]==1){
 8000648:	4b7c      	ldr	r3, [pc, #496]	; (800083c <fsm_automatic_run+0x57c>)
 800064a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800064c:	2b01      	cmp	r3, #1
 800064e:	d10e      	bne.n	800066e <fsm_automatic_run+0x3ae>
				pedeson=0;
 8000650:	4b81      	ldr	r3, [pc, #516]	; (8000858 <fsm_automatic_run+0x598>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
				buzzer_on = 0;
 8000656:	4b7c      	ldr	r3, [pc, #496]	; (8000848 <fsm_automatic_run+0x588>)
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
				setPedesLeds(RESET, RESET, RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2100      	movs	r1, #0
 8000660:	2000      	movs	r0, #0
 8000662:	f000 fb81 	bl	8000d68 <setPedesLeds>
				//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000666:	4b74      	ldr	r3, [pc, #464]	; (8000838 <fsm_automatic_run+0x578>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2200      	movs	r2, #0
 800066c:	635a      	str	r2, [r3, #52]	; 0x34
			}
			if(pedeson==1){
 800066e:	4b7a      	ldr	r3, [pc, #488]	; (8000858 <fsm_automatic_run+0x598>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d108      	bne.n	8000688 <fsm_automatic_run+0x3c8>
				setPedesLeds(SET, RESET, RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	2001      	movs	r0, #1
 800067c:	f000 fb74 	bl	8000d68 <setPedesLeds>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000680:	4b6d      	ldr	r3, [pc, #436]	; (8000838 <fsm_automatic_run+0x578>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2200      	movs	r2, #0
 8000686:	635a      	str	r2, [r3, #52]	; 0x34
			}
			if(timer_flag[0] == 1){
 8000688:	4b6c      	ldr	r3, [pc, #432]	; (800083c <fsm_automatic_run+0x57c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d113      	bne.n	80006b8 <fsm_automatic_run+0x3f8>
				//setPedesLeds(RESET,RESET,RESET);
				setTimer(yellow_duration*100, 0);
 8000690:	4b72      	ldr	r3, [pc, #456]	; (800085c <fsm_automatic_run+0x59c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2264      	movs	r2, #100	; 0x64
 8000696:	fb02 f303 	mul.w	r3, r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f001 f85b 	bl	8001758 <setTimer>
				status = YELLOW_RED;
 80006a2:	4b68      	ldr	r3, [pc, #416]	; (8000844 <fsm_automatic_run+0x584>)
 80006a4:	2205      	movs	r2, #5
 80006a6:	601a      	str	r2, [r3, #0]
				setInitialValue(yellow_duration, yellow_duration);
 80006a8:	4b6c      	ldr	r3, [pc, #432]	; (800085c <fsm_automatic_run+0x59c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a6b      	ldr	r2, [pc, #428]	; (800085c <fsm_automatic_run+0x59c>)
 80006ae:	6812      	ldr	r2, [r2, #0]
 80006b0:	4611      	mov	r1, r2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 faa2 	bl	8000bfc <setInitialValue>
			}
			if(timer_flag[1] == 1){
 80006b8:	4b60      	ldr	r3, [pc, #384]	; (800083c <fsm_automatic_run+0x57c>)
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d105      	bne.n	80006cc <fsm_automatic_run+0x40c>
				countDown();
 80006c0:	f000 fa7a 	bl	8000bb8 <countDown>
				setTimer(100, 1);
 80006c4:	2101      	movs	r1, #1
 80006c6:	2064      	movs	r0, #100	; 0x64
 80006c8:	f001 f846 	bl	8001758 <setTimer>
			}
			if(isButtonPressed(0) == 1){
 80006cc:	2000      	movs	r0, #0
 80006ce:	f7ff fd3d 	bl	800014c <isButtonPressed>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	f040 80a9 	bne.w	800082c <fsm_automatic_run+0x56c>
				setPedesLeds(SET,RESET,RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	2001      	movs	r0, #1
 80006e0:	f000 fb42 	bl	8000d68 <setPedesLeds>
				pedeson=1;
 80006e4:	4b5c      	ldr	r3, [pc, #368]	; (8000858 <fsm_automatic_run+0x598>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	601a      	str	r2, [r3, #0]
				buzzer_on = 1;
 80006ea:	4b57      	ldr	r3, [pc, #348]	; (8000848 <fsm_automatic_run+0x588>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	601a      	str	r2, [r3, #0]
				pedesduration = (red_duration+green_duration+yellow_duration)*200;
 80006f0:	4b57      	ldr	r3, [pc, #348]	; (8000850 <fsm_automatic_run+0x590>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b52      	ldr	r3, [pc, #328]	; (8000840 <fsm_automatic_run+0x580>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	441a      	add	r2, r3
 80006fa:	4b58      	ldr	r3, [pc, #352]	; (800085c <fsm_automatic_run+0x59c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4413      	add	r3, r2
 8000700:	22c8      	movs	r2, #200	; 0xc8
 8000702:	fb02 f303 	mul.w	r3, r2, r3
 8000706:	4a56      	ldr	r2, [pc, #344]	; (8000860 <fsm_automatic_run+0x5a0>)
 8000708:	6013      	str	r3, [r2, #0]
				setTimer(pedesduration,9);
 800070a:	4b55      	ldr	r3, [pc, #340]	; (8000860 <fsm_automatic_run+0x5a0>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2109      	movs	r1, #9
 8000710:	4618      	mov	r0, r3
 8000712:	f001 f821 	bl	8001758 <setTimer>
				setTimer(10, 8);
 8000716:	2108      	movs	r1, #8
 8000718:	200a      	movs	r0, #10
 800071a:	f001 f81d 	bl	8001758 <setTimer>
			}
			break;
 800071e:	e085      	b.n	800082c <fsm_automatic_run+0x56c>
		case YELLOW_RED:
			setHorizontalLeds(RESET,RESET,SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2100      	movs	r1, #0
 8000724:	2000      	movs	r0, #0
 8000726:	f000 fa8d 	bl	8000c44 <setHorizontalLeds>
			setVerticalLeds(SET,RESET,RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	2001      	movs	r0, #1
 8000730:	f000 face 	bl	8000cd0 <setVerticalLeds>
			if(timer_flag[9]==1){
 8000734:	4b41      	ldr	r3, [pc, #260]	; (800083c <fsm_automatic_run+0x57c>)
 8000736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000738:	2b01      	cmp	r3, #1
 800073a:	d10e      	bne.n	800075a <fsm_automatic_run+0x49a>
				pedeson=0;
 800073c:	4b46      	ldr	r3, [pc, #280]	; (8000858 <fsm_automatic_run+0x598>)
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
				buzzer_on = 0;
 8000742:	4b41      	ldr	r3, [pc, #260]	; (8000848 <fsm_automatic_run+0x588>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
				setPedesLeds(RESET, RESET, RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2100      	movs	r1, #0
 800074c:	2000      	movs	r0, #0
 800074e:	f000 fb0b 	bl	8000d68 <setPedesLeds>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000752:	4b39      	ldr	r3, [pc, #228]	; (8000838 <fsm_automatic_run+0x578>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2200      	movs	r2, #0
 8000758:	635a      	str	r2, [r3, #52]	; 0x34
			}
			if(pedeson==1){
 800075a:	4b3f      	ldr	r3, [pc, #252]	; (8000858 <fsm_automatic_run+0x598>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d10c      	bne.n	800077c <fsm_automatic_run+0x4bc>
				setPedesLeds(SET, RESET, RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	2001      	movs	r0, #1
 8000768:	f000 fafe 	bl	8000d68 <setPedesLeds>
				setTimer(10, 8);
 800076c:	2108      	movs	r1, #8
 800076e:	200a      	movs	r0, #10
 8000770:	f000 fff2 	bl	8001758 <setTimer>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000774:	4b30      	ldr	r3, [pc, #192]	; (8000838 <fsm_automatic_run+0x578>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2200      	movs	r2, #0
 800077a:	635a      	str	r2, [r3, #52]	; 0x34
			}
			if(timer_flag[0] == 1){
 800077c:	4b2f      	ldr	r3, [pc, #188]	; (800083c <fsm_automatic_run+0x57c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d11a      	bne.n	80007ba <fsm_automatic_run+0x4fa>
				//setPedesLeds(RESET,RESET,RESET);
				setTimer(green_duration*100, 0);
 8000784:	4b2e      	ldr	r3, [pc, #184]	; (8000840 <fsm_automatic_run+0x580>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2264      	movs	r2, #100	; 0x64
 800078a:	fb02 f303 	mul.w	r3, r2, r3
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f000 ffe1 	bl	8001758 <setTimer>
				status = RED_GREEN;
 8000796:	4b2b      	ldr	r3, [pc, #172]	; (8000844 <fsm_automatic_run+0x584>)
 8000798:	2202      	movs	r2, #2
 800079a:	601a      	str	r2, [r3, #0]
				setInitialValue(red_duration, green_duration);
 800079c:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <fsm_automatic_run+0x590>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a27      	ldr	r2, [pc, #156]	; (8000840 <fsm_automatic_run+0x580>)
 80007a2:	6812      	ldr	r2, [r2, #0]
 80007a4:	4611      	mov	r1, r2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 fa28 	bl	8000bfc <setInitialValue>
				if(pedeson) buzzer_on = 1;
 80007ac:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <fsm_automatic_run+0x598>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d002      	beq.n	80007ba <fsm_automatic_run+0x4fa>
 80007b4:	4b24      	ldr	r3, [pc, #144]	; (8000848 <fsm_automatic_run+0x588>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	601a      	str	r2, [r3, #0]
			}
			if(timer_flag[1] == 1){
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <fsm_automatic_run+0x57c>)
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d105      	bne.n	80007ce <fsm_automatic_run+0x50e>
				countDown();
 80007c2:	f000 f9f9 	bl	8000bb8 <countDown>
				setTimer(100, 1);
 80007c6:	2101      	movs	r1, #1
 80007c8:	2064      	movs	r0, #100	; 0x64
 80007ca:	f000 ffc5 	bl	8001758 <setTimer>
			}
			if(isButtonPressed(0) == 1){
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff fcbc 	bl	800014c <isButtonPressed>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d12a      	bne.n	8000830 <fsm_automatic_run+0x570>
				setPedesLeds(SET,RESET,RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	2001      	movs	r0, #1
 80007e0:	f000 fac2 	bl	8000d68 <setPedesLeds>
				pedeson=1;
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <fsm_automatic_run+0x598>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	601a      	str	r2, [r3, #0]
				buzzer_on = 1;
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <fsm_automatic_run+0x588>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	601a      	str	r2, [r3, #0]
				pedesduration = (red_duration+green_duration+yellow_duration)*200;
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <fsm_automatic_run+0x590>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <fsm_automatic_run+0x580>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	441a      	add	r2, r3
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <fsm_automatic_run+0x59c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	22c8      	movs	r2, #200	; 0xc8
 8000802:	fb02 f303 	mul.w	r3, r2, r3
 8000806:	4a16      	ldr	r2, [pc, #88]	; (8000860 <fsm_automatic_run+0x5a0>)
 8000808:	6013      	str	r3, [r2, #0]
				setTimer(pedesduration,9);
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <fsm_automatic_run+0x5a0>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2109      	movs	r1, #9
 8000810:	4618      	mov	r0, r3
 8000812:	f000 ffa1 	bl	8001758 <setTimer>
				setTimer(10, 8);
 8000816:	2108      	movs	r1, #8
 8000818:	200a      	movs	r0, #10
 800081a:	f000 ff9d 	bl	8001758 <setTimer>
			}
			break;
 800081e:	e007      	b.n	8000830 <fsm_automatic_run+0x570>
		default:
			break;
 8000820:	bf00      	nop
 8000822:	e006      	b.n	8000832 <fsm_automatic_run+0x572>
			break;
 8000824:	bf00      	nop
 8000826:	e004      	b.n	8000832 <fsm_automatic_run+0x572>
			break;
 8000828:	bf00      	nop
 800082a:	e002      	b.n	8000832 <fsm_automatic_run+0x572>
			break;
 800082c:	bf00      	nop
 800082e:	e000      	b.n	8000832 <fsm_automatic_run+0x572>
			break;
 8000830:	bf00      	nop
	}
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000268 	.word	0x20000268
 800083c:	20000224 	.word	0x20000224
 8000840:	20000074 	.word	0x20000074
 8000844:	2000006c 	.word	0x2000006c
 8000848:	20000118 	.word	0x20000118
 800084c:	20000064 	.word	0x20000064
 8000850:	20000070 	.word	0x20000070
 8000854:	2000011c 	.word	0x2000011c
 8000858:	20000128 	.word	0x20000128
 800085c:	20000078 	.word	0x20000078
 8000860:	20000258 	.word	0x20000258

08000864 <initializeDurationClones>:

int red_duration_clone;
int yellow_duration_clone;
int green_duration_clone;
int toggle = 1;
void initializeDurationClones(){
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
    red_duration_clone = red_duration;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <initializeDurationClones+0x24>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <initializeDurationClones+0x28>)
 800086e:	6013      	str	r3, [r2, #0]
    yellow_duration_clone = yellow_duration;
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <initializeDurationClones+0x2c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a07      	ldr	r2, [pc, #28]	; (8000894 <initializeDurationClones+0x30>)
 8000876:	6013      	str	r3, [r2, #0]
    green_duration_clone = green_duration;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <initializeDurationClones+0x34>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a07      	ldr	r2, [pc, #28]	; (800089c <initializeDurationClones+0x38>)
 800087e:	6013      	str	r3, [r2, #0]
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	20000070 	.word	0x20000070
 800088c:	2000025c 	.word	0x2000025c
 8000890:	20000078 	.word	0x20000078
 8000894:	20000264 	.word	0x20000264
 8000898:	20000074 	.word	0x20000074
 800089c:	20000260 	.word	0x20000260

080008a0 <fsm_manual_run>:
void fsm_manual_run(){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

	switch (status) {
 80008a4:	4bb1      	ldr	r3, [pc, #708]	; (8000b6c <fsm_manual_run+0x2cc>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b0f      	cmp	r3, #15
 80008aa:	f000 80ed 	beq.w	8000a88 <fsm_manual_run+0x1e8>
 80008ae:	2b0f      	cmp	r3, #15
 80008b0:	f300 8152 	bgt.w	8000b58 <fsm_manual_run+0x2b8>
 80008b4:	2b0d      	cmp	r3, #13
 80008b6:	d002      	beq.n	80008be <fsm_manual_run+0x1e>
 80008b8:	2b0e      	cmp	r3, #14
 80008ba:	d073      	beq.n	80009a4 <fsm_manual_run+0x104>
 80008bc:	e14c      	b.n	8000b58 <fsm_manual_run+0x2b8>
		case MAN_RED:
			if(timer_flag[3] == 1){
 80008be:	4bac      	ldr	r3, [pc, #688]	; (8000b70 <fsm_manual_run+0x2d0>)
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d122      	bne.n	800090c <fsm_manual_run+0x6c>
				if(toggle){
 80008c6:	4bab      	ldr	r3, [pc, #684]	; (8000b74 <fsm_manual_run+0x2d4>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d00a      	beq.n	80008e4 <fsm_manual_run+0x44>
					setHorizontalLeds(SET,RESET,RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	2001      	movs	r0, #1
 80008d4:	f000 f9b6 	bl	8000c44 <setHorizontalLeds>
					setVerticalLeds(SET,RESET,RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	2001      	movs	r0, #1
 80008de:	f000 f9f7 	bl	8000cd0 <setVerticalLeds>
 80008e2:	e009      	b.n	80008f8 <fsm_manual_run+0x58>
				}else {
					setHorizontalLeds(RESET,RESET,RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	2000      	movs	r0, #0
 80008ea:	f000 f9ab 	bl	8000c44 <setHorizontalLeds>
					setVerticalLeds(RESET,RESET,RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	2000      	movs	r0, #0
 80008f4:	f000 f9ec 	bl	8000cd0 <setVerticalLeds>
				}
				toggle = 1 - toggle;
 80008f8:	4b9e      	ldr	r3, [pc, #632]	; (8000b74 <fsm_manual_run+0x2d4>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f1c3 0301 	rsb	r3, r3, #1
 8000900:	4a9c      	ldr	r2, [pc, #624]	; (8000b74 <fsm_manual_run+0x2d4>)
 8000902:	6013      	str	r3, [r2, #0]
				setTimer(100, 3);
 8000904:	2103      	movs	r1, #3
 8000906:	2064      	movs	r0, #100	; 0x64
 8000908:	f000 ff26 	bl	8001758 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 800090c:	2001      	movs	r0, #1
 800090e:	f7ff fc1d 	bl	800014c <isButtonPressed>
 8000912:	4603      	mov	r3, r0
 8000914:	2b01      	cmp	r3, #1
 8000916:	d116      	bne.n	8000946 <fsm_manual_run+0xa6>
				setHorizontalLeds(RESET,RESET,RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	2000      	movs	r0, #0
 800091e:	f000 f991 	bl	8000c44 <setHorizontalLeds>
				setVerticalLeds(RESET,RESET,RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	2000      	movs	r0, #0
 8000928:	f000 f9d2 	bl	8000cd0 <setVerticalLeds>
				setTimer(100, 3);
 800092c:	2103      	movs	r1, #3
 800092e:	2064      	movs	r0, #100	; 0x64
 8000930:	f000 ff12 	bl	8001758 <setTimer>
				status = MAN_YELLOW;
 8000934:	4b8d      	ldr	r3, [pc, #564]	; (8000b6c <fsm_manual_run+0x2cc>)
 8000936:	220e      	movs	r2, #14
 8000938:	601a      	str	r2, [r3, #0]
				printf("Current time: %d\r\n", yellow_duration_clone);
 800093a:	4b8f      	ldr	r3, [pc, #572]	; (8000b78 <fsm_manual_run+0x2d8>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4619      	mov	r1, r3
 8000940:	488e      	ldr	r0, [pc, #568]	; (8000b7c <fsm_manual_run+0x2dc>)
 8000942:	f003 f975 	bl	8003c30 <iprintf>
			}
			if(isButtonPressed(2) == 1){
 8000946:	2002      	movs	r0, #2
 8000948:	f7ff fc00 	bl	800014c <isButtonPressed>
 800094c:	4603      	mov	r3, r0
 800094e:	2b01      	cmp	r3, #1
 8000950:	d112      	bne.n	8000978 <fsm_manual_run+0xd8>
				red_duration_clone++;
 8000952:	4b8b      	ldr	r3, [pc, #556]	; (8000b80 <fsm_manual_run+0x2e0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	3301      	adds	r3, #1
 8000958:	4a89      	ldr	r2, [pc, #548]	; (8000b80 <fsm_manual_run+0x2e0>)
 800095a:	6013      	str	r3, [r2, #0]
				if(red_duration_clone >= 99) red_duration_clone = red_duration;
 800095c:	4b88      	ldr	r3, [pc, #544]	; (8000b80 <fsm_manual_run+0x2e0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b62      	cmp	r3, #98	; 0x62
 8000962:	dd03      	ble.n	800096c <fsm_manual_run+0xcc>
 8000964:	4b87      	ldr	r3, [pc, #540]	; (8000b84 <fsm_manual_run+0x2e4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a85      	ldr	r2, [pc, #532]	; (8000b80 <fsm_manual_run+0x2e0>)
 800096a:	6013      	str	r3, [r2, #0]
				printf("Current time: %d\r\n", red_duration_clone);
 800096c:	4b84      	ldr	r3, [pc, #528]	; (8000b80 <fsm_manual_run+0x2e0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	4882      	ldr	r0, [pc, #520]	; (8000b7c <fsm_manual_run+0x2dc>)
 8000974:	f003 f95c 	bl	8003c30 <iprintf>
			}
			if(isButtonPressed(3) == 1){
 8000978:	2003      	movs	r0, #3
 800097a:	f7ff fbe7 	bl	800014c <isButtonPressed>
 800097e:	4603      	mov	r3, r0
 8000980:	2b01      	cmp	r3, #1
 8000982:	f040 80ec 	bne.w	8000b5e <fsm_manual_run+0x2be>
				red_duration =  red_duration_clone;
 8000986:	4b7e      	ldr	r3, [pc, #504]	; (8000b80 <fsm_manual_run+0x2e0>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a7e      	ldr	r2, [pc, #504]	; (8000b84 <fsm_manual_run+0x2e4>)
 800098c:	6013      	str	r3, [r2, #0]
				green_duration = red_duration - yellow_duration;
 800098e:	4b7d      	ldr	r3, [pc, #500]	; (8000b84 <fsm_manual_run+0x2e4>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	4b7d      	ldr	r3, [pc, #500]	; (8000b88 <fsm_manual_run+0x2e8>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	4a7c      	ldr	r2, [pc, #496]	; (8000b8c <fsm_manual_run+0x2ec>)
 800099a:	6013      	str	r3, [r2, #0]
				status = INIT;
 800099c:	4b73      	ldr	r3, [pc, #460]	; (8000b6c <fsm_manual_run+0x2cc>)
 800099e:	2201      	movs	r2, #1
 80009a0:	601a      	str	r2, [r3, #0]
			}
			break;
 80009a2:	e0dc      	b.n	8000b5e <fsm_manual_run+0x2be>
		case MAN_YELLOW:
			if(timer_flag[3] == 1){
 80009a4:	4b72      	ldr	r3, [pc, #456]	; (8000b70 <fsm_manual_run+0x2d0>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d122      	bne.n	80009f2 <fsm_manual_run+0x152>
				if(toggle){
 80009ac:	4b71      	ldr	r3, [pc, #452]	; (8000b74 <fsm_manual_run+0x2d4>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00a      	beq.n	80009ca <fsm_manual_run+0x12a>
					setHorizontalLeds(RESET,RESET,SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	2100      	movs	r1, #0
 80009b8:	2000      	movs	r0, #0
 80009ba:	f000 f943 	bl	8000c44 <setHorizontalLeds>
					setVerticalLeds(RESET,RESET,SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	2100      	movs	r1, #0
 80009c2:	2000      	movs	r0, #0
 80009c4:	f000 f984 	bl	8000cd0 <setVerticalLeds>
 80009c8:	e009      	b.n	80009de <fsm_manual_run+0x13e>
				}else {
					setHorizontalLeds(RESET,RESET,RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	2000      	movs	r0, #0
 80009d0:	f000 f938 	bl	8000c44 <setHorizontalLeds>
					setVerticalLeds(RESET,RESET,RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2100      	movs	r1, #0
 80009d8:	2000      	movs	r0, #0
 80009da:	f000 f979 	bl	8000cd0 <setVerticalLeds>
				}
				toggle = 1 - toggle;
 80009de:	4b65      	ldr	r3, [pc, #404]	; (8000b74 <fsm_manual_run+0x2d4>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f1c3 0301 	rsb	r3, r3, #1
 80009e6:	4a63      	ldr	r2, [pc, #396]	; (8000b74 <fsm_manual_run+0x2d4>)
 80009e8:	6013      	str	r3, [r2, #0]
				setTimer(100, 3);
 80009ea:	2103      	movs	r1, #3
 80009ec:	2064      	movs	r0, #100	; 0x64
 80009ee:	f000 feb3 	bl	8001758 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 80009f2:	2001      	movs	r0, #1
 80009f4:	f7ff fbaa 	bl	800014c <isButtonPressed>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d116      	bne.n	8000a2c <fsm_manual_run+0x18c>
				setHorizontalLeds(RESET,RESET,RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2100      	movs	r1, #0
 8000a02:	2000      	movs	r0, #0
 8000a04:	f000 f91e 	bl	8000c44 <setHorizontalLeds>
				setVerticalLeds(RESET,RESET,RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f000 f95f 	bl	8000cd0 <setVerticalLeds>
				setTimer(100, 3);
 8000a12:	2103      	movs	r1, #3
 8000a14:	2064      	movs	r0, #100	; 0x64
 8000a16:	f000 fe9f 	bl	8001758 <setTimer>
				status = MAN_GREEN;
 8000a1a:	4b54      	ldr	r3, [pc, #336]	; (8000b6c <fsm_manual_run+0x2cc>)
 8000a1c:	220f      	movs	r2, #15
 8000a1e:	601a      	str	r2, [r3, #0]
				printf("Current time: %d\r\n", green_duration_clone);
 8000a20:	4b5b      	ldr	r3, [pc, #364]	; (8000b90 <fsm_manual_run+0x2f0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	4855      	ldr	r0, [pc, #340]	; (8000b7c <fsm_manual_run+0x2dc>)
 8000a28:	f003 f902 	bl	8003c30 <iprintf>
			}
			if(isButtonPressed(2) == 1){
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f7ff fb8d 	bl	800014c <isButtonPressed>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d112      	bne.n	8000a5e <fsm_manual_run+0x1be>
				yellow_duration_clone++;
 8000a38:	4b4f      	ldr	r3, [pc, #316]	; (8000b78 <fsm_manual_run+0x2d8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	4a4e      	ldr	r2, [pc, #312]	; (8000b78 <fsm_manual_run+0x2d8>)
 8000a40:	6013      	str	r3, [r2, #0]
				if(yellow_duration_clone >= 99) yellow_duration_clone = yellow_duration;
 8000a42:	4b4d      	ldr	r3, [pc, #308]	; (8000b78 <fsm_manual_run+0x2d8>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b62      	cmp	r3, #98	; 0x62
 8000a48:	dd03      	ble.n	8000a52 <fsm_manual_run+0x1b2>
 8000a4a:	4b4f      	ldr	r3, [pc, #316]	; (8000b88 <fsm_manual_run+0x2e8>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a4a      	ldr	r2, [pc, #296]	; (8000b78 <fsm_manual_run+0x2d8>)
 8000a50:	6013      	str	r3, [r2, #0]
				printf("Current time: %d\r\n", yellow_duration_clone);
 8000a52:	4b49      	ldr	r3, [pc, #292]	; (8000b78 <fsm_manual_run+0x2d8>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4619      	mov	r1, r3
 8000a58:	4848      	ldr	r0, [pc, #288]	; (8000b7c <fsm_manual_run+0x2dc>)
 8000a5a:	f003 f8e9 	bl	8003c30 <iprintf>
			}
			if(isButtonPressed(3) == 1){
 8000a5e:	2003      	movs	r0, #3
 8000a60:	f7ff fb74 	bl	800014c <isButtonPressed>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d17b      	bne.n	8000b62 <fsm_manual_run+0x2c2>
				yellow_duration =  yellow_duration_clone;
 8000a6a:	4b43      	ldr	r3, [pc, #268]	; (8000b78 <fsm_manual_run+0x2d8>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a46      	ldr	r2, [pc, #280]	; (8000b88 <fsm_manual_run+0x2e8>)
 8000a70:	6013      	str	r3, [r2, #0]
				red_duration = green_duration + yellow_duration;
 8000a72:	4b46      	ldr	r3, [pc, #280]	; (8000b8c <fsm_manual_run+0x2ec>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4b44      	ldr	r3, [pc, #272]	; (8000b88 <fsm_manual_run+0x2e8>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a41      	ldr	r2, [pc, #260]	; (8000b84 <fsm_manual_run+0x2e4>)
 8000a7e:	6013      	str	r3, [r2, #0]
				status = INIT;
 8000a80:	4b3a      	ldr	r3, [pc, #232]	; (8000b6c <fsm_manual_run+0x2cc>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a86:	e06c      	b.n	8000b62 <fsm_manual_run+0x2c2>
		case MAN_GREEN:
			if(timer_flag[3] == 1){
 8000a88:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <fsm_manual_run+0x2d0>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d122      	bne.n	8000ad6 <fsm_manual_run+0x236>
				if(toggle){
 8000a90:	4b38      	ldr	r3, [pc, #224]	; (8000b74 <fsm_manual_run+0x2d4>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d00a      	beq.n	8000aae <fsm_manual_run+0x20e>
					setHorizontalLeds(RESET,SET,RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f000 f8d1 	bl	8000c44 <setHorizontalLeds>
					setVerticalLeds(RESET,SET,RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 f912 	bl	8000cd0 <setVerticalLeds>
 8000aac:	e009      	b.n	8000ac2 <fsm_manual_run+0x222>
				}else {
					setHorizontalLeds(RESET,RESET,RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 f8c6 	bl	8000c44 <setHorizontalLeds>
					setVerticalLeds(RESET,RESET,RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	2000      	movs	r0, #0
 8000abe:	f000 f907 	bl	8000cd0 <setVerticalLeds>
				}
				toggle = 1 - toggle;
 8000ac2:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <fsm_manual_run+0x2d4>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f1c3 0301 	rsb	r3, r3, #1
 8000aca:	4a2a      	ldr	r2, [pc, #168]	; (8000b74 <fsm_manual_run+0x2d4>)
 8000acc:	6013      	str	r3, [r2, #0]
				setTimer(100, 3);
 8000ace:	2103      	movs	r1, #3
 8000ad0:	2064      	movs	r0, #100	; 0x64
 8000ad2:	f000 fe41 	bl	8001758 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f7ff fb38 	bl	800014c <isButtonPressed>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d10c      	bne.n	8000afc <fsm_manual_run+0x25c>
				setHorizontalLeds(RESET,RESET,RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f000 f8ac 	bl	8000c44 <setHorizontalLeds>
				setVerticalLeds(RESET,RESET,RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	2000      	movs	r0, #0
 8000af2:	f000 f8ed 	bl	8000cd0 <setVerticalLeds>
				status = INIT;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <fsm_manual_run+0x2cc>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(2) == 1){
 8000afc:	2002      	movs	r0, #2
 8000afe:	f7ff fb25 	bl	800014c <isButtonPressed>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d112      	bne.n	8000b2e <fsm_manual_run+0x28e>
				green_duration_clone++;
 8000b08:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <fsm_manual_run+0x2f0>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	4a20      	ldr	r2, [pc, #128]	; (8000b90 <fsm_manual_run+0x2f0>)
 8000b10:	6013      	str	r3, [r2, #0]
				if(green_duration_clone >= 99) green_duration_clone = green_duration;
 8000b12:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <fsm_manual_run+0x2f0>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b62      	cmp	r3, #98	; 0x62
 8000b18:	dd03      	ble.n	8000b22 <fsm_manual_run+0x282>
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <fsm_manual_run+0x2ec>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <fsm_manual_run+0x2f0>)
 8000b20:	6013      	str	r3, [r2, #0]
				printf("Current time: %d\r\n", green_duration_clone);
 8000b22:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <fsm_manual_run+0x2f0>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4619      	mov	r1, r3
 8000b28:	4814      	ldr	r0, [pc, #80]	; (8000b7c <fsm_manual_run+0x2dc>)
 8000b2a:	f003 f881 	bl	8003c30 <iprintf>
			}
			if(isButtonPressed(3) == 1){
 8000b2e:	2003      	movs	r0, #3
 8000b30:	f7ff fb0c 	bl	800014c <isButtonPressed>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d115      	bne.n	8000b66 <fsm_manual_run+0x2c6>
				green_duration =  green_duration_clone;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <fsm_manual_run+0x2f0>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <fsm_manual_run+0x2ec>)
 8000b40:	6013      	str	r3, [r2, #0]
				red_duration = green_duration + yellow_duration;
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <fsm_manual_run+0x2ec>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <fsm_manual_run+0x2e8>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <fsm_manual_run+0x2e4>)
 8000b4e:	6013      	str	r3, [r2, #0]
				status = INIT;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <fsm_manual_run+0x2cc>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	601a      	str	r2, [r3, #0]
			}
			break;
 8000b56:	e006      	b.n	8000b66 <fsm_manual_run+0x2c6>
		default:
			initializeDurationClones();
 8000b58:	f7ff fe84 	bl	8000864 <initializeDurationClones>
			break;
 8000b5c:	e004      	b.n	8000b68 <fsm_manual_run+0x2c8>
			break;
 8000b5e:	bf00      	nop
 8000b60:	e002      	b.n	8000b68 <fsm_manual_run+0x2c8>
			break;
 8000b62:	bf00      	nop
 8000b64:	e000      	b.n	8000b68 <fsm_manual_run+0x2c8>
			break;
 8000b66:	bf00      	nop
	}
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000006c 	.word	0x2000006c
 8000b70:	20000224 	.word	0x20000224
 8000b74:	20000068 	.word	0x20000068
 8000b78:	20000264 	.word	0x20000264
 8000b7c:	08004c30 	.word	0x08004c30
 8000b80:	2000025c 	.word	0x2000025c
 8000b84:	20000070 	.word	0x20000070
 8000b88:	20000078 	.word	0x20000078
 8000b8c:	20000074 	.word	0x20000074
 8000b90:	20000260 	.word	0x20000260

08000b94 <__io_putchar>:
int red_duration=5;
int green_duration=3;
int yellow_duration=2;
int pedeson=0;	//used to check whether ped button is pressed or not

int __io_putchar(int ch) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000b9c:	1d39      	adds	r1, r7, #4
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <__io_putchar+0x20>)
 8000ba6:	f002 fe91 	bl	80038cc <HAL_UART_Transmit>
    return ch;
 8000baa:	687b      	ldr	r3, [r7, #4]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200002f8 	.word	0x200002f8

08000bb8 <countDown>:

//time counting down
void countDown(){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	horizontal_number--;
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <countDown+0x34>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <countDown+0x34>)
 8000bc4:	6013      	str	r3, [r2, #0]
	vertical_number--;
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <countDown+0x38>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <countDown+0x38>)
 8000bce:	6013      	str	r3, [r2, #0]
        printf("Remaining horizontal second: %d\r\n", horizontal_number);
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <countDown+0x34>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <countDown+0x3c>)
 8000bd8:	f003 f82a 	bl	8003c30 <iprintf>
        printf("Remaining vertical second: %d\r\n", vertical_number);
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <countDown+0x38>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4619      	mov	r1, r3
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <countDown+0x40>)
 8000be4:	f003 f824 	bl	8003c30 <iprintf>
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000120 	.word	0x20000120
 8000bf0:	20000124 	.word	0x20000124
 8000bf4:	08004c44 	.word	0x08004c44
 8000bf8:	08004c68 	.word	0x08004c68

08000bfc <setInitialValue>:

void setInitialValue(int horizontal, int vertical){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
    horizontal_number = horizontal;
 8000c06:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <setInitialValue+0x38>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6013      	str	r3, [r2, #0]
    vertical_number = vertical;
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <setInitialValue+0x3c>)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	6013      	str	r3, [r2, #0]
    printf("Remaining horizontal second: %d\r\n", horizontal_number);
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <setInitialValue+0x38>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4619      	mov	r1, r3
 8000c18:	4808      	ldr	r0, [pc, #32]	; (8000c3c <setInitialValue+0x40>)
 8000c1a:	f003 f809 	bl	8003c30 <iprintf>
    printf("Remaining vertical second: %d\r\n", vertical_number);
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <setInitialValue+0x3c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4619      	mov	r1, r3
 8000c24:	4806      	ldr	r0, [pc, #24]	; (8000c40 <setInitialValue+0x44>)
 8000c26:	f003 f803 	bl	8003c30 <iprintf>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000120 	.word	0x20000120
 8000c38:	20000124 	.word	0x20000124
 8000c3c:	08004c44 	.word	0x08004c44
 8000c40:	08004c68 	.word	0x08004c68

08000c44 <setHorizontalLeds>:

void setHorizontalLeds(int red, int green, int yellow){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
    if(red == SET){
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d109      	bne.n	8000c6a <setHorizontalLeds+0x26>
        HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000c56:	2201      	movs	r2, #1
 8000c58:	2120      	movs	r1, #32
 8000c5a:	481c      	ldr	r0, [pc, #112]	; (8000ccc <setHorizontalLeds+0x88>)
 8000c5c:	f001 faab 	bl	80021b6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2110      	movs	r1, #16
 8000c64:	4819      	ldr	r0, [pc, #100]	; (8000ccc <setHorizontalLeds+0x88>)
 8000c66:	f001 faa6 	bl	80021b6 <HAL_GPIO_WritePin>
    }
    if(green == SET){
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d109      	bne.n	8000c84 <setHorizontalLeds+0x40>
        HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2120      	movs	r1, #32
 8000c74:	4815      	ldr	r0, [pc, #84]	; (8000ccc <setHorizontalLeds+0x88>)
 8000c76:	f001 fa9e 	bl	80021b6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2110      	movs	r1, #16
 8000c7e:	4813      	ldr	r0, [pc, #76]	; (8000ccc <setHorizontalLeds+0x88>)
 8000c80:	f001 fa99 	bl	80021b6 <HAL_GPIO_WritePin>
    }
    if(yellow == SET){
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d109      	bne.n	8000c9e <setHorizontalLeds+0x5a>
        HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2120      	movs	r1, #32
 8000c8e:	480f      	ldr	r0, [pc, #60]	; (8000ccc <setHorizontalLeds+0x88>)
 8000c90:	f001 fa91 	bl	80021b6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	2110      	movs	r1, #16
 8000c98:	480c      	ldr	r0, [pc, #48]	; (8000ccc <setHorizontalLeds+0x88>)
 8000c9a:	f001 fa8c 	bl	80021b6 <HAL_GPIO_WritePin>
    }
    if(red==RESET && green==RESET && yellow==RESET){
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d10f      	bne.n	8000cc4 <setHorizontalLeds+0x80>
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10c      	bne.n	8000cc4 <setHorizontalLeds+0x80>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d109      	bne.n	8000cc4 <setHorizontalLeds+0x80>
        HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <setHorizontalLeds+0x88>)
 8000cb6:	f001 fa7e 	bl	80021b6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2110      	movs	r1, #16
 8000cbe:	4803      	ldr	r0, [pc, #12]	; (8000ccc <setHorizontalLeds+0x88>)
 8000cc0:	f001 fa79 	bl	80021b6 <HAL_GPIO_WritePin>
    }
}
 8000cc4:	bf00      	nop
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40010c00 	.word	0x40010c00

08000cd0 <setVerticalLeds>:
void setVerticalLeds(int red, int green, int yellow){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
    if(red == SET){
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d10a      	bne.n	8000cf8 <setVerticalLeds+0x28>
        HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce8:	481d      	ldr	r0, [pc, #116]	; (8000d60 <setVerticalLeds+0x90>)
 8000cea:	f001 fa64 	bl	80021b6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	481c      	ldr	r0, [pc, #112]	; (8000d64 <setVerticalLeds+0x94>)
 8000cf4:	f001 fa5f 	bl	80021b6 <HAL_GPIO_WritePin>
    }
    if(green == SET){
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d10a      	bne.n	8000d14 <setVerticalLeds+0x44>
        HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d04:	4816      	ldr	r0, [pc, #88]	; (8000d60 <setVerticalLeds+0x90>)
 8000d06:	f001 fa56 	bl	80021b6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2108      	movs	r1, #8
 8000d0e:	4815      	ldr	r0, [pc, #84]	; (8000d64 <setVerticalLeds+0x94>)
 8000d10:	f001 fa51 	bl	80021b6 <HAL_GPIO_WritePin>
    }
    if(yellow == SET){
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d10a      	bne.n	8000d30 <setVerticalLeds+0x60>
        HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d20:	480f      	ldr	r0, [pc, #60]	; (8000d60 <setVerticalLeds+0x90>)
 8000d22:	f001 fa48 	bl	80021b6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000d26:	2201      	movs	r2, #1
 8000d28:	2108      	movs	r1, #8
 8000d2a:	480e      	ldr	r0, [pc, #56]	; (8000d64 <setVerticalLeds+0x94>)
 8000d2c:	f001 fa43 	bl	80021b6 <HAL_GPIO_WritePin>
    }
    if(red==RESET && green==RESET && yellow==RESET){
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d110      	bne.n	8000d58 <setVerticalLeds+0x88>
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d10d      	bne.n	8000d58 <setVerticalLeds+0x88>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10a      	bne.n	8000d58 <setVerticalLeds+0x88>
        HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d48:	4805      	ldr	r0, [pc, #20]	; (8000d60 <setVerticalLeds+0x90>)
 8000d4a:	f001 fa34 	bl	80021b6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2108      	movs	r1, #8
 8000d52:	4804      	ldr	r0, [pc, #16]	; (8000d64 <setVerticalLeds+0x94>)
 8000d54:	f001 fa2f 	bl	80021b6 <HAL_GPIO_WritePin>
    }
}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40010800 	.word	0x40010800
 8000d64:	40010c00 	.word	0x40010c00

08000d68 <setPedesLeds>:

void setPedesLeds(int red, int green, int mixed){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
    if(red == SET){
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d10b      	bne.n	8000d92 <setPedesLeds+0x2a>
        HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d80:	481f      	ldr	r0, [pc, #124]	; (8000e00 <setPedesLeds+0x98>)
 8000d82:	f001 fa18 	bl	80021b6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d8c:	481d      	ldr	r0, [pc, #116]	; (8000e04 <setPedesLeds+0x9c>)
 8000d8e:	f001 fa12 	bl	80021b6 <HAL_GPIO_WritePin>
    }
    if(green == SET){
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d10b      	bne.n	8000db0 <setPedesLeds+0x48>
        HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d9e:	4818      	ldr	r0, [pc, #96]	; (8000e00 <setPedesLeds+0x98>)
 8000da0:	f001 fa09 	bl	80021b6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000daa:	4816      	ldr	r0, [pc, #88]	; (8000e04 <setPedesLeds+0x9c>)
 8000dac:	f001 fa03 	bl	80021b6 <HAL_GPIO_WritePin>
    }
    if(mixed == SET){
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d10b      	bne.n	8000dce <setPedesLeds+0x66>
        HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dbc:	4810      	ldr	r0, [pc, #64]	; (8000e00 <setPedesLeds+0x98>)
 8000dbe:	f001 f9fa 	bl	80021b6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc8:	480e      	ldr	r0, [pc, #56]	; (8000e04 <setPedesLeds+0x9c>)
 8000dca:	f001 f9f4 	bl	80021b6 <HAL_GPIO_WritePin>
    }
    if(red==RESET && green==RESET && mixed==RESET){
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d111      	bne.n	8000df8 <setPedesLeds+0x90>
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10e      	bne.n	8000df8 <setPedesLeds+0x90>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d10b      	bne.n	8000df8 <setPedesLeds+0x90>
        HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de6:	4806      	ldr	r0, [pc, #24]	; (8000e00 <setPedesLeds+0x98>)
 8000de8:	f001 f9e5 	bl	80021b6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df2:	4804      	ldr	r0, [pc, #16]	; (8000e04 <setPedesLeds+0x9c>)
 8000df4:	f001 f9df 	bl	80021b6 <HAL_GPIO_WritePin>
    }
//    HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
//    HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);	Toggle Led error
}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40010c00 	.word	0x40010c00
 8000e04:	40010800 	.word	0x40010800

08000e08 <wrapper>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void wrapper(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  timerRun(0); // led duration
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f000 fcbb 	bl	8001788 <timerRun>
  timerRun(1); //  7-segment counter 1s
 8000e12:	2001      	movs	r0, #1
 8000e14:	f000 fcb8 	bl	8001788 <timerRun>
  timerRun(3); // blinking led
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f000 fcb5 	bl	8001788 <timerRun>
  timerRun(8);
 8000e1e:	2008      	movs	r0, #8
 8000e20:	f000 fcb2 	bl	8001788 <timerRun>
  timerRun(9); // blinking led
 8000e24:	2009      	movs	r0, #9
 8000e26:	f000 fcaf 	bl	8001788 <timerRun>
  getKeyInput(0);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff f9b8 	bl	80001a0 <getKeyInput>
  getKeyInput(1);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f7ff f9b5 	bl	80001a0 <getKeyInput>
  getKeyInput(2);
 8000e36:	2002      	movs	r0, #2
 8000e38:	f7ff f9b2 	bl	80001a0 <getKeyInput>
  getKeyInput(3);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f7ff f9af 	bl	80001a0 <getKeyInput>
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e56:	d101      	bne.n	8000e5c <HAL_TIM_PeriodElapsedCallback+0x16>
    SCH_Update();
 8000e58:	f000 f9cc 	bl	80011f4 <SCH_Update>
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e68:	f000 fe9a 	bl	8001ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6c:	f000 f820 	bl	8000eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e70:	f000 f94c 	bl	800110c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e74:	f000 f85e 	bl	8000f34 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e78:	f000 f8a8 	bl	8000fcc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000e7c:	f000 f91c 	bl	80010b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SCH_Add_Task(wrapper, 0, 1);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2100      	movs	r1, #0
 8000e84:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <main+0x40>)
 8000e86:	f000 f9dd 	bl	8001244 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run, 0, 1);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <main+0x44>)
 8000e90:	f000 f9d8 	bl	8001244 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 1);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2100      	movs	r1, #0
 8000e98:	4804      	ldr	r0, [pc, #16]	; (8000eac <main+0x48>)
 8000e9a:	f000 f9d3 	bl	8001244 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    SCH_Dispatch_Tasks();
 8000e9e:	f000 fc1b 	bl	80016d8 <SCH_Dispatch_Tasks>
 8000ea2:	e7fc      	b.n	8000e9e <main+0x3a>
 8000ea4:	08000e09 	.word	0x08000e09
 8000ea8:	080002c1 	.word	0x080002c1
 8000eac:	080008a1 	.word	0x080008a1

08000eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b090      	sub	sp, #64	; 0x40
 8000eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb6:	f107 0318 	add.w	r3, r7, #24
 8000eba:	2228      	movs	r2, #40	; 0x28
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f002 feae 	bl	8003c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eda:	2310      	movs	r3, #16
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ee6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000eea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eec:	f107 0318 	add.w	r3, r7, #24
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f001 f979 	bl	80021e8 <HAL_RCC_OscConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000efc:	f000 f974 	bl	80011e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f00:	230f      	movs	r3, #15
 8000f02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f04:	2302      	movs	r3, #2
 8000f06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2102      	movs	r1, #2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 fbe4 	bl	80026e8 <HAL_RCC_ClockConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f26:	f000 f95f 	bl	80011e8 <Error_Handler>
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	3740      	adds	r7, #64	; 0x40
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f48:	463b      	mov	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f50:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <MX_TIM2_Init+0x94>)
 8000f52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <MX_TIM2_Init+0x94>)
 8000f5a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <MX_TIM2_Init+0x94>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <MX_TIM2_Init+0x94>)
 8000f68:	223f      	movs	r2, #63	; 0x3f
 8000f6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <MX_TIM2_Init+0x94>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <MX_TIM2_Init+0x94>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f78:	4813      	ldr	r0, [pc, #76]	; (8000fc8 <MX_TIM2_Init+0x94>)
 8000f7a:	f001 fd43 	bl	8002a04 <HAL_TIM_Base_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f84:	f000 f930 	bl	80011e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	4619      	mov	r1, r3
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <MX_TIM2_Init+0x94>)
 8000f96:	f002 f849 	bl	800302c <HAL_TIM_ConfigClockSource>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fa0:	f000 f922 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fac:	463b      	mov	r3, r7
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_TIM2_Init+0x94>)
 8000fb2:	f002 fbcb 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fbc:	f000 f914 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200002b0 	.word	0x200002b0

08000fcc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08e      	sub	sp, #56	; 0x38
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe0:	f107 0320 	add.w	r3, r7, #32
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
 8000ff8:	615a      	str	r2, [r3, #20]
 8000ffa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ffc:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <MX_TIM3_Init+0xe4>)
 8000ffe:	4a2d      	ldr	r2, [pc, #180]	; (80010b4 <MX_TIM3_Init+0xe8>)
 8001000:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1799;
 8001002:	4b2b      	ldr	r3, [pc, #172]	; (80010b0 <MX_TIM3_Init+0xe4>)
 8001004:	f240 7207 	movw	r2, #1799	; 0x707
 8001008:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100a:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <MX_TIM3_Init+0xe4>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <MX_TIM3_Init+0xe4>)
 8001012:	2264      	movs	r2, #100	; 0x64
 8001014:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001016:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <MX_TIM3_Init+0xe4>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <MX_TIM3_Init+0xe4>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001022:	4823      	ldr	r0, [pc, #140]	; (80010b0 <MX_TIM3_Init+0xe4>)
 8001024:	f001 fcee 	bl	8002a04 <HAL_TIM_Base_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800102e:	f000 f8db 	bl	80011e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001038:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800103c:	4619      	mov	r1, r3
 800103e:	481c      	ldr	r0, [pc, #112]	; (80010b0 <MX_TIM3_Init+0xe4>)
 8001040:	f001 fff4 	bl	800302c <HAL_TIM_ConfigClockSource>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800104a:	f000 f8cd 	bl	80011e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800104e:	4818      	ldr	r0, [pc, #96]	; (80010b0 <MX_TIM3_Init+0xe4>)
 8001050:	f001 fd27 	bl	8002aa2 <HAL_TIM_PWM_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800105a:	f000 f8c5 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001066:	f107 0320 	add.w	r3, r7, #32
 800106a:	4619      	mov	r1, r3
 800106c:	4810      	ldr	r0, [pc, #64]	; (80010b0 <MX_TIM3_Init+0xe4>)
 800106e:	f002 fb6d 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001078:	f000 f8b6 	bl	80011e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800107c:	2360      	movs	r3, #96	; 0x60
 800107e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2200      	movs	r2, #0
 8001090:	4619      	mov	r1, r3
 8001092:	4807      	ldr	r0, [pc, #28]	; (80010b0 <MX_TIM3_Init+0xe4>)
 8001094:	f001 ff08 	bl	8002ea8 <HAL_TIM_PWM_ConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800109e:	f000 f8a3 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010a2:	4803      	ldr	r0, [pc, #12]	; (80010b0 <MX_TIM3_Init+0xe4>)
 80010a4:	f000 fc02 	bl	80018ac <HAL_TIM_MspPostInit>

}
 80010a8:	bf00      	nop
 80010aa:	3738      	adds	r7, #56	; 0x38
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000268 	.word	0x20000268
 80010b4:	40000400 	.word	0x40000400

080010b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_USART2_UART_Init+0x4c>)
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <MX_USART2_UART_Init+0x50>)
 80010c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <MX_USART2_UART_Init+0x4c>)
 80010c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_USART2_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_USART2_UART_Init+0x4c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <MX_USART2_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_USART2_UART_Init+0x4c>)
 80010de:	220c      	movs	r2, #12
 80010e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <MX_USART2_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_USART2_UART_Init+0x4c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_USART2_UART_Init+0x4c>)
 80010f0:	f002 fb9c 	bl	800382c <HAL_UART_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010fa:	f000 f875 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200002f8 	.word	0x200002f8
 8001108:	40004400 	.word	0x40004400

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <MX_GPIO_Init+0xd0>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a2d      	ldr	r2, [pc, #180]	; (80011dc <MX_GPIO_Init+0xd0>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MX_GPIO_Init+0xd0>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <MX_GPIO_Init+0xd0>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a27      	ldr	r2, [pc, #156]	; (80011dc <MX_GPIO_Init+0xd0>)
 800113e:	f043 0308 	orr.w	r3, r3, #8
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b25      	ldr	r3, [pc, #148]	; (80011dc <MX_GPIO_Init+0xd0>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001156:	4822      	ldr	r0, [pc, #136]	; (80011e0 <MX_GPIO_Init+0xd4>)
 8001158:	f001 f82d 	bl	80021b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001162:	4820      	ldr	r0, [pc, #128]	; (80011e4 <MX_GPIO_Init+0xd8>)
 8001164:	f001 f827 	bl	80021b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8001168:	2313      	movs	r3, #19
 800116a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001170:	2301      	movs	r3, #1
 8001172:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	4619      	mov	r1, r3
 800117a:	481a      	ldr	r0, [pc, #104]	; (80011e4 <MX_GPIO_Init+0xd8>)
 800117c:	f000 fe80 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8001180:	2301      	movs	r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001188:	2301      	movs	r3, #1
 800118a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	4619      	mov	r1, r3
 8001192:	4813      	ldr	r0, [pc, #76]	; (80011e0 <MX_GPIO_Init+0xd4>)
 8001194:	f000 fe74 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8001198:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800119c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2302      	movs	r3, #2
 80011a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	4619      	mov	r1, r3
 80011b0:	480b      	ldr	r0, [pc, #44]	; (80011e0 <MX_GPIO_Init+0xd4>)
 80011b2:	f000 fe65 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 80011b6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80011ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	2301      	movs	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2302      	movs	r3, #2
 80011c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	4619      	mov	r1, r3
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_GPIO_Init+0xd8>)
 80011d0:	f000 fe56 	bl	8001e80 <HAL_GPIO_Init>

}
 80011d4:	bf00      	nop
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40010c00 	.word	0x40010c00
 80011e4:	40010800 	.word	0x40010800

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <Error_Handler+0x8>
	...

080011f4 <SCH_Update>:


void SCH_Init(void){
}

void SCH_Update(void){
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
	// Check if there is a task at this location
	count_SCH_Update ++;
 80011f8:	4b10      	ldr	r3, [pc, #64]	; (800123c <SCH_Update+0x48>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	3301      	adds	r3, #1
 80011fe:	4a0f      	ldr	r2, [pc, #60]	; (800123c <SCH_Update+0x48>)
 8001200:	6013      	str	r3, [r2, #0]
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <SCH_Update+0x4c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d013      	beq.n	8001232 <SCH_Update+0x3e>
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <SCH_Update+0x4c>)
 800120c:	7b1b      	ldrb	r3, [r3, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10f      	bne.n	8001232 <SCH_Update+0x3e>
		if(SCH_tasks_G[0].Delay > 0){
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <SCH_Update+0x4c>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <SCH_Update+0x30>
			SCH_tasks_G[0].Delay = SCH_tasks_G[0].Delay - 1;
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <SCH_Update+0x4c>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	4a07      	ldr	r2, [pc, #28]	; (8001240 <SCH_Update+0x4c>)
 8001222:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <SCH_Update+0x4c>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d102      	bne.n	8001232 <SCH_Update+0x3e>
			SCH_tasks_G[0].RunMe = 1;
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SCH_Update+0x4c>)
 800122e:	2201      	movs	r2, #1
 8001230:	731a      	strb	r2, [r3, #12]
		}
	}
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	200001f8 	.word	0x200001f8
 8001240:	2000012c 	.word	0x2000012c

08001244 <SCH_Add_Task>:
uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b089      	sub	sp, #36	; 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	77fb      	strb	r3, [r7, #31]
	uint32_t sumDelay = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]

	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 800125c:	2300      	movs	r3, #0
 800125e:	77fb      	strb	r3, [r7, #31]
 8001260:	e133      	b.n	80014ca <SCH_Add_Task+0x286>
		sumDelay = sumDelay + SCH_tasks_G[newTaskIndex].Delay;
 8001262:	7ffa      	ldrb	r2, [r7, #31]
 8001264:	49a1      	ldr	r1, [pc, #644]	; (80014ec <SCH_Add_Task+0x2a8>)
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	440b      	add	r3, r1
 8001270:	3304      	adds	r3, #4
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4413      	add	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
		if(sumDelay > DELAY){
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	429a      	cmp	r2, r3
 8001280:	f240 80c1 	bls.w	8001406 <SCH_Add_Task+0x1c2>
			newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 8001284:	7ffa      	ldrb	r2, [r7, #31]
 8001286:	4999      	ldr	r1, [pc, #612]	; (80014ec <SCH_Add_Task+0x2a8>)
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	440b      	add	r3, r1
 8001292:	3304      	adds	r3, #4
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	4413      	add	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
			SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 80012a0:	7ffa      	ldrb	r2, [r7, #31]
 80012a2:	69b9      	ldr	r1, [r7, #24]
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	1ac9      	subs	r1, r1, r3
 80012a8:	4890      	ldr	r0, [pc, #576]	; (80014ec <SCH_Add_Task+0x2a8>)
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4403      	add	r3, r0
 80012b4:	3304      	adds	r3, #4
 80012b6:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 80012b8:	2309      	movs	r3, #9
 80012ba:	75fb      	strb	r3, [r7, #23]
 80012bc:	e04c      	b.n	8001358 <SCH_Add_Task+0x114>
//				if(SCH_tasks_G[i - 1].pTask != 0)
				{
					SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 80012be:	7dfb      	ldrb	r3, [r7, #23]
 80012c0:	1e59      	subs	r1, r3, #1
 80012c2:	7dfa      	ldrb	r2, [r7, #23]
 80012c4:	4889      	ldr	r0, [pc, #548]	; (80014ec <SCH_Add_Task+0x2a8>)
 80012c6:	460b      	mov	r3, r1
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	440b      	add	r3, r1
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4403      	add	r3, r0
 80012d0:	6819      	ldr	r1, [r3, #0]
 80012d2:	4886      	ldr	r0, [pc, #536]	; (80014ec <SCH_Add_Task+0x2a8>)
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4403      	add	r3, r0
 80012de:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	1e59      	subs	r1, r3, #1
 80012e4:	7dfa      	ldrb	r2, [r7, #23]
 80012e6:	4881      	ldr	r0, [pc, #516]	; (80014ec <SCH_Add_Task+0x2a8>)
 80012e8:	460b      	mov	r3, r1
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	440b      	add	r3, r1
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4403      	add	r3, r0
 80012f2:	3308      	adds	r3, #8
 80012f4:	6819      	ldr	r1, [r3, #0]
 80012f6:	487d      	ldr	r0, [pc, #500]	; (80014ec <SCH_Add_Task+0x2a8>)
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4403      	add	r3, r0
 8001302:	3308      	adds	r3, #8
 8001304:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 8001306:	7dfb      	ldrb	r3, [r7, #23]
 8001308:	1e59      	subs	r1, r3, #1
 800130a:	7dfa      	ldrb	r2, [r7, #23]
 800130c:	4877      	ldr	r0, [pc, #476]	; (80014ec <SCH_Add_Task+0x2a8>)
 800130e:	460b      	mov	r3, r1
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	440b      	add	r3, r1
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4403      	add	r3, r0
 8001318:	3304      	adds	r3, #4
 800131a:	6819      	ldr	r1, [r3, #0]
 800131c:	4873      	ldr	r0, [pc, #460]	; (80014ec <SCH_Add_Task+0x2a8>)
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4403      	add	r3, r0
 8001328:	3304      	adds	r3, #4
 800132a:	6019      	str	r1, [r3, #0]
//					SCH_tasks_G[i].RunMe = SCH_tasks_G[i - 1].RunMe;
					SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 800132c:	7dfb      	ldrb	r3, [r7, #23]
 800132e:	1e59      	subs	r1, r3, #1
 8001330:	7dfa      	ldrb	r2, [r7, #23]
 8001332:	486e      	ldr	r0, [pc, #440]	; (80014ec <SCH_Add_Task+0x2a8>)
 8001334:	460b      	mov	r3, r1
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4403      	add	r3, r0
 800133e:	3310      	adds	r3, #16
 8001340:	6819      	ldr	r1, [r3, #0]
 8001342:	486a      	ldr	r0, [pc, #424]	; (80014ec <SCH_Add_Task+0x2a8>)
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4403      	add	r3, r0
 800134e:	3310      	adds	r3, #16
 8001350:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 8001352:	7dfb      	ldrb	r3, [r7, #23]
 8001354:	3b01      	subs	r3, #1
 8001356:	75fb      	strb	r3, [r7, #23]
 8001358:	7dfa      	ldrb	r2, [r7, #23]
 800135a:	7ffb      	ldrb	r3, [r7, #31]
 800135c:	429a      	cmp	r2, r3
 800135e:	d8ae      	bhi.n	80012be <SCH_Add_Task+0x7a>
				}
			}
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8001360:	7ffa      	ldrb	r2, [r7, #31]
 8001362:	4962      	ldr	r1, [pc, #392]	; (80014ec <SCH_Add_Task+0x2a8>)
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Delay = newDelay;
 8001372:	7ffa      	ldrb	r2, [r7, #31]
 8001374:	495d      	ldr	r1, [pc, #372]	; (80014ec <SCH_Add_Task+0x2a8>)
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	440b      	add	r3, r1
 8001380:	3304      	adds	r3, #4
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 8001386:	7ffa      	ldrb	r2, [r7, #31]
 8001388:	4958      	ldr	r1, [pc, #352]	; (80014ec <SCH_Add_Task+0x2a8>)
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	440b      	add	r3, r1
 8001394:	3308      	adds	r3, #8
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	601a      	str	r2, [r3, #0]
			if(SCH_tasks_G[newTaskIndex].Delay == 0){
 800139a:	7ffa      	ldrb	r2, [r7, #31]
 800139c:	4953      	ldr	r1, [pc, #332]	; (80014ec <SCH_Add_Task+0x2a8>)
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	3304      	adds	r3, #4
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d10a      	bne.n	80013c6 <SCH_Add_Task+0x182>
				SCH_tasks_G[newTaskIndex].RunMe = 1;
 80013b0:	7ffa      	ldrb	r2, [r7, #31]
 80013b2:	494e      	ldr	r1, [pc, #312]	; (80014ec <SCH_Add_Task+0x2a8>)
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	330c      	adds	r3, #12
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
 80013c4:	e009      	b.n	80013da <SCH_Add_Task+0x196>
			} else {
				SCH_tasks_G[newTaskIndex].RunMe = 0;
 80013c6:	7ffa      	ldrb	r2, [r7, #31]
 80013c8:	4948      	ldr	r1, [pc, #288]	; (80014ec <SCH_Add_Task+0x2a8>)
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	440b      	add	r3, r1
 80013d4:	330c      	adds	r3, #12
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
			}
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 80013da:	7ffc      	ldrb	r4, [r7, #31]
 80013dc:	f000 f9a4 	bl	8001728 <Get_New_Task_ID>
 80013e0:	4602      	mov	r2, r0
 80013e2:	4942      	ldr	r1, [pc, #264]	; (80014ec <SCH_Add_Task+0x2a8>)
 80013e4:	4623      	mov	r3, r4
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4423      	add	r3, r4
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	3310      	adds	r3, #16
 80013f0:	601a      	str	r2, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 80013f2:	7ffa      	ldrb	r2, [r7, #31]
 80013f4:	493d      	ldr	r1, [pc, #244]	; (80014ec <SCH_Add_Task+0x2a8>)
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	440b      	add	r3, r1
 8001400:	3310      	adds	r3, #16
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	e06e      	b.n	80014e4 <SCH_Add_Task+0x2a0>
		} else {
			if(SCH_tasks_G[newTaskIndex].pTask == 0x0000){
 8001406:	7ffa      	ldrb	r2, [r7, #31]
 8001408:	4938      	ldr	r1, [pc, #224]	; (80014ec <SCH_Add_Task+0x2a8>)
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	440b      	add	r3, r1
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d154      	bne.n	80014c4 <SCH_Add_Task+0x280>
				SCH_tasks_G[newTaskIndex].pTask = pFunction;
 800141a:	7ffa      	ldrb	r2, [r7, #31]
 800141c:	4933      	ldr	r1, [pc, #204]	; (80014ec <SCH_Add_Task+0x2a8>)
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	440b      	add	r3, r1
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 800142c:	7ffa      	ldrb	r2, [r7, #31]
 800142e:	68b9      	ldr	r1, [r7, #8]
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	1ac9      	subs	r1, r1, r3
 8001434:	482d      	ldr	r0, [pc, #180]	; (80014ec <SCH_Add_Task+0x2a8>)
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4403      	add	r3, r0
 8001440:	3304      	adds	r3, #4
 8001442:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[newTaskIndex].Period = PERIOD;
 8001444:	7ffa      	ldrb	r2, [r7, #31]
 8001446:	4929      	ldr	r1, [pc, #164]	; (80014ec <SCH_Add_Task+0x2a8>)
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	440b      	add	r3, r1
 8001452:	3308      	adds	r3, #8
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	601a      	str	r2, [r3, #0]
				if(SCH_tasks_G[newTaskIndex].Delay == 0){
 8001458:	7ffa      	ldrb	r2, [r7, #31]
 800145a:	4924      	ldr	r1, [pc, #144]	; (80014ec <SCH_Add_Task+0x2a8>)
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	3304      	adds	r3, #4
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10a      	bne.n	8001484 <SCH_Add_Task+0x240>
					SCH_tasks_G[newTaskIndex].RunMe = 1;
 800146e:	7ffa      	ldrb	r2, [r7, #31]
 8001470:	491e      	ldr	r1, [pc, #120]	; (80014ec <SCH_Add_Task+0x2a8>)
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	440b      	add	r3, r1
 800147c:	330c      	adds	r3, #12
 800147e:	2201      	movs	r2, #1
 8001480:	701a      	strb	r2, [r3, #0]
 8001482:	e009      	b.n	8001498 <SCH_Add_Task+0x254>
				} else {
					SCH_tasks_G[newTaskIndex].RunMe = 0;
 8001484:	7ffa      	ldrb	r2, [r7, #31]
 8001486:	4919      	ldr	r1, [pc, #100]	; (80014ec <SCH_Add_Task+0x2a8>)
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	330c      	adds	r3, #12
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
				}
				SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 8001498:	7ffc      	ldrb	r4, [r7, #31]
 800149a:	f000 f945 	bl	8001728 <Get_New_Task_ID>
 800149e:	4602      	mov	r2, r0
 80014a0:	4912      	ldr	r1, [pc, #72]	; (80014ec <SCH_Add_Task+0x2a8>)
 80014a2:	4623      	mov	r3, r4
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4423      	add	r3, r4
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	3310      	adds	r3, #16
 80014ae:	601a      	str	r2, [r3, #0]
				return SCH_tasks_G[newTaskIndex].TaskID;
 80014b0:	7ffa      	ldrb	r2, [r7, #31]
 80014b2:	490e      	ldr	r1, [pc, #56]	; (80014ec <SCH_Add_Task+0x2a8>)
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	3310      	adds	r3, #16
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	e00f      	b.n	80014e4 <SCH_Add_Task+0x2a0>
	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 80014c4:	7ffb      	ldrb	r3, [r7, #31]
 80014c6:	3301      	adds	r3, #1
 80014c8:	77fb      	strb	r3, [r7, #31]
 80014ca:	7ffb      	ldrb	r3, [r7, #31]
 80014cc:	2b09      	cmp	r3, #9
 80014ce:	f67f aec8 	bls.w	8001262 <SCH_Add_Task+0x1e>
			}
		}
	}
	return SCH_tasks_G[newTaskIndex].TaskID;
 80014d2:	7ffa      	ldrb	r2, [r7, #31]
 80014d4:	4905      	ldr	r1, [pc, #20]	; (80014ec <SCH_Add_Task+0x2a8>)
 80014d6:	4613      	mov	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	440b      	add	r3, r1
 80014e0:	3310      	adds	r3, #16
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3724      	adds	r7, #36	; 0x24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd90      	pop	{r4, r7, pc}
 80014ec:	2000012c 	.word	0x2000012c

080014f0 <SCH_Delete_Task>:


uint8_t SCH_Delete_Task(uint32_t taskID){
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	737b      	strb	r3, [r7, #13]
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 80e2 	beq.w	80016c8 <SCH_Delete_Task+0x1d8>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]
 8001508:	e0da      	b.n	80016c0 <SCH_Delete_Task+0x1d0>
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	4971      	ldr	r1, [pc, #452]	; (80016d4 <SCH_Delete_Task+0x1e4>)
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	3310      	adds	r3, #16
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	429a      	cmp	r2, r3
 8001520:	f040 80cb 	bne.w	80016ba <SCH_Delete_Task+0x1ca>
				Return_code = 1;
 8001524:	2301      	movs	r3, #1
 8001526:	737b      	strb	r3, [r7, #13]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d02b      	beq.n	8001586 <SCH_Delete_Task+0x96>
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	2b08      	cmp	r3, #8
 8001532:	d828      	bhi.n	8001586 <SCH_Delete_Task+0x96>
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	4966      	ldr	r1, [pc, #408]	; (80016d4 <SCH_Delete_Task+0x1e4>)
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d01d      	beq.n	8001586 <SCH_Delete_Task+0x96>
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	1c5a      	adds	r2, r3, #1
 800154e:	4961      	ldr	r1, [pc, #388]	; (80016d4 <SCH_Delete_Task+0x1e4>)
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	3304      	adds	r3, #4
 800155c:	6819      	ldr	r1, [r3, #0]
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	485c      	ldr	r0, [pc, #368]	; (80016d4 <SCH_Delete_Task+0x1e4>)
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4403      	add	r3, r0
 800156c:	3304      	adds	r3, #4
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	3201      	adds	r2, #1
 8001574:	4419      	add	r1, r3
 8001576:	4857      	ldr	r0, [pc, #348]	; (80016d4 <SCH_Delete_Task+0x1e4>)
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4403      	add	r3, r0
 8001582:	3304      	adds	r3, #4
 8001584:	6019      	str	r1, [r3, #0]
					}
				}

				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	73bb      	strb	r3, [r7, #14]
 800158a:	e060      	b.n	800164e <SCH_Delete_Task+0x15e>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 800158c:	7bbb      	ldrb	r3, [r7, #14]
 800158e:	1c59      	adds	r1, r3, #1
 8001590:	7bba      	ldrb	r2, [r7, #14]
 8001592:	4850      	ldr	r0, [pc, #320]	; (80016d4 <SCH_Delete_Task+0x1e4>)
 8001594:	460b      	mov	r3, r1
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4403      	add	r3, r0
 800159e:	6819      	ldr	r1, [r3, #0]
 80015a0:	484c      	ldr	r0, [pc, #304]	; (80016d4 <SCH_Delete_Task+0x1e4>)
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4403      	add	r3, r0
 80015ac:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 80015ae:	7bbb      	ldrb	r3, [r7, #14]
 80015b0:	1c59      	adds	r1, r3, #1
 80015b2:	7bba      	ldrb	r2, [r7, #14]
 80015b4:	4847      	ldr	r0, [pc, #284]	; (80016d4 <SCH_Delete_Task+0x1e4>)
 80015b6:	460b      	mov	r3, r1
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4403      	add	r3, r0
 80015c0:	3308      	adds	r3, #8
 80015c2:	6819      	ldr	r1, [r3, #0]
 80015c4:	4843      	ldr	r0, [pc, #268]	; (80016d4 <SCH_Delete_Task+0x1e4>)
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4403      	add	r3, r0
 80015d0:	3308      	adds	r3, #8
 80015d2:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 80015d4:	7bbb      	ldrb	r3, [r7, #14]
 80015d6:	1c59      	adds	r1, r3, #1
 80015d8:	7bba      	ldrb	r2, [r7, #14]
 80015da:	483e      	ldr	r0, [pc, #248]	; (80016d4 <SCH_Delete_Task+0x1e4>)
 80015dc:	460b      	mov	r3, r1
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4403      	add	r3, r0
 80015e6:	3304      	adds	r3, #4
 80015e8:	6819      	ldr	r1, [r3, #0]
 80015ea:	483a      	ldr	r0, [pc, #232]	; (80016d4 <SCH_Delete_Task+0x1e4>)
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4403      	add	r3, r0
 80015f6:	3304      	adds	r3, #4
 80015f8:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 80015fa:	7bbb      	ldrb	r3, [r7, #14]
 80015fc:	1c59      	adds	r1, r3, #1
 80015fe:	7bba      	ldrb	r2, [r7, #14]
 8001600:	4834      	ldr	r0, [pc, #208]	; (80016d4 <SCH_Delete_Task+0x1e4>)
 8001602:	460b      	mov	r3, r1
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4403      	add	r3, r0
 800160c:	330c      	adds	r3, #12
 800160e:	7818      	ldrb	r0, [r3, #0]
 8001610:	4930      	ldr	r1, [pc, #192]	; (80016d4 <SCH_Delete_Task+0x1e4>)
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	440b      	add	r3, r1
 800161c:	330c      	adds	r3, #12
 800161e:	4602      	mov	r2, r0
 8001620:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 8001622:	7bbb      	ldrb	r3, [r7, #14]
 8001624:	1c59      	adds	r1, r3, #1
 8001626:	7bba      	ldrb	r2, [r7, #14]
 8001628:	482a      	ldr	r0, [pc, #168]	; (80016d4 <SCH_Delete_Task+0x1e4>)
 800162a:	460b      	mov	r3, r1
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4403      	add	r3, r0
 8001634:	3310      	adds	r3, #16
 8001636:	6819      	ldr	r1, [r3, #0]
 8001638:	4826      	ldr	r0, [pc, #152]	; (80016d4 <SCH_Delete_Task+0x1e4>)
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4403      	add	r3, r0
 8001644:	3310      	adds	r3, #16
 8001646:	6019      	str	r1, [r3, #0]
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 8001648:	7bbb      	ldrb	r3, [r7, #14]
 800164a:	3301      	adds	r3, #1
 800164c:	73bb      	strb	r3, [r7, #14]
 800164e:	7bbb      	ldrb	r3, [r7, #14]
 8001650:	2b08      	cmp	r3, #8
 8001652:	d99b      	bls.n	800158c <SCH_Delete_Task+0x9c>
				}
				SCH_tasks_G[j].pTask = 0;
 8001654:	7bba      	ldrb	r2, [r7, #14]
 8001656:	491f      	ldr	r1, [pc, #124]	; (80016d4 <SCH_Delete_Task+0x1e4>)
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Period = 0;
 8001666:	7bba      	ldrb	r2, [r7, #14]
 8001668:	491a      	ldr	r1, [pc, #104]	; (80016d4 <SCH_Delete_Task+0x1e4>)
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	3308      	adds	r3, #8
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Delay = 0;
 800167a:	7bba      	ldrb	r2, [r7, #14]
 800167c:	4915      	ldr	r1, [pc, #84]	; (80016d4 <SCH_Delete_Task+0x1e4>)
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	3304      	adds	r3, #4
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].RunMe = 0;
 800168e:	7bba      	ldrb	r2, [r7, #14]
 8001690:	4910      	ldr	r1, [pc, #64]	; (80016d4 <SCH_Delete_Task+0x1e4>)
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	330c      	adds	r3, #12
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[j].TaskID = 0;
 80016a2:	7bba      	ldrb	r2, [r7, #14]
 80016a4:	490b      	ldr	r1, [pc, #44]	; (80016d4 <SCH_Delete_Task+0x1e4>)
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	3310      	adds	r3, #16
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
				return Return_code;
 80016b6:	7b7b      	ldrb	r3, [r7, #13]
 80016b8:	e007      	b.n	80016ca <SCH_Delete_Task+0x1da>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	3301      	adds	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	2b09      	cmp	r3, #9
 80016c4:	f67f af21 	bls.w	800150a <SCH_Delete_Task+0x1a>
			}
		}
	}
	return Return_code; // return status
 80016c8:	7b7b      	ldrb	r3, [r7, #13]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	2000012c 	.word	0x2000012c

080016d8 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 80016d8:	b5b0      	push	{r4, r5, r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe > 0) {
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <SCH_Dispatch_Tasks+0x4c>)
 80016e0:	7b1b      	ldrb	r3, [r3, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d019      	beq.n	800171a <SCH_Dispatch_Tasks+0x42>
		(*SCH_tasks_G[0].pTask)(); // Run the task
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <SCH_Dispatch_Tasks+0x4c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0; // Reset / reduce RunMe flag
 80016ec:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <SCH_Dispatch_Tasks+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <SCH_Dispatch_Tasks+0x4c>)
 80016f4:	1d3c      	adds	r4, r7, #4
 80016f6:	461d      	mov	r5, r3
 80016f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fc:	682b      	ldr	r3, [r5, #0]
 80016fe:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fef4 	bl	80014f0 <SCH_Delete_Task>
		if (temtask.Period != 0) {
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d005      	beq.n	800171a <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68f9      	ldr	r1, [r7, #12]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fd95 	bl	8001244 <SCH_Add_Task>
		}
	}
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bdb0      	pop	{r4, r5, r7, pc}
 8001722:	bf00      	nop
 8001724:	2000012c 	.word	0x2000012c

08001728 <Get_New_Task_ID>:

static uint32_t Get_New_Task_ID(void){
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	newTaskID++;
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <Get_New_Task_ID+0x2c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	3301      	adds	r3, #1
 8001732:	4a08      	ldr	r2, [pc, #32]	; (8001754 <Get_New_Task_ID+0x2c>)
 8001734:	6013      	str	r3, [r2, #0]
	if(newTaskID == NO_TASK_ID){
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <Get_New_Task_ID+0x2c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d104      	bne.n	8001748 <Get_New_Task_ID+0x20>
		newTaskID++;
 800173e:	4b05      	ldr	r3, [pc, #20]	; (8001754 <Get_New_Task_ID+0x2c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	3301      	adds	r3, #1
 8001744:	4a03      	ldr	r2, [pc, #12]	; (8001754 <Get_New_Task_ID+0x2c>)
 8001746:	6013      	str	r3, [r2, #0]
	}
	return newTaskID;
 8001748:	4b02      	ldr	r3, [pc, #8]	; (8001754 <Get_New_Task_ID+0x2c>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	200001f4 	.word	0x200001f4

08001758 <setTimer>:
#include "software_timer.h"

int timer_counter[10] = {0};
int timer_flag[10] = {0};

void setTimer(int duration, int timerId){
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
	timer_counter[timerId] = duration;
 8001762:	4907      	ldr	r1, [pc, #28]	; (8001780 <setTimer+0x28>)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timerId] = 0;
 800176c:	4a05      	ldr	r2, [pc, #20]	; (8001784 <setTimer+0x2c>)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	2100      	movs	r1, #0
 8001772:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	200001fc 	.word	0x200001fc
 8001784:	20000224 	.word	0x20000224

08001788 <timerRun>:
void timerRun(int timerId){
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	if(timer_counter[timerId] > 0){
 8001790:	4a0f      	ldr	r2, [pc, #60]	; (80017d0 <timerRun+0x48>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001798:	2b00      	cmp	r3, #0
 800179a:	dd13      	ble.n	80017c4 <timerRun+0x3c>
		timer_counter[timerId]--;
 800179c:	4a0c      	ldr	r2, [pc, #48]	; (80017d0 <timerRun+0x48>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a4:	1e5a      	subs	r2, r3, #1
 80017a6:	490a      	ldr	r1, [pc, #40]	; (80017d0 <timerRun+0x48>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[timerId] <= 0){
 80017ae:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <timerRun+0x48>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	dc04      	bgt.n	80017c4 <timerRun+0x3c>
			timer_flag[timerId] = 1;
 80017ba:	4a06      	ldr	r2, [pc, #24]	; (80017d4 <timerRun+0x4c>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2101      	movs	r1, #1
 80017c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	200001fc 	.word	0x200001fc
 80017d4:	20000224 	.word	0x20000224

080017d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_MspInit+0x5c>)
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	4a14      	ldr	r2, [pc, #80]	; (8001834 <HAL_MspInit+0x5c>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6193      	str	r3, [r2, #24]
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_MspInit+0x5c>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <HAL_MspInit+0x5c>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <HAL_MspInit+0x5c>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	61d3      	str	r3, [r2, #28]
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <HAL_MspInit+0x5c>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_MspInit+0x60>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <HAL_MspInit+0x60>)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182a:	bf00      	nop
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	40021000 	.word	0x40021000
 8001838:	40010000 	.word	0x40010000

0800183c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800184c:	d114      	bne.n	8001878 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <HAL_TIM_Base_MspInit+0x68>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <HAL_TIM_Base_MspInit+0x68>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	61d3      	str	r3, [r2, #28]
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_TIM_Base_MspInit+0x68>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	201c      	movs	r0, #28
 800186c:	f000 fad1 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001870:	201c      	movs	r0, #28
 8001872:	f000 faea 	bl	8001e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001876:	e010      	b.n	800189a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <HAL_TIM_Base_MspInit+0x6c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d10b      	bne.n	800189a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_TIM_Base_MspInit+0x68>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <HAL_TIM_Base_MspInit+0x68>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	61d3      	str	r3, [r2, #28]
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_TIM_Base_MspInit+0x68>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40000400 	.word	0x40000400

080018ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a0f      	ldr	r2, [pc, #60]	; (8001904 <HAL_TIM_MspPostInit+0x58>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d117      	bne.n	80018fc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_TIM_MspPostInit+0x5c>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <HAL_TIM_MspPostInit+0x5c>)
 80018d2:	f043 0304 	orr.w	r3, r3, #4
 80018d6:	6193      	str	r3, [r2, #24]
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_TIM_MspPostInit+0x5c>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018e4:	2340      	movs	r3, #64	; 0x40
 80018e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2302      	movs	r3, #2
 80018ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	4619      	mov	r1, r3
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <HAL_TIM_MspPostInit+0x60>)
 80018f8:	f000 fac2 	bl	8001e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018fc:	bf00      	nop
 80018fe:	3720      	adds	r7, #32
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40000400 	.word	0x40000400
 8001908:	40021000 	.word	0x40021000
 800190c:	40010800 	.word	0x40010800

08001910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <HAL_UART_MspInit+0x88>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d12f      	bne.n	8001990 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001930:	4b1a      	ldr	r3, [pc, #104]	; (800199c <HAL_UART_MspInit+0x8c>)
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	4a19      	ldr	r2, [pc, #100]	; (800199c <HAL_UART_MspInit+0x8c>)
 8001936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193a:	61d3      	str	r3, [r2, #28]
 800193c:	4b17      	ldr	r3, [pc, #92]	; (800199c <HAL_UART_MspInit+0x8c>)
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <HAL_UART_MspInit+0x8c>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4a13      	ldr	r2, [pc, #76]	; (800199c <HAL_UART_MspInit+0x8c>)
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	6193      	str	r3, [r2, #24]
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_UART_MspInit+0x8c>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001960:	2304      	movs	r3, #4
 8001962:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	4619      	mov	r1, r3
 8001972:	480b      	ldr	r0, [pc, #44]	; (80019a0 <HAL_UART_MspInit+0x90>)
 8001974:	f000 fa84 	bl	8001e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001978:	2308      	movs	r3, #8
 800197a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4619      	mov	r1, r3
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <HAL_UART_MspInit+0x90>)
 800198c:	f000 fa78 	bl	8001e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001990:	bf00      	nop
 8001992:	3720      	adds	r7, #32
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40004400 	.word	0x40004400
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010800 	.word	0x40010800

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <NMI_Handler+0x4>

080019aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <MemManage_Handler+0x4>

080019b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ea:	f000 f91f 	bl	8001c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <TIM2_IRQHandler+0x10>)
 80019fa:	f001 f94d 	bl	8002c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200002b0 	.word	0x200002b0

08001a08 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	e00a      	b.n	8001a30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a1a:	f3af 8000 	nop.w
 8001a1e:	4601      	mov	r1, r0
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	60ba      	str	r2, [r7, #8]
 8001a26:	b2ca      	uxtb	r2, r1
 8001a28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	dbf0      	blt.n	8001a1a <_read+0x12>
	}

return len;
 8001a38:	687b      	ldr	r3, [r7, #4]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	e009      	b.n	8001a68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	60ba      	str	r2, [r7, #8]
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff f899 	bl	8000b94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	3301      	adds	r3, #1
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	dbf1      	blt.n	8001a54 <_write+0x12>
	}
	return len;
 8001a70:	687b      	ldr	r3, [r7, #4]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <_close>:

int _close(int file)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
	return -1;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aa0:	605a      	str	r2, [r3, #4]
	return 0;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <_isatty>:

int _isatty(int file)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
	return 1;
 8001ab6:	2301      	movs	r3, #1
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr

08001ac2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b085      	sub	sp, #20
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
	return 0;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
	...

08001adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae4:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <_sbrk+0x5c>)
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <_sbrk+0x60>)
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <_sbrk+0x64>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <_sbrk+0x68>)
 8001afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <_sbrk+0x64>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d207      	bcs.n	8001b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b0c:	f002 f85e 	bl	8003bcc <__errno>
 8001b10:	4603      	mov	r3, r0
 8001b12:	220c      	movs	r2, #12
 8001b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	e009      	b.n	8001b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b22:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <_sbrk+0x64>)
 8001b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20005000 	.word	0x20005000
 8001b3c:	00000400 	.word	0x00000400
 8001b40:	2000024c 	.word	0x2000024c
 8001b44:	20000358 	.word	0x20000358

08001b48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <Reset_Handler>:
 8001b54:	f7ff fff8 	bl	8001b48 <SystemInit>
 8001b58:	480b      	ldr	r0, [pc, #44]	; (8001b88 <LoopFillZerobss+0xe>)
 8001b5a:	490c      	ldr	r1, [pc, #48]	; (8001b8c <LoopFillZerobss+0x12>)
 8001b5c:	4a0c      	ldr	r2, [pc, #48]	; (8001b90 <LoopFillZerobss+0x16>)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:
 8001b62:	58d4      	ldr	r4, [r2, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:
 8001b68:	18c4      	adds	r4, r0, r3
 8001b6a:	428c      	cmp	r4, r1
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
 8001b6e:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <LoopFillZerobss+0x1a>)
 8001b70:	4c09      	ldr	r4, [pc, #36]	; (8001b98 <LoopFillZerobss+0x1e>)
 8001b72:	2300      	movs	r3, #0
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:
 8001b7a:	42a2      	cmp	r2, r4
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>
 8001b7e:	f002 f82b 	bl	8003bd8 <__libc_init_array>
 8001b82:	f7ff f96f 	bl	8000e64 <main>
 8001b86:	4770      	bx	lr
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	200000ec 	.word	0x200000ec
 8001b90:	08004d54 	.word	0x08004d54
 8001b94:	200000ec 	.word	0x200000ec
 8001b98:	20000354 	.word	0x20000354

08001b9c <ADC1_2_IRQHandler>:
 8001b9c:	e7fe      	b.n	8001b9c <ADC1_2_IRQHandler>
	...

08001ba0 <HAL_Init>:
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_Init+0x28>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <HAL_Init+0x28>)
 8001baa:	f043 0310 	orr.w	r3, r3, #16
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	f000 f923 	bl	8001dfc <HAL_NVIC_SetPriorityGrouping>
 8001bb6:	200f      	movs	r0, #15
 8001bb8:	f000 f808 	bl	8001bcc <HAL_InitTick>
 8001bbc:	f7ff fe0c 	bl	80017d8 <HAL_MspInit>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40022000 	.word	0x40022000

08001bcc <HAL_InitTick>:
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_InitTick+0x54>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_InitTick+0x58>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 f93b 	bl	8001e66 <HAL_SYSTICK_Config>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_InitTick+0x2e>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00e      	b.n	8001c18 <HAL_InitTick+0x4c>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b0f      	cmp	r3, #15
 8001bfe:	d80a      	bhi.n	8001c16 <HAL_InitTick+0x4a>
 8001c00:	2200      	movs	r2, #0
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f000 f903 	bl	8001e12 <HAL_NVIC_SetPriority>
 8001c0c:	4a06      	ldr	r2, [pc, #24]	; (8001c28 <HAL_InitTick+0x5c>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	2300      	movs	r3, #0
 8001c14:	e000      	b.n	8001c18 <HAL_InitTick+0x4c>
 8001c16:	2301      	movs	r3, #1
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	2000007c 	.word	0x2000007c
 8001c24:	20000084 	.word	0x20000084
 8001c28:	20000080 	.word	0x20000080

08001c2c <HAL_IncTick>:
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <HAL_IncTick+0x1c>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_IncTick+0x20>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	4a03      	ldr	r2, [pc, #12]	; (8001c4c <HAL_IncTick+0x20>)
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	20000084 	.word	0x20000084
 8001c4c:	20000340 	.word	0x20000340

08001c50 <HAL_GetTick>:
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4b02      	ldr	r3, [pc, #8]	; (8001c60 <HAL_GetTick+0x10>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	20000340 	.word	0x20000340

08001c64 <__NVIC_SetPriorityGrouping>:
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c80:	4013      	ands	r3, r2
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	021a      	lsls	r2, r3, #8
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	60d3      	str	r3, [r2, #12]
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_GetPriorityGrouping>:
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_EnableIRQ>:
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	db0b      	blt.n	8001cf2 <__NVIC_EnableIRQ+0x2a>
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	f003 021f 	and.w	r2, r3, #31
 8001ce0:	4906      	ldr	r1, [pc, #24]	; (8001cfc <__NVIC_EnableIRQ+0x34>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	095b      	lsrs	r3, r3, #5
 8001ce8:	2001      	movs	r0, #1
 8001cea:	fa00 f202 	lsl.w	r2, r0, r2
 8001cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	e000e100 	.word	0xe000e100

08001d00 <__NVIC_SetPriority>:
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	71fb      	strb	r3, [r7, #7]
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	db0a      	blt.n	8001d2a <__NVIC_SetPriority+0x2a>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	490c      	ldr	r1, [pc, #48]	; (8001d4c <__NVIC_SetPriority+0x4c>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	0112      	lsls	r2, r2, #4
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	440b      	add	r3, r1
 8001d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001d28:	e00a      	b.n	8001d40 <__NVIC_SetPriority+0x40>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4908      	ldr	r1, [pc, #32]	; (8001d50 <__NVIC_SetPriority+0x50>)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	3b04      	subs	r3, #4
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	761a      	strb	r2, [r3, #24]
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000e100 	.word	0xe000e100
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <NVIC_EncodePriority>:
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	61fb      	str	r3, [r7, #28]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f1c3 0307 	rsb	r3, r3, #7
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	bf28      	it	cs
 8001d72:	2304      	movcs	r3, #4
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d902      	bls.n	8001d84 <NVIC_EncodePriority+0x30>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b03      	subs	r3, #3
 8001d82:	e000      	b.n	8001d86 <NVIC_EncodePriority+0x32>
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	401a      	ands	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43d9      	mvns	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	400b      	ands	r3, r1
 8001dac:	4313      	orrs	r3, r2
 8001dae:	4618      	mov	r0, r3
 8001db0:	3724      	adds	r7, #36	; 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <SysTick_Config>:
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc8:	d301      	bcc.n	8001dce <SysTick_Config+0x16>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00f      	b.n	8001dee <SysTick_Config+0x36>
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <SysTick_Config+0x40>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	6053      	str	r3, [r2, #4]
 8001dd6:	210f      	movs	r1, #15
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f7ff ff90 	bl	8001d00 <__NVIC_SetPriority>
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <SysTick_Config+0x40>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <SysTick_Config+0x40>)
 8001de8:	2207      	movs	r2, #7
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	2300      	movs	r3, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	e000e010 	.word	0xe000e010

08001dfc <HAL_NVIC_SetPriorityGrouping>:
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff2d 	bl	8001c64 <__NVIC_SetPriorityGrouping>
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_SetPriority>:
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	73fb      	strb	r3, [r7, #15]
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	f7ff ff42 	bl	8001cac <__NVIC_GetPriorityGrouping>
 8001e28:	6178      	str	r0, [r7, #20]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	6978      	ldr	r0, [r7, #20]
 8001e30:	f7ff ff90 	bl	8001d54 <NVIC_EncodePriority>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff5f 	bl	8001d00 <__NVIC_SetPriority>
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_EnableIRQ>:
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	71fb      	strb	r3, [r7, #7]
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff35 	bl	8001cc8 <__NVIC_EnableIRQ>
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_SYSTICK_Config>:
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffa2 	bl	8001db8 <SysTick_Config>
 8001e74:	4603      	mov	r3, r0
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_GPIO_Init>:
 8001e80:	b480      	push	{r7}
 8001e82:	b08b      	sub	sp, #44	; 0x2c
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
 8001e92:	e169      	b.n	8002168 <HAL_GPIO_Init+0x2e8>
 8001e94:	2201      	movs	r2, #1
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	69fa      	ldr	r2, [r7, #28]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	f040 8158 	bne.w	8002162 <HAL_GPIO_Init+0x2e2>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4a9a      	ldr	r2, [pc, #616]	; (8002120 <HAL_GPIO_Init+0x2a0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d05e      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001ebc:	4a98      	ldr	r2, [pc, #608]	; (8002120 <HAL_GPIO_Init+0x2a0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d875      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001ec2:	4a98      	ldr	r2, [pc, #608]	; (8002124 <HAL_GPIO_Init+0x2a4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d058      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001ec8:	4a96      	ldr	r2, [pc, #600]	; (8002124 <HAL_GPIO_Init+0x2a4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d86f      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001ece:	4a96      	ldr	r2, [pc, #600]	; (8002128 <HAL_GPIO_Init+0x2a8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d052      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001ed4:	4a94      	ldr	r2, [pc, #592]	; (8002128 <HAL_GPIO_Init+0x2a8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d869      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001eda:	4a94      	ldr	r2, [pc, #592]	; (800212c <HAL_GPIO_Init+0x2ac>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d04c      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001ee0:	4a92      	ldr	r2, [pc, #584]	; (800212c <HAL_GPIO_Init+0x2ac>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d863      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001ee6:	4a92      	ldr	r2, [pc, #584]	; (8002130 <HAL_GPIO_Init+0x2b0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d046      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001eec:	4a90      	ldr	r2, [pc, #576]	; (8002130 <HAL_GPIO_Init+0x2b0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d85d      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001ef2:	2b12      	cmp	r3, #18
 8001ef4:	d82a      	bhi.n	8001f4c <HAL_GPIO_Init+0xcc>
 8001ef6:	2b12      	cmp	r3, #18
 8001ef8:	d859      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001efa:	a201      	add	r2, pc, #4	; (adr r2, 8001f00 <HAL_GPIO_Init+0x80>)
 8001efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f00:	08001f7b 	.word	0x08001f7b
 8001f04:	08001f55 	.word	0x08001f55
 8001f08:	08001f67 	.word	0x08001f67
 8001f0c:	08001fa9 	.word	0x08001fa9
 8001f10:	08001faf 	.word	0x08001faf
 8001f14:	08001faf 	.word	0x08001faf
 8001f18:	08001faf 	.word	0x08001faf
 8001f1c:	08001faf 	.word	0x08001faf
 8001f20:	08001faf 	.word	0x08001faf
 8001f24:	08001faf 	.word	0x08001faf
 8001f28:	08001faf 	.word	0x08001faf
 8001f2c:	08001faf 	.word	0x08001faf
 8001f30:	08001faf 	.word	0x08001faf
 8001f34:	08001faf 	.word	0x08001faf
 8001f38:	08001faf 	.word	0x08001faf
 8001f3c:	08001faf 	.word	0x08001faf
 8001f40:	08001faf 	.word	0x08001faf
 8001f44:	08001f5d 	.word	0x08001f5d
 8001f48:	08001f71 	.word	0x08001f71
 8001f4c:	4a79      	ldr	r2, [pc, #484]	; (8002134 <HAL_GPIO_Init+0x2b4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001f52:	e02c      	b.n	8001fae <HAL_GPIO_Init+0x12e>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	623b      	str	r3, [r7, #32]
 8001f5a:	e029      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	3304      	adds	r3, #4
 8001f62:	623b      	str	r3, [r7, #32]
 8001f64:	e024      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	3308      	adds	r3, #8
 8001f6c:	623b      	str	r3, [r7, #32]
 8001f6e:	e01f      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	330c      	adds	r3, #12
 8001f76:	623b      	str	r3, [r7, #32]
 8001f78:	e01a      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d102      	bne.n	8001f88 <HAL_GPIO_Init+0x108>
 8001f82:	2304      	movs	r3, #4
 8001f84:	623b      	str	r3, [r7, #32]
 8001f86:	e013      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d105      	bne.n	8001f9c <HAL_GPIO_Init+0x11c>
 8001f90:	2308      	movs	r3, #8
 8001f92:	623b      	str	r3, [r7, #32]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	611a      	str	r2, [r3, #16]
 8001f9a:	e009      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	623b      	str	r3, [r7, #32]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69fa      	ldr	r2, [r7, #28]
 8001fa4:	615a      	str	r2, [r3, #20]
 8001fa6:	e003      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	623b      	str	r3, [r7, #32]
 8001fac:	e000      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
 8001fae:	bf00      	nop
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2bff      	cmp	r3, #255	; 0xff
 8001fb4:	d801      	bhi.n	8001fba <HAL_GPIO_Init+0x13a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	e001      	b.n	8001fbe <HAL_GPIO_Init+0x13e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2bff      	cmp	r3, #255	; 0xff
 8001fc4:	d802      	bhi.n	8001fcc <HAL_GPIO_Init+0x14c>
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	e002      	b.n	8001fd2 <HAL_GPIO_Init+0x152>
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	3b08      	subs	r3, #8
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	210f      	movs	r1, #15
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	6a39      	ldr	r1, [r7, #32]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fec:	431a      	orrs	r2, r3
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 80b1 	beq.w	8002162 <HAL_GPIO_Init+0x2e2>
 8002000:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <HAL_GPIO_Init+0x2b8>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4a4c      	ldr	r2, [pc, #304]	; (8002138 <HAL_GPIO_Init+0x2b8>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6193      	str	r3, [r2, #24]
 800200c:	4b4a      	ldr	r3, [pc, #296]	; (8002138 <HAL_GPIO_Init+0x2b8>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	4a48      	ldr	r2, [pc, #288]	; (800213c <HAL_GPIO_Init+0x2bc>)
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	220f      	movs	r2, #15
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4013      	ands	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a40      	ldr	r2, [pc, #256]	; (8002140 <HAL_GPIO_Init+0x2c0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d013      	beq.n	800206c <HAL_GPIO_Init+0x1ec>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a3f      	ldr	r2, [pc, #252]	; (8002144 <HAL_GPIO_Init+0x2c4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00d      	beq.n	8002068 <HAL_GPIO_Init+0x1e8>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a3e      	ldr	r2, [pc, #248]	; (8002148 <HAL_GPIO_Init+0x2c8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d007      	beq.n	8002064 <HAL_GPIO_Init+0x1e4>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a3d      	ldr	r2, [pc, #244]	; (800214c <HAL_GPIO_Init+0x2cc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d101      	bne.n	8002060 <HAL_GPIO_Init+0x1e0>
 800205c:	2303      	movs	r3, #3
 800205e:	e006      	b.n	800206e <HAL_GPIO_Init+0x1ee>
 8002060:	2304      	movs	r3, #4
 8002062:	e004      	b.n	800206e <HAL_GPIO_Init+0x1ee>
 8002064:	2302      	movs	r3, #2
 8002066:	e002      	b.n	800206e <HAL_GPIO_Init+0x1ee>
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <HAL_GPIO_Init+0x1ee>
 800206c:	2300      	movs	r3, #0
 800206e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002070:	f002 0203 	and.w	r2, r2, #3
 8002074:	0092      	lsls	r2, r2, #2
 8002076:	4093      	lsls	r3, r2
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	492f      	ldr	r1, [pc, #188]	; (800213c <HAL_GPIO_Init+0x2bc>)
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	089b      	lsrs	r3, r3, #2
 8002084:	3302      	adds	r3, #2
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <HAL_GPIO_Init+0x226>
 8002098:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	492c      	ldr	r1, [pc, #176]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	608b      	str	r3, [r1, #8]
 80020a4:	e006      	b.n	80020b4 <HAL_GPIO_Init+0x234>
 80020a6:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	4928      	ldr	r1, [pc, #160]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	608b      	str	r3, [r1, #8]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d006      	beq.n	80020ce <HAL_GPIO_Init+0x24e>
 80020c0:	4b23      	ldr	r3, [pc, #140]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	4922      	ldr	r1, [pc, #136]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60cb      	str	r3, [r1, #12]
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x25c>
 80020ce:	4b20      	ldr	r3, [pc, #128]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	491e      	ldr	r1, [pc, #120]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020d8:	4013      	ands	r3, r2
 80020da:	60cb      	str	r3, [r1, #12]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d006      	beq.n	80020f6 <HAL_GPIO_Init+0x276>
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	4918      	ldr	r1, [pc, #96]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
 80020f4:	e006      	b.n	8002104 <HAL_GPIO_Init+0x284>
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	4914      	ldr	r1, [pc, #80]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 8002100:	4013      	ands	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d021      	beq.n	8002154 <HAL_GPIO_Init+0x2d4>
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	490e      	ldr	r1, [pc, #56]	; (8002150 <HAL_GPIO_Init+0x2d0>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	600b      	str	r3, [r1, #0]
 800211c:	e021      	b.n	8002162 <HAL_GPIO_Init+0x2e2>
 800211e:	bf00      	nop
 8002120:	10320000 	.word	0x10320000
 8002124:	10310000 	.word	0x10310000
 8002128:	10220000 	.word	0x10220000
 800212c:	10210000 	.word	0x10210000
 8002130:	10120000 	.word	0x10120000
 8002134:	10110000 	.word	0x10110000
 8002138:	40021000 	.word	0x40021000
 800213c:	40010000 	.word	0x40010000
 8002140:	40010800 	.word	0x40010800
 8002144:	40010c00 	.word	0x40010c00
 8002148:	40011000 	.word	0x40011000
 800214c:	40011400 	.word	0x40011400
 8002150:	40010400 	.word	0x40010400
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_GPIO_Init+0x304>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	43db      	mvns	r3, r3
 800215c:	4909      	ldr	r1, [pc, #36]	; (8002184 <HAL_GPIO_Init+0x304>)
 800215e:	4013      	ands	r3, r2
 8002160:	600b      	str	r3, [r1, #0]
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	3301      	adds	r3, #1
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	f47f ae8e 	bne.w	8001e94 <HAL_GPIO_Init+0x14>
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	372c      	adds	r7, #44	; 0x2c
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	40010400 	.word	0x40010400

08002188 <HAL_GPIO_ReadPin>:
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	887b      	ldrh	r3, [r7, #2]
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <HAL_GPIO_ReadPin+0x1e>
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
 80021a4:	e001      	b.n	80021aa <HAL_GPIO_ReadPin+0x22>
 80021a6:	2300      	movs	r3, #0
 80021a8:	73fb      	strb	r3, [r7, #15]
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <HAL_GPIO_WritePin>:
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	807b      	strh	r3, [r7, #2]
 80021c2:	4613      	mov	r3, r2
 80021c4:	707b      	strb	r3, [r7, #1]
 80021c6:	787b      	ldrb	r3, [r7, #1]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_GPIO_WritePin+0x1e>
 80021cc:	887a      	ldrh	r2, [r7, #2]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	611a      	str	r2, [r3, #16]
 80021d2:	e003      	b.n	80021dc <HAL_GPIO_WritePin+0x26>
 80021d4:	887b      	ldrh	r3, [r7, #2]
 80021d6:	041a      	lsls	r2, r3, #16
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	611a      	str	r2, [r3, #16]
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
	...

080021e8 <HAL_RCC_OscConfig>:
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RCC_OscConfig+0x12>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e26c      	b.n	80026d4 <HAL_RCC_OscConfig+0x4ec>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 8087 	beq.w	8002316 <HAL_RCC_OscConfig+0x12e>
 8002208:	4b92      	ldr	r3, [pc, #584]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b04      	cmp	r3, #4
 8002212:	d00c      	beq.n	800222e <HAL_RCC_OscConfig+0x46>
 8002214:	4b8f      	ldr	r3, [pc, #572]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	2b08      	cmp	r3, #8
 800221e:	d112      	bne.n	8002246 <HAL_RCC_OscConfig+0x5e>
 8002220:	4b8c      	ldr	r3, [pc, #560]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222c:	d10b      	bne.n	8002246 <HAL_RCC_OscConfig+0x5e>
 800222e:	4b89      	ldr	r3, [pc, #548]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d06c      	beq.n	8002314 <HAL_RCC_OscConfig+0x12c>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d168      	bne.n	8002314 <HAL_RCC_OscConfig+0x12c>
 8002242:	2301      	movs	r3, #1
 8002244:	e246      	b.n	80026d4 <HAL_RCC_OscConfig+0x4ec>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224e:	d106      	bne.n	800225e <HAL_RCC_OscConfig+0x76>
 8002250:	4b80      	ldr	r3, [pc, #512]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a7f      	ldr	r2, [pc, #508]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 8002256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	e02e      	b.n	80022bc <HAL_RCC_OscConfig+0xd4>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10c      	bne.n	8002280 <HAL_RCC_OscConfig+0x98>
 8002266:	4b7b      	ldr	r3, [pc, #492]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a7a      	ldr	r2, [pc, #488]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 800226c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b78      	ldr	r3, [pc, #480]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a77      	ldr	r2, [pc, #476]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 8002278:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	e01d      	b.n	80022bc <HAL_RCC_OscConfig+0xd4>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002288:	d10c      	bne.n	80022a4 <HAL_RCC_OscConfig+0xbc>
 800228a:	4b72      	ldr	r3, [pc, #456]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a71      	ldr	r2, [pc, #452]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 8002290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	4b6f      	ldr	r3, [pc, #444]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a6e      	ldr	r2, [pc, #440]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 800229c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	e00b      	b.n	80022bc <HAL_RCC_OscConfig+0xd4>
 80022a4:	4b6b      	ldr	r3, [pc, #428]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a6a      	ldr	r2, [pc, #424]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 80022aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	4b68      	ldr	r3, [pc, #416]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a67      	ldr	r2, [pc, #412]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d013      	beq.n	80022ec <HAL_RCC_OscConfig+0x104>
 80022c4:	f7ff fcc4 	bl	8001c50 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0xf6>
 80022cc:	f7ff fcc0 	bl	8001c50 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	; 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0xf6>
 80022da:	2303      	movs	r3, #3
 80022dc:	e1fa      	b.n	80026d4 <HAL_RCC_OscConfig+0x4ec>
 80022de:	4b5d      	ldr	r3, [pc, #372]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0xe4>
 80022ea:	e014      	b.n	8002316 <HAL_RCC_OscConfig+0x12e>
 80022ec:	f7ff fcb0 	bl	8001c50 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x11e>
 80022f4:	f7ff fcac 	bl	8001c50 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	; 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x11e>
 8002302:	2303      	movs	r3, #3
 8002304:	e1e6      	b.n	80026d4 <HAL_RCC_OscConfig+0x4ec>
 8002306:	4b53      	ldr	r3, [pc, #332]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x10c>
 8002312:	e000      	b.n	8002316 <HAL_RCC_OscConfig+0x12e>
 8002314:	bf00      	nop
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d063      	beq.n	80023ea <HAL_RCC_OscConfig+0x202>
 8002322:	4b4c      	ldr	r3, [pc, #304]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00b      	beq.n	8002346 <HAL_RCC_OscConfig+0x15e>
 800232e:	4b49      	ldr	r3, [pc, #292]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 030c 	and.w	r3, r3, #12
 8002336:	2b08      	cmp	r3, #8
 8002338:	d11c      	bne.n	8002374 <HAL_RCC_OscConfig+0x18c>
 800233a:	4b46      	ldr	r3, [pc, #280]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d116      	bne.n	8002374 <HAL_RCC_OscConfig+0x18c>
 8002346:	4b43      	ldr	r3, [pc, #268]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <HAL_RCC_OscConfig+0x176>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d001      	beq.n	800235e <HAL_RCC_OscConfig+0x176>
 800235a:	2301      	movs	r3, #1
 800235c:	e1ba      	b.n	80026d4 <HAL_RCC_OscConfig+0x4ec>
 800235e:	4b3d      	ldr	r3, [pc, #244]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	4939      	ldr	r1, [pc, #228]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 800236e:	4313      	orrs	r3, r2
 8002370:	600b      	str	r3, [r1, #0]
 8002372:	e03a      	b.n	80023ea <HAL_RCC_OscConfig+0x202>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d020      	beq.n	80023be <HAL_RCC_OscConfig+0x1d6>
 800237c:	4b36      	ldr	r3, [pc, #216]	; (8002458 <HAL_RCC_OscConfig+0x270>)
 800237e:	2201      	movs	r2, #1
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	f7ff fc65 	bl	8001c50 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x1b4>
 800238a:	f7ff fc61 	bl	8001c50 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x1b4>
 8002398:	2303      	movs	r3, #3
 800239a:	e19b      	b.n	80026d4 <HAL_RCC_OscConfig+0x4ec>
 800239c:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x1a2>
 80023a8:	4b2a      	ldr	r3, [pc, #168]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4927      	ldr	r1, [pc, #156]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	600b      	str	r3, [r1, #0]
 80023bc:	e015      	b.n	80023ea <HAL_RCC_OscConfig+0x202>
 80023be:	4b26      	ldr	r3, [pc, #152]	; (8002458 <HAL_RCC_OscConfig+0x270>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	f7ff fc44 	bl	8001c50 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x1f6>
 80023cc:	f7ff fc40 	bl	8001c50 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x1f6>
 80023da:	2303      	movs	r3, #3
 80023dc:	e17a      	b.n	80026d4 <HAL_RCC_OscConfig+0x4ec>
 80023de:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x1e4>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d03a      	beq.n	800246c <HAL_RCC_OscConfig+0x284>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d019      	beq.n	8002432 <HAL_RCC_OscConfig+0x24a>
 80023fe:	4b17      	ldr	r3, [pc, #92]	; (800245c <HAL_RCC_OscConfig+0x274>)
 8002400:	2201      	movs	r2, #1
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	f7ff fc24 	bl	8001c50 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x236>
 800240c:	f7ff fc20 	bl	8001c50 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x236>
 800241a:	2303      	movs	r3, #3
 800241c:	e15a      	b.n	80026d4 <HAL_RCC_OscConfig+0x4ec>
 800241e:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <HAL_RCC_OscConfig+0x26c>)
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x224>
 800242a:	2001      	movs	r0, #1
 800242c:	f000 facc 	bl	80029c8 <RCC_Delay>
 8002430:	e01c      	b.n	800246c <HAL_RCC_OscConfig+0x284>
 8002432:	4b0a      	ldr	r3, [pc, #40]	; (800245c <HAL_RCC_OscConfig+0x274>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	f7ff fc0a 	bl	8001c50 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]
 800243e:	e00f      	b.n	8002460 <HAL_RCC_OscConfig+0x278>
 8002440:	f7ff fc06 	bl	8001c50 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d908      	bls.n	8002460 <HAL_RCC_OscConfig+0x278>
 800244e:	2303      	movs	r3, #3
 8002450:	e140      	b.n	80026d4 <HAL_RCC_OscConfig+0x4ec>
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000
 8002458:	42420000 	.word	0x42420000
 800245c:	42420480 	.word	0x42420480
 8002460:	4b9e      	ldr	r3, [pc, #632]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1e9      	bne.n	8002440 <HAL_RCC_OscConfig+0x258>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80a6 	beq.w	80025c6 <HAL_RCC_OscConfig+0x3de>
 800247a:	2300      	movs	r3, #0
 800247c:	75fb      	strb	r3, [r7, #23]
 800247e:	4b97      	ldr	r3, [pc, #604]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10d      	bne.n	80024a6 <HAL_RCC_OscConfig+0x2be>
 800248a:	4b94      	ldr	r3, [pc, #592]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	4a93      	ldr	r2, [pc, #588]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 8002490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002494:	61d3      	str	r3, [r2, #28]
 8002496:	4b91      	ldr	r3, [pc, #580]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2301      	movs	r3, #1
 80024a4:	75fb      	strb	r3, [r7, #23]
 80024a6:	4b8e      	ldr	r3, [pc, #568]	; (80026e0 <HAL_RCC_OscConfig+0x4f8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d118      	bne.n	80024e4 <HAL_RCC_OscConfig+0x2fc>
 80024b2:	4b8b      	ldr	r3, [pc, #556]	; (80026e0 <HAL_RCC_OscConfig+0x4f8>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a8a      	ldr	r2, [pc, #552]	; (80026e0 <HAL_RCC_OscConfig+0x4f8>)
 80024b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	f7ff fbc7 	bl	8001c50 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x2f0>
 80024c6:	f7ff fbc3 	bl	8001c50 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b64      	cmp	r3, #100	; 0x64
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x2f0>
 80024d4:	2303      	movs	r3, #3
 80024d6:	e0fd      	b.n	80026d4 <HAL_RCC_OscConfig+0x4ec>
 80024d8:	4b81      	ldr	r3, [pc, #516]	; (80026e0 <HAL_RCC_OscConfig+0x4f8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f0      	beq.n	80024c6 <HAL_RCC_OscConfig+0x2de>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d106      	bne.n	80024fa <HAL_RCC_OscConfig+0x312>
 80024ec:	4b7b      	ldr	r3, [pc, #492]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	4a7a      	ldr	r2, [pc, #488]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6213      	str	r3, [r2, #32]
 80024f8:	e02d      	b.n	8002556 <HAL_RCC_OscConfig+0x36e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x334>
 8002502:	4b76      	ldr	r3, [pc, #472]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	4a75      	ldr	r2, [pc, #468]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	6213      	str	r3, [r2, #32]
 800250e:	4b73      	ldr	r3, [pc, #460]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	4a72      	ldr	r2, [pc, #456]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 8002514:	f023 0304 	bic.w	r3, r3, #4
 8002518:	6213      	str	r3, [r2, #32]
 800251a:	e01c      	b.n	8002556 <HAL_RCC_OscConfig+0x36e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2b05      	cmp	r3, #5
 8002522:	d10c      	bne.n	800253e <HAL_RCC_OscConfig+0x356>
 8002524:	4b6d      	ldr	r3, [pc, #436]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	4a6c      	ldr	r2, [pc, #432]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 800252a:	f043 0304 	orr.w	r3, r3, #4
 800252e:	6213      	str	r3, [r2, #32]
 8002530:	4b6a      	ldr	r3, [pc, #424]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	4a69      	ldr	r2, [pc, #420]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	6213      	str	r3, [r2, #32]
 800253c:	e00b      	b.n	8002556 <HAL_RCC_OscConfig+0x36e>
 800253e:	4b67      	ldr	r3, [pc, #412]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	4a66      	ldr	r2, [pc, #408]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 8002544:	f023 0301 	bic.w	r3, r3, #1
 8002548:	6213      	str	r3, [r2, #32]
 800254a:	4b64      	ldr	r3, [pc, #400]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	4a63      	ldr	r2, [pc, #396]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 8002550:	f023 0304 	bic.w	r3, r3, #4
 8002554:	6213      	str	r3, [r2, #32]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d015      	beq.n	800258a <HAL_RCC_OscConfig+0x3a2>
 800255e:	f7ff fb77 	bl	8001c50 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]
 8002564:	e00a      	b.n	800257c <HAL_RCC_OscConfig+0x394>
 8002566:	f7ff fb73 	bl	8001c50 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	; 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x394>
 8002578:	2303      	movs	r3, #3
 800257a:	e0ab      	b.n	80026d4 <HAL_RCC_OscConfig+0x4ec>
 800257c:	4b57      	ldr	r3, [pc, #348]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ee      	beq.n	8002566 <HAL_RCC_OscConfig+0x37e>
 8002588:	e014      	b.n	80025b4 <HAL_RCC_OscConfig+0x3cc>
 800258a:	f7ff fb61 	bl	8001c50 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_OscConfig+0x3c0>
 8002592:	f7ff fb5d 	bl	8001c50 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x3c0>
 80025a4:	2303      	movs	r3, #3
 80025a6:	e095      	b.n	80026d4 <HAL_RCC_OscConfig+0x4ec>
 80025a8:	4b4c      	ldr	r3, [pc, #304]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1ee      	bne.n	8002592 <HAL_RCC_OscConfig+0x3aa>
 80025b4:	7dfb      	ldrb	r3, [r7, #23]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d105      	bne.n	80025c6 <HAL_RCC_OscConfig+0x3de>
 80025ba:	4b48      	ldr	r3, [pc, #288]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	4a47      	ldr	r2, [pc, #284]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 80025c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c4:	61d3      	str	r3, [r2, #28]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 8081 	beq.w	80026d2 <HAL_RCC_OscConfig+0x4ea>
 80025d0:	4b42      	ldr	r3, [pc, #264]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 030c 	and.w	r3, r3, #12
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d061      	beq.n	80026a0 <HAL_RCC_OscConfig+0x4b8>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d146      	bne.n	8002672 <HAL_RCC_OscConfig+0x48a>
 80025e4:	4b3f      	ldr	r3, [pc, #252]	; (80026e4 <HAL_RCC_OscConfig+0x4fc>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	f7ff fb31 	bl	8001c50 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x41c>
 80025f2:	f7ff fb2d 	bl	8001c50 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x41c>
 8002600:	2303      	movs	r3, #3
 8002602:	e067      	b.n	80026d4 <HAL_RCC_OscConfig+0x4ec>
 8002604:	4b35      	ldr	r3, [pc, #212]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f0      	bne.n	80025f2 <HAL_RCC_OscConfig+0x40a>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002618:	d108      	bne.n	800262c <HAL_RCC_OscConfig+0x444>
 800261a:	4b30      	ldr	r3, [pc, #192]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	492d      	ldr	r1, [pc, #180]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 8002628:	4313      	orrs	r3, r2
 800262a:	604b      	str	r3, [r1, #4]
 800262c:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a19      	ldr	r1, [r3, #32]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	430b      	orrs	r3, r1
 800263e:	4927      	ldr	r1, [pc, #156]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 8002640:	4313      	orrs	r3, r2
 8002642:	604b      	str	r3, [r1, #4]
 8002644:	4b27      	ldr	r3, [pc, #156]	; (80026e4 <HAL_RCC_OscConfig+0x4fc>)
 8002646:	2201      	movs	r2, #1
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	f7ff fb01 	bl	8001c50 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x47c>
 8002652:	f7ff fafd 	bl	8001c50 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x47c>
 8002660:	2303      	movs	r3, #3
 8002662:	e037      	b.n	80026d4 <HAL_RCC_OscConfig+0x4ec>
 8002664:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x46a>
 8002670:	e02f      	b.n	80026d2 <HAL_RCC_OscConfig+0x4ea>
 8002672:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <HAL_RCC_OscConfig+0x4fc>)
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	f7ff faea 	bl	8001c50 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x4aa>
 8002680:	f7ff fae6 	bl	8001c50 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x4aa>
 800268e:	2303      	movs	r3, #3
 8002690:	e020      	b.n	80026d4 <HAL_RCC_OscConfig+0x4ec>
 8002692:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x498>
 800269e:	e018      	b.n	80026d2 <HAL_RCC_OscConfig+0x4ea>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_OscConfig+0x4c4>
 80026a8:	2301      	movs	r3, #1
 80026aa:	e013      	b.n	80026d4 <HAL_RCC_OscConfig+0x4ec>
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_RCC_OscConfig+0x4f4>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d106      	bne.n	80026ce <HAL_RCC_OscConfig+0x4e6>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d001      	beq.n	80026d2 <HAL_RCC_OscConfig+0x4ea>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <HAL_RCC_OscConfig+0x4ec>
 80026d2:	2300      	movs	r3, #0
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40007000 	.word	0x40007000
 80026e4:	42420060 	.word	0x42420060

080026e8 <HAL_RCC_ClockConfig>:
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_ClockConfig+0x14>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0d0      	b.n	800289e <HAL_RCC_ClockConfig+0x1b6>
 80026fc:	4b6a      	ldr	r3, [pc, #424]	; (80028a8 <HAL_RCC_ClockConfig+0x1c0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d910      	bls.n	800272c <HAL_RCC_ClockConfig+0x44>
 800270a:	4b67      	ldr	r3, [pc, #412]	; (80028a8 <HAL_RCC_ClockConfig+0x1c0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 0207 	bic.w	r2, r3, #7
 8002712:	4965      	ldr	r1, [pc, #404]	; (80028a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	4313      	orrs	r3, r2
 8002718:	600b      	str	r3, [r1, #0]
 800271a:	4b63      	ldr	r3, [pc, #396]	; (80028a8 <HAL_RCC_ClockConfig+0x1c0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x44>
 8002728:	2301      	movs	r3, #1
 800272a:	e0b8      	b.n	800289e <HAL_RCC_ClockConfig+0x1b6>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d020      	beq.n	800277a <HAL_RCC_ClockConfig+0x92>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_ClockConfig+0x68>
 8002744:	4b59      	ldr	r3, [pc, #356]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	4a58      	ldr	r2, [pc, #352]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800274e:	6053      	str	r3, [r2, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_RCC_ClockConfig+0x80>
 800275c:	4b53      	ldr	r3, [pc, #332]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	4a52      	ldr	r2, [pc, #328]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002766:	6053      	str	r3, [r2, #4]
 8002768:	4b50      	ldr	r3, [pc, #320]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	494d      	ldr	r1, [pc, #308]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d040      	beq.n	8002808 <HAL_RCC_ClockConfig+0x120>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xb6>
 800278e:	4b47      	ldr	r3, [pc, #284]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d115      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xde>
 800279a:	2301      	movs	r3, #1
 800279c:	e07f      	b.n	800289e <HAL_RCC_ClockConfig+0x1b6>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d107      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xce>
 80027a6:	4b41      	ldr	r3, [pc, #260]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d109      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xde>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e073      	b.n	800289e <HAL_RCC_ClockConfig+0x1b6>
 80027b6:	4b3d      	ldr	r3, [pc, #244]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xde>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e06b      	b.n	800289e <HAL_RCC_ClockConfig+0x1b6>
 80027c6:	4b39      	ldr	r3, [pc, #228]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f023 0203 	bic.w	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4936      	ldr	r1, [pc, #216]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]
 80027d8:	f7ff fa3a 	bl	8001c50 <HAL_GetTick>
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_ClockConfig+0x10e>
 80027e0:	f7ff fa36 	bl	8001c50 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_ClockConfig+0x10e>
 80027f2:	2303      	movs	r3, #3
 80027f4:	e053      	b.n	800289e <HAL_RCC_ClockConfig+0x1b6>
 80027f6:	4b2d      	ldr	r3, [pc, #180]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 020c 	and.w	r2, r3, #12
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	429a      	cmp	r2, r3
 8002806:	d1eb      	bne.n	80027e0 <HAL_RCC_ClockConfig+0xf8>
 8002808:	4b27      	ldr	r3, [pc, #156]	; (80028a8 <HAL_RCC_ClockConfig+0x1c0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d210      	bcs.n	8002838 <HAL_RCC_ClockConfig+0x150>
 8002816:	4b24      	ldr	r3, [pc, #144]	; (80028a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 0207 	bic.w	r2, r3, #7
 800281e:	4922      	ldr	r1, [pc, #136]	; (80028a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]
 8002826:	4b20      	ldr	r3, [pc, #128]	; (80028a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x150>
 8002834:	2301      	movs	r3, #1
 8002836:	e032      	b.n	800289e <HAL_RCC_ClockConfig+0x1b6>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_RCC_ClockConfig+0x16e>
 8002844:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4916      	ldr	r1, [pc, #88]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	4313      	orrs	r3, r2
 8002854:	604b      	str	r3, [r1, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d009      	beq.n	8002876 <HAL_RCC_ClockConfig+0x18e>
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	490e      	ldr	r1, [pc, #56]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	4313      	orrs	r3, r2
 8002874:	604b      	str	r3, [r1, #4]
 8002876:	f000 f821 	bl	80028bc <HAL_RCC_GetSysClockFreq>
 800287a:	4602      	mov	r2, r0
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	490a      	ldr	r1, [pc, #40]	; (80028b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002888:	5ccb      	ldrb	r3, [r1, r3]
 800288a:	fa22 f303 	lsr.w	r3, r2, r3
 800288e:	4a09      	ldr	r2, [pc, #36]	; (80028b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff f998 	bl	8001bcc <HAL_InitTick>
 800289c:	2300      	movs	r3, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40022000 	.word	0x40022000
 80028ac:	40021000 	.word	0x40021000
 80028b0:	08004c88 	.word	0x08004c88
 80028b4:	2000007c 	.word	0x2000007c
 80028b8:	20000080 	.word	0x20000080

080028bc <HAL_RCC_GetSysClockFreq>:
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	2300      	movs	r3, #0
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <HAL_RCC_GetSysClockFreq+0x94>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d002      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x30>
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d003      	beq.n	80028f2 <HAL_RCC_GetSysClockFreq+0x36>
 80028ea:	e027      	b.n	800293c <HAL_RCC_GetSysClockFreq+0x80>
 80028ec:	4b19      	ldr	r3, [pc, #100]	; (8002954 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	e027      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x86>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	0c9b      	lsrs	r3, r3, #18
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	4a17      	ldr	r2, [pc, #92]	; (8002958 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028fc:	5cd3      	ldrb	r3, [r2, r3]
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d010      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x70>
 800290a:	4b11      	ldr	r3, [pc, #68]	; (8002950 <HAL_RCC_GetSysClockFreq+0x94>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	0c5b      	lsrs	r3, r3, #17
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	4a11      	ldr	r2, [pc, #68]	; (800295c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002916:	5cd3      	ldrb	r3, [r2, r3]
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a0d      	ldr	r2, [pc, #52]	; (8002954 <HAL_RCC_GetSysClockFreq+0x98>)
 800291e:	fb02 f203 	mul.w	r2, r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	e004      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x7a>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a0c      	ldr	r2, [pc, #48]	; (8002960 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002930:	fb02 f303 	mul.w	r3, r2, r3
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	e002      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x86>
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_RCC_GetSysClockFreq+0x98>)
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	bf00      	nop
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4618      	mov	r0, r3
 8002946:	371c      	adds	r7, #28
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
 8002954:	007a1200 	.word	0x007a1200
 8002958:	08004ca0 	.word	0x08004ca0
 800295c:	08004cb0 	.word	0x08004cb0
 8002960:	003d0900 	.word	0x003d0900

08002964 <HAL_RCC_GetHCLKFreq>:
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
 8002968:	4b02      	ldr	r3, [pc, #8]	; (8002974 <HAL_RCC_GetHCLKFreq+0x10>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	2000007c 	.word	0x2000007c

08002978 <HAL_RCC_GetPCLK1Freq>:
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
 800297c:	f7ff fff2 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 8002980:	4602      	mov	r2, r0
 8002982:	4b05      	ldr	r3, [pc, #20]	; (8002998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	0a1b      	lsrs	r3, r3, #8
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	4903      	ldr	r1, [pc, #12]	; (800299c <HAL_RCC_GetPCLK1Freq+0x24>)
 800298e:	5ccb      	ldrb	r3, [r1, r3]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
 8002994:	4618      	mov	r0, r3
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40021000 	.word	0x40021000
 800299c:	08004c98 	.word	0x08004c98

080029a0 <HAL_RCC_GetPCLK2Freq>:
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	f7ff ffde 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	0adb      	lsrs	r3, r3, #11
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	4903      	ldr	r1, [pc, #12]	; (80029c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40021000 	.word	0x40021000
 80029c4:	08004c98 	.word	0x08004c98

080029c8 <RCC_Delay>:
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <RCC_Delay+0x34>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <RCC_Delay+0x38>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	0a5b      	lsrs	r3, r3, #9
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	fb02 f303 	mul.w	r3, r2, r3
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	bf00      	nop
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1e5a      	subs	r2, r3, #1
 80029ea:	60fa      	str	r2, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f9      	bne.n	80029e4 <RCC_Delay+0x1c>
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	2000007c 	.word	0x2000007c
 8002a00:	10624dd3 	.word	0x10624dd3

08002a04 <HAL_TIM_Base_Init>:
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_TIM_Base_Init+0x12>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e041      	b.n	8002a9a <HAL_TIM_Base_Init+0x96>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_TIM_Base_Init+0x2c>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe ff06 	bl	800183c <HAL_TIM_Base_MspInit>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3304      	adds	r3, #4
 8002a40:	4619      	mov	r1, r3
 8002a42:	4610      	mov	r0, r2
 8002a44:	f000 fbde 	bl	8003204 <TIM_Base_SetConfig>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002a98:	2300      	movs	r3, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_TIM_PWM_Init>:
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_TIM_PWM_Init+0x12>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e041      	b.n	8002b38 <HAL_TIM_PWM_Init+0x96>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d106      	bne.n	8002ace <HAL_TIM_PWM_Init+0x2c>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f839 	bl	8002b40 <HAL_TIM_PWM_MspInit>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3304      	adds	r3, #4
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	f000 fb8f 	bl	8003204 <TIM_Base_SetConfig>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b36:	2300      	movs	r3, #0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_TIM_PWM_MspInit>:
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr
	...

08002b54 <HAL_TIM_PWM_Start>:
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d109      	bne.n	8002b78 <HAL_TIM_PWM_Start+0x24>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	bf14      	ite	ne
 8002b70:	2301      	movne	r3, #1
 8002b72:	2300      	moveq	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	e022      	b.n	8002bbe <HAL_TIM_PWM_Start+0x6a>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d109      	bne.n	8002b92 <HAL_TIM_PWM_Start+0x3e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	bf14      	ite	ne
 8002b8a:	2301      	movne	r3, #1
 8002b8c:	2300      	moveq	r3, #0
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	e015      	b.n	8002bbe <HAL_TIM_PWM_Start+0x6a>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d109      	bne.n	8002bac <HAL_TIM_PWM_Start+0x58>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	e008      	b.n	8002bbe <HAL_TIM_PWM_Start+0x6a>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	bf14      	ite	ne
 8002bb8:	2301      	movne	r3, #1
 8002bba:	2300      	moveq	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_TIM_PWM_Start+0x72>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e05e      	b.n	8002c84 <HAL_TIM_PWM_Start+0x130>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d104      	bne.n	8002bd6 <HAL_TIM_PWM_Start+0x82>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bd4:	e013      	b.n	8002bfe <HAL_TIM_PWM_Start+0xaa>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d104      	bne.n	8002be6 <HAL_TIM_PWM_Start+0x92>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002be4:	e00b      	b.n	8002bfe <HAL_TIM_PWM_Start+0xaa>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d104      	bne.n	8002bf6 <HAL_TIM_PWM_Start+0xa2>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bf4:	e003      	b.n	8002bfe <HAL_TIM_PWM_Start+0xaa>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2201      	movs	r2, #1
 8002c04:	6839      	ldr	r1, [r7, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fd7c 	bl	8003704 <TIM_CCxChannelCmd>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1e      	ldr	r2, [pc, #120]	; (8002c8c <HAL_TIM_PWM_Start+0x138>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d107      	bne.n	8002c26 <HAL_TIM_PWM_Start+0xd2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c24:	645a      	str	r2, [r3, #68]	; 0x44
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <HAL_TIM_PWM_Start+0x138>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00e      	beq.n	8002c4e <HAL_TIM_PWM_Start+0xfa>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c38:	d009      	beq.n	8002c4e <HAL_TIM_PWM_Start+0xfa>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a14      	ldr	r2, [pc, #80]	; (8002c90 <HAL_TIM_PWM_Start+0x13c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d004      	beq.n	8002c4e <HAL_TIM_PWM_Start+0xfa>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a12      	ldr	r2, [pc, #72]	; (8002c94 <HAL_TIM_PWM_Start+0x140>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d111      	bne.n	8002c72 <HAL_TIM_PWM_Start+0x11e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b06      	cmp	r3, #6
 8002c5e:	d010      	beq.n	8002c82 <HAL_TIM_PWM_Start+0x12e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	e007      	b.n	8002c82 <HAL_TIM_PWM_Start+0x12e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0201 	orr.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	2300      	movs	r3, #0
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40012c00 	.word	0x40012c00
 8002c90:	40000400 	.word	0x40000400
 8002c94:	40000800 	.word	0x40000800

08002c98 <HAL_TIM_IRQHandler>:
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d122      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x5c>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d11b      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x5c>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0202 	mvn.w	r2, #2
 8002cc4:	611a      	str	r2, [r3, #16]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	771a      	strb	r2, [r3, #28]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_TIM_IRQHandler+0x4a>
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fa76 	bl	80031cc <HAL_TIM_IC_CaptureCallback>
 8002ce0:	e005      	b.n	8002cee <HAL_TIM_IRQHandler+0x56>
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fa69 	bl	80031ba <HAL_TIM_OC_DelayElapsedCallback>
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 fa78 	bl	80031de <HAL_TIM_PWM_PulseFinishedCallback>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	771a      	strb	r2, [r3, #28]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d122      	bne.n	8002d48 <HAL_TIM_IRQHandler+0xb0>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d11b      	bne.n	8002d48 <HAL_TIM_IRQHandler+0xb0>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0204 	mvn.w	r2, #4
 8002d18:	611a      	str	r2, [r3, #16]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	771a      	strb	r2, [r3, #28]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_TIM_IRQHandler+0x9e>
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fa4c 	bl	80031cc <HAL_TIM_IC_CaptureCallback>
 8002d34:	e005      	b.n	8002d42 <HAL_TIM_IRQHandler+0xaa>
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fa3f 	bl	80031ba <HAL_TIM_OC_DelayElapsedCallback>
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 fa4e 	bl	80031de <HAL_TIM_PWM_PulseFinishedCallback>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	771a      	strb	r2, [r3, #28]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d122      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x104>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d11b      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x104>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0208 	mvn.w	r2, #8
 8002d6c:	611a      	str	r2, [r3, #16]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2204      	movs	r2, #4
 8002d72:	771a      	strb	r2, [r3, #28]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_TIM_IRQHandler+0xf2>
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fa22 	bl	80031cc <HAL_TIM_IC_CaptureCallback>
 8002d88:	e005      	b.n	8002d96 <HAL_TIM_IRQHandler+0xfe>
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fa15 	bl	80031ba <HAL_TIM_OC_DelayElapsedCallback>
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fa24 	bl	80031de <HAL_TIM_PWM_PulseFinishedCallback>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	771a      	strb	r2, [r3, #28]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f003 0310 	and.w	r3, r3, #16
 8002da6:	2b10      	cmp	r3, #16
 8002da8:	d122      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x158>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	2b10      	cmp	r3, #16
 8002db6:	d11b      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x158>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0210 	mvn.w	r2, #16
 8002dc0:	611a      	str	r2, [r3, #16]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2208      	movs	r2, #8
 8002dc6:	771a      	strb	r2, [r3, #28]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_TIM_IRQHandler+0x146>
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f9f8 	bl	80031cc <HAL_TIM_IC_CaptureCallback>
 8002ddc:	e005      	b.n	8002dea <HAL_TIM_IRQHandler+0x152>
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f9eb 	bl	80031ba <HAL_TIM_OC_DelayElapsedCallback>
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f9fa 	bl	80031de <HAL_TIM_PWM_PulseFinishedCallback>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	771a      	strb	r2, [r3, #28]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d10e      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x184>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d107      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x184>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f06f 0201 	mvn.w	r2, #1
 8002e14:	611a      	str	r2, [r3, #16]
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7fe f815 	bl	8000e46 <HAL_TIM_PeriodElapsedCallback>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e26:	2b80      	cmp	r3, #128	; 0x80
 8002e28:	d10e      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x1b0>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e34:	2b80      	cmp	r3, #128	; 0x80
 8002e36:	d107      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x1b0>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e40:	611a      	str	r2, [r3, #16]
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fce9 	bl	800381a <HAL_TIMEx_BreakCallback>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e52:	2b40      	cmp	r3, #64	; 0x40
 8002e54:	d10e      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x1dc>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e60:	2b40      	cmp	r3, #64	; 0x40
 8002e62:	d107      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x1dc>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e6c:	611a      	str	r2, [r3, #16]
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f9be 	bl	80031f0 <HAL_TIM_TriggerCallback>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d10e      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x208>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d107      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x208>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0220 	mvn.w	r2, #32
 8002e98:	611a      	str	r2, [r3, #16]
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fcb4 	bl	8003808 <HAL_TIMEx_CommutCallback>
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_TIM_PWM_ConfigChannel>:
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	75fb      	strb	r3, [r7, #23]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e0ae      	b.n	8003024 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b0c      	cmp	r3, #12
 8002ed2:	f200 809f 	bhi.w	8003014 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ed6:	a201      	add	r2, pc, #4	; (adr r2, 8002edc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002edc:	08002f11 	.word	0x08002f11
 8002ee0:	08003015 	.word	0x08003015
 8002ee4:	08003015 	.word	0x08003015
 8002ee8:	08003015 	.word	0x08003015
 8002eec:	08002f51 	.word	0x08002f51
 8002ef0:	08003015 	.word	0x08003015
 8002ef4:	08003015 	.word	0x08003015
 8002ef8:	08003015 	.word	0x08003015
 8002efc:	08002f93 	.word	0x08002f93
 8002f00:	08003015 	.word	0x08003015
 8002f04:	08003015 	.word	0x08003015
 8002f08:	08003015 	.word	0x08003015
 8002f0c:	08002fd3 	.word	0x08002fd3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 f9d6 	bl	80032c8 <TIM_OC1_SetConfig>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0208 	orr.w	r2, r2, #8
 8002f2a:	619a      	str	r2, [r3, #24]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0204 	bic.w	r2, r2, #4
 8002f3a:	619a      	str	r2, [r3, #24]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6999      	ldr	r1, [r3, #24]
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	619a      	str	r2, [r3, #24]
 8002f4e:	e064      	b.n	800301a <HAL_TIM_PWM_ConfigChannel+0x172>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fa1c 	bl	8003394 <TIM_OC2_SetConfig>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699a      	ldr	r2, [r3, #24]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f6a:	619a      	str	r2, [r3, #24]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f7a:	619a      	str	r2, [r3, #24]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6999      	ldr	r1, [r3, #24]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	021a      	lsls	r2, r3, #8
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	619a      	str	r2, [r3, #24]
 8002f90:	e043      	b.n	800301a <HAL_TIM_PWM_ConfigChannel+0x172>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fa65 	bl	8003468 <TIM_OC3_SetConfig>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69da      	ldr	r2, [r3, #28]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0208 	orr.w	r2, r2, #8
 8002fac:	61da      	str	r2, [r3, #28]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0204 	bic.w	r2, r2, #4
 8002fbc:	61da      	str	r2, [r3, #28]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69d9      	ldr	r1, [r3, #28]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	61da      	str	r2, [r3, #28]
 8002fd0:	e023      	b.n	800301a <HAL_TIM_PWM_ConfigChannel+0x172>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 faaf 	bl	800353c <TIM_OC4_SetConfig>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69da      	ldr	r2, [r3, #28]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fec:	61da      	str	r2, [r3, #28]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69da      	ldr	r2, [r3, #28]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ffc:	61da      	str	r2, [r3, #28]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69d9      	ldr	r1, [r3, #28]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	021a      	lsls	r2, r3, #8
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	61da      	str	r2, [r3, #28]
 8003012:	e002      	b.n	800301a <HAL_TIM_PWM_ConfigChannel+0x172>
 8003014:	2301      	movs	r3, #1
 8003016:	75fb      	strb	r3, [r7, #23]
 8003018:	bf00      	nop
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003022:	7dfb      	ldrb	r3, [r7, #23]
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_TIM_ConfigClockSource>:
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
 8003036:	2300      	movs	r3, #0
 8003038:	73fb      	strb	r3, [r7, #15]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_TIM_ConfigClockSource+0x1c>
 8003044:	2302      	movs	r3, #2
 8003046:	e0b4      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x186>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003080:	d03e      	beq.n	8003100 <HAL_TIM_ConfigClockSource+0xd4>
 8003082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003086:	f200 8087 	bhi.w	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 800308a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308e:	f000 8086 	beq.w	800319e <HAL_TIM_ConfigClockSource+0x172>
 8003092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003096:	d87f      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 8003098:	2b70      	cmp	r3, #112	; 0x70
 800309a:	d01a      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0xa6>
 800309c:	2b70      	cmp	r3, #112	; 0x70
 800309e:	d87b      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 80030a0:	2b60      	cmp	r3, #96	; 0x60
 80030a2:	d050      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0x11a>
 80030a4:	2b60      	cmp	r3, #96	; 0x60
 80030a6:	d877      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 80030a8:	2b50      	cmp	r3, #80	; 0x50
 80030aa:	d03c      	beq.n	8003126 <HAL_TIM_ConfigClockSource+0xfa>
 80030ac:	2b50      	cmp	r3, #80	; 0x50
 80030ae:	d873      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 80030b0:	2b40      	cmp	r3, #64	; 0x40
 80030b2:	d058      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x13a>
 80030b4:	2b40      	cmp	r3, #64	; 0x40
 80030b6:	d86f      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 80030b8:	2b30      	cmp	r3, #48	; 0x30
 80030ba:	d064      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0x15a>
 80030bc:	2b30      	cmp	r3, #48	; 0x30
 80030be:	d86b      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d060      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0x15a>
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d867      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d05c      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0x15a>
 80030cc:	2b10      	cmp	r3, #16
 80030ce:	d05a      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0x15a>
 80030d0:	e062      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6899      	ldr	r1, [r3, #8]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f000 faf0 	bl	80036c6 <TIM_ETR_SetConfig>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	609a      	str	r2, [r3, #8]
 80030fe:	e04f      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x174>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	6899      	ldr	r1, [r3, #8]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f000 fad9 	bl	80036c6 <TIM_ETR_SetConfig>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	e03c      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x174>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6859      	ldr	r1, [r3, #4]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	461a      	mov	r2, r3
 8003134:	f000 fa50 	bl	80035d8 <TIM_TI1_ConfigInputStage>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2150      	movs	r1, #80	; 0x50
 800313e:	4618      	mov	r0, r3
 8003140:	f000 faa7 	bl	8003692 <TIM_ITRx_SetConfig>
 8003144:	e02c      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x174>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6859      	ldr	r1, [r3, #4]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	461a      	mov	r2, r3
 8003154:	f000 fa6e 	bl	8003634 <TIM_TI2_ConfigInputStage>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2160      	movs	r1, #96	; 0x60
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fa97 	bl	8003692 <TIM_ITRx_SetConfig>
 8003164:	e01c      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x174>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6859      	ldr	r1, [r3, #4]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	461a      	mov	r2, r3
 8003174:	f000 fa30 	bl	80035d8 <TIM_TI1_ConfigInputStage>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2140      	movs	r1, #64	; 0x40
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fa87 	bl	8003692 <TIM_ITRx_SetConfig>
 8003184:	e00c      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x174>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4619      	mov	r1, r3
 8003190:	4610      	mov	r0, r2
 8003192:	f000 fa7e 	bl	8003692 <TIM_ITRx_SetConfig>
 8003196:	e003      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x174>
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
 800319c:	e000      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x174>
 800319e:	bf00      	nop
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_TIM_OC_DelayElapsedCallback>:
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <HAL_TIM_IC_CaptureCallback>:
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <HAL_TIM_PWM_PulseFinishedCallback>:
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <HAL_TIM_TriggerCallback>:
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
	...

08003204 <TIM_Base_SetConfig>:
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a29      	ldr	r2, [pc, #164]	; (80032bc <TIM_Base_SetConfig+0xb8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d00b      	beq.n	8003234 <TIM_Base_SetConfig+0x30>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003222:	d007      	beq.n	8003234 <TIM_Base_SetConfig+0x30>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a26      	ldr	r2, [pc, #152]	; (80032c0 <TIM_Base_SetConfig+0xbc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d003      	beq.n	8003234 <TIM_Base_SetConfig+0x30>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a25      	ldr	r2, [pc, #148]	; (80032c4 <TIM_Base_SetConfig+0xc0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d108      	bne.n	8003246 <TIM_Base_SetConfig+0x42>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a1c      	ldr	r2, [pc, #112]	; (80032bc <TIM_Base_SetConfig+0xb8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d00b      	beq.n	8003266 <TIM_Base_SetConfig+0x62>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003254:	d007      	beq.n	8003266 <TIM_Base_SetConfig+0x62>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a19      	ldr	r2, [pc, #100]	; (80032c0 <TIM_Base_SetConfig+0xbc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d003      	beq.n	8003266 <TIM_Base_SetConfig+0x62>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a18      	ldr	r2, [pc, #96]	; (80032c4 <TIM_Base_SetConfig+0xc0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d108      	bne.n	8003278 <TIM_Base_SetConfig+0x74>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4313      	orrs	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	4313      	orrs	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	62da      	str	r2, [r3, #44]	; 0x2c
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	629a      	str	r2, [r3, #40]	; 0x28
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a07      	ldr	r2, [pc, #28]	; (80032bc <TIM_Base_SetConfig+0xb8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d103      	bne.n	80032ac <TIM_Base_SetConfig+0xa8>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	631a      	str	r2, [r3, #48]	; 0x30
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	615a      	str	r2, [r3, #20]
 80032b2:	bf00      	nop
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr
 80032bc:	40012c00 	.word	0x40012c00
 80032c0:	40000400 	.word	0x40000400
 80032c4:	40000800 	.word	0x40000800

080032c8 <TIM_OC1_SetConfig>:
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	f023 0201 	bic.w	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	621a      	str	r2, [r3, #32]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 0303 	bic.w	r3, r3, #3
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	4313      	orrs	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f023 0302 	bic.w	r3, r3, #2
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <TIM_OC1_SetConfig+0xc8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d10c      	bne.n	800333e <TIM_OC1_SetConfig+0x76>
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f023 0308 	bic.w	r3, r3, #8
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	4313      	orrs	r3, r2
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f023 0304 	bic.w	r3, r3, #4
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a13      	ldr	r2, [pc, #76]	; (8003390 <TIM_OC1_SetConfig+0xc8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d111      	bne.n	800336a <TIM_OC1_SetConfig+0xa2>
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	605a      	str	r2, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	619a      	str	r2, [r3, #24]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	635a      	str	r2, [r3, #52]	; 0x34
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	621a      	str	r2, [r3, #32]
 8003384:	bf00      	nop
 8003386:	371c      	adds	r7, #28
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40012c00 	.word	0x40012c00

08003394 <TIM_OC2_SetConfig>:
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	f023 0210 	bic.w	r2, r3, #16
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	621a      	str	r2, [r3, #32]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	021b      	lsls	r3, r3, #8
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f023 0320 	bic.w	r3, r3, #32
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a1d      	ldr	r2, [pc, #116]	; (8003464 <TIM_OC2_SetConfig+0xd0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d10d      	bne.n	8003410 <TIM_OC2_SetConfig+0x7c>
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a14      	ldr	r2, [pc, #80]	; (8003464 <TIM_OC2_SetConfig+0xd0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d113      	bne.n	8003440 <TIM_OC2_SetConfig+0xac>
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	619a      	str	r2, [r3, #24]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	639a      	str	r2, [r3, #56]	; 0x38
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	621a      	str	r2, [r3, #32]
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr
 8003464:	40012c00 	.word	0x40012c00

08003468 <TIM_OC3_SetConfig>:
 8003468:	b480      	push	{r7}
 800346a:	b087      	sub	sp, #28
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	621a      	str	r2, [r3, #32]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0303 	bic.w	r3, r3, #3
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <TIM_OC3_SetConfig+0xd0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d10d      	bne.n	80034e2 <TIM_OC3_SetConfig+0x7a>
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a14      	ldr	r2, [pc, #80]	; (8003538 <TIM_OC3_SetConfig+0xd0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d113      	bne.n	8003512 <TIM_OC3_SetConfig+0xaa>
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	605a      	str	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	61da      	str	r2, [r3, #28]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	63da      	str	r2, [r3, #60]	; 0x3c
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	621a      	str	r2, [r3, #32]
 800352c:	bf00      	nop
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40012c00 	.word	0x40012c00

0800353c <TIM_OC4_SetConfig>:
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	621a      	str	r2, [r3, #32]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	031b      	lsls	r3, r3, #12
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a0f      	ldr	r2, [pc, #60]	; (80035d4 <TIM_OC4_SetConfig+0x98>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d109      	bne.n	80035b0 <TIM_OC4_SetConfig+0x74>
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	019b      	lsls	r3, r3, #6
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	61da      	str	r2, [r3, #28]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	621a      	str	r2, [r3, #32]
 80035ca:	bf00      	nop
 80035cc:	371c      	adds	r7, #28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr
 80035d4:	40012c00 	.word	0x40012c00

080035d8 <TIM_TI1_ConfigInputStage>:
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	f023 0201 	bic.w	r2, r3, #1
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	621a      	str	r2, [r3, #32]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f023 030a 	bic.w	r3, r3, #10
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4313      	orrs	r3, r2
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	619a      	str	r2, [r3, #24]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	621a      	str	r2, [r3, #32]
 800362a:	bf00      	nop
 800362c:	371c      	adds	r7, #28
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr

08003634 <TIM_TI2_ConfigInputStage>:
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	f023 0210 	bic.w	r2, r3, #16
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	621a      	str	r2, [r3, #32]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	031b      	lsls	r3, r3, #12
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003670:	617b      	str	r3, [r7, #20]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	619a      	str	r2, [r3, #24]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	621a      	str	r2, [r3, #32]
 8003688:	bf00      	nop
 800368a:	371c      	adds	r7, #28
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr

08003692 <TIM_ITRx_SetConfig>:
 8003692:	b480      	push	{r7}
 8003694:	b085      	sub	sp, #20
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f043 0307 	orr.w	r3, r3, #7
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr

080036c6 <TIM_ETR_SetConfig>:
 80036c6:	b480      	push	{r7}
 80036c8:	b087      	sub	sp, #28
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	607a      	str	r2, [r7, #4]
 80036d2:	603b      	str	r3, [r7, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	021a      	lsls	r2, r3, #8
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	431a      	orrs	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	609a      	str	r2, [r3, #8]
 80036fa:	bf00      	nop
 80036fc:	371c      	adds	r7, #28
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr

08003704 <TIM_CCxChannelCmd>:
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	2201      	movs	r2, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a1a      	ldr	r2, [r3, #32]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	43db      	mvns	r3, r3
 8003726:	401a      	ands	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	621a      	str	r2, [r3, #32]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a1a      	ldr	r2, [r3, #32]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	fa01 f303 	lsl.w	r3, r1, r3
 800373c:	431a      	orrs	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	621a      	str	r2, [r3, #32]
 8003742:	bf00      	nop
 8003744:	371c      	adds	r7, #28
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr

0800374c <HAL_TIMEx_MasterConfigSynchronization>:
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003760:	2302      	movs	r3, #2
 8003762:	e046      	b.n	80037f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a16      	ldr	r2, [pc, #88]	; (80037fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00e      	beq.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b0:	d009      	beq.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a12      	ldr	r2, [pc, #72]	; (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d004      	beq.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a10      	ldr	r2, [pc, #64]	; (8003804 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d10c      	bne.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	609a      	str	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037f0:	2300      	movs	r3, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	40012c00 	.word	0x40012c00
 8003800:	40000400 	.word	0x40000400
 8003804:	40000800 	.word	0x40000800

08003808 <HAL_TIMEx_CommutCallback>:
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr

0800381a <HAL_TIMEx_BreakCallback>:
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr

0800382c <HAL_UART_Init>:
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_UART_Init+0x12>
 800383a:	2301      	movs	r3, #1
 800383c:	e042      	b.n	80038c4 <HAL_UART_Init+0x98>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <HAL_UART_Init+0x2c>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fe f85c 	bl	8001910 <HAL_UART_MspInit>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2224      	movs	r2, #36	; 0x24
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800386e:	60da      	str	r2, [r3, #12]
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f91d 	bl	8003ab0 <UART_SetConfig>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003884:	611a      	str	r2, [r3, #16]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695a      	ldr	r2, [r3, #20]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003894:	615a      	str	r2, [r3, #20]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a4:	60da      	str	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	645a      	str	r2, [r3, #68]	; 0x44
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	635a      	str	r2, [r3, #52]	; 0x34
 80038c2:	2300      	movs	r3, #0
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_UART_Transmit>:
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	; 0x28
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	4613      	mov	r3, r2
 80038da:	80fb      	strh	r3, [r7, #6]
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d16d      	bne.n	80039c8 <HAL_UART_Transmit+0xfc>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <HAL_UART_Transmit+0x2c>
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_UART_Transmit+0x30>
 80038f8:	2301      	movs	r3, #1
 80038fa:	e066      	b.n	80039ca <HAL_UART_Transmit+0xfe>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	645a      	str	r2, [r3, #68]	; 0x44
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2221      	movs	r2, #33	; 0x21
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800390a:	f7fe f9a1 	bl	8001c50 <HAL_GetTick>
 800390e:	6178      	str	r0, [r7, #20]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	88fa      	ldrh	r2, [r7, #6]
 8003914:	849a      	strh	r2, [r3, #36]	; 0x24
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	88fa      	ldrh	r2, [r7, #6]
 800391a:	84da      	strh	r2, [r3, #38]	; 0x26
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003924:	d108      	bne.n	8003938 <HAL_UART_Transmit+0x6c>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d104      	bne.n	8003938 <HAL_UART_Transmit+0x6c>
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	e003      	b.n	8003940 <HAL_UART_Transmit+0x74>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	61fb      	str	r3, [r7, #28]
 800393c:	2300      	movs	r3, #0
 800393e:	61bb      	str	r3, [r7, #24]
 8003940:	e02a      	b.n	8003998 <HAL_UART_Transmit+0xcc>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2200      	movs	r2, #0
 800394a:	2180      	movs	r1, #128	; 0x80
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f840 	bl	80039d2 <UART_WaitOnFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_UART_Transmit+0x90>
 8003958:	2303      	movs	r3, #3
 800395a:	e036      	b.n	80039ca <HAL_UART_Transmit+0xfe>
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10b      	bne.n	800397a <HAL_UART_Transmit+0xae>
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	3302      	adds	r3, #2
 8003976:	61bb      	str	r3, [r7, #24]
 8003978:	e007      	b.n	800398a <HAL_UART_Transmit+0xbe>
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	781a      	ldrb	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	605a      	str	r2, [r3, #4]
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	3301      	adds	r3, #1
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	84da      	strh	r2, [r3, #38]	; 0x26
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1cf      	bne.n	8003942 <HAL_UART_Transmit+0x76>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2200      	movs	r2, #0
 80039aa:	2140      	movs	r1, #64	; 0x40
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f810 	bl	80039d2 <UART_WaitOnFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_UART_Transmit+0xf0>
 80039b8:	2303      	movs	r3, #3
 80039ba:	e006      	b.n	80039ca <HAL_UART_Transmit+0xfe>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039c4:	2300      	movs	r3, #0
 80039c6:	e000      	b.n	80039ca <HAL_UART_Transmit+0xfe>
 80039c8:	2302      	movs	r3, #2
 80039ca:	4618      	mov	r0, r3
 80039cc:	3720      	adds	r7, #32
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <UART_WaitOnFlagUntilTimeout>:
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b090      	sub	sp, #64	; 0x40
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	603b      	str	r3, [r7, #0]
 80039de:	4613      	mov	r3, r2
 80039e0:	71fb      	strb	r3, [r7, #7]
 80039e2:	e050      	b.n	8003a86 <UART_WaitOnFlagUntilTimeout+0xb4>
 80039e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ea:	d04c      	beq.n	8003a86 <UART_WaitOnFlagUntilTimeout+0xb4>
 80039ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d007      	beq.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x30>
 80039f2:	f7fe f92d 	bl	8001c50 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d241      	bcs.n	8003a86 <UART_WaitOnFlagUntilTimeout+0xb4>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	330c      	adds	r3, #12
 8003a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0c:	e853 3f00 	ldrex	r3, [r3]
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	330c      	adds	r3, #12
 8003a20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a22:	637a      	str	r2, [r7, #52]	; 0x34
 8003a24:	633b      	str	r3, [r7, #48]	; 0x30
 8003a26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a2a:	e841 2300 	strex	r3, r2, [r1]
 8003a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1e5      	bne.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3314      	adds	r3, #20
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3314      	adds	r3, #20
 8003a54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a56:	623a      	str	r2, [r7, #32]
 8003a58:	61fb      	str	r3, [r7, #28]
 8003a5a:	69f9      	ldr	r1, [r7, #28]
 8003a5c:	6a3a      	ldr	r2, [r7, #32]
 8003a5e:	e841 2300 	strex	r3, r2, [r1]
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1e5      	bne.n	8003a36 <UART_WaitOnFlagUntilTimeout+0x64>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a82:	2303      	movs	r3, #3
 8003a84:	e00f      	b.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0xd4>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	bf0c      	ite	eq
 8003a96:	2301      	moveq	r3, #1
 8003a98:	2300      	movne	r3, #0
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	79fb      	ldrb	r3, [r7, #7]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d09f      	beq.n	80039e4 <UART_WaitOnFlagUntilTimeout+0x12>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3740      	adds	r7, #64	; 0x40
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <UART_SetConfig>:
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	611a      	str	r2, [r3, #16]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60bb      	str	r3, [r7, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003aea:	f023 030c 	bic.w	r3, r3, #12
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6812      	ldr	r2, [r2, #0]
 8003af2:	68b9      	ldr	r1, [r7, #8]
 8003af4:	430b      	orrs	r3, r1
 8003af6:	60d3      	str	r3, [r2, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699a      	ldr	r2, [r3, #24]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	615a      	str	r2, [r3, #20]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a2c      	ldr	r2, [pc, #176]	; (8003bc4 <UART_SetConfig+0x114>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d103      	bne.n	8003b20 <UART_SetConfig+0x70>
 8003b18:	f7fe ff42 	bl	80029a0 <HAL_RCC_GetPCLK2Freq>
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	e002      	b.n	8003b26 <UART_SetConfig+0x76>
 8003b20:	f7fe ff2a 	bl	8002978 <HAL_RCC_GetPCLK1Freq>
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009a      	lsls	r2, r3, #2
 8003b30:	441a      	add	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3c:	4a22      	ldr	r2, [pc, #136]	; (8003bc8 <UART_SetConfig+0x118>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	0119      	lsls	r1, r3, #4
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009a      	lsls	r2, r3, #2
 8003b50:	441a      	add	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b5c:	4b1a      	ldr	r3, [pc, #104]	; (8003bc8 <UART_SetConfig+0x118>)
 8003b5e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	2064      	movs	r0, #100	; 0x64
 8003b66:	fb00 f303 	mul.w	r3, r0, r3
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	3332      	adds	r3, #50	; 0x32
 8003b70:	4a15      	ldr	r2, [pc, #84]	; (8003bc8 <UART_SetConfig+0x118>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b7c:	4419      	add	r1, r3
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	009a      	lsls	r2, r3, #2
 8003b88:	441a      	add	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <UART_SetConfig+0x118>)
 8003b96:	fba3 0302 	umull	r0, r3, r3, r2
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	2064      	movs	r0, #100	; 0x64
 8003b9e:	fb00 f303 	mul.w	r3, r0, r3
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	3332      	adds	r3, #50	; 0x32
 8003ba8:	4a07      	ldr	r2, [pc, #28]	; (8003bc8 <UART_SetConfig+0x118>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	f003 020f 	and.w	r2, r3, #15
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	440a      	add	r2, r1
 8003bba:	609a      	str	r2, [r3, #8]
 8003bbc:	bf00      	nop
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40013800 	.word	0x40013800
 8003bc8:	51eb851f 	.word	0x51eb851f

08003bcc <__errno>:
 8003bcc:	4b01      	ldr	r3, [pc, #4]	; (8003bd4 <__errno+0x8>)
 8003bce:	6818      	ldr	r0, [r3, #0]
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20000088 	.word	0x20000088

08003bd8 <__libc_init_array>:
 8003bd8:	b570      	push	{r4, r5, r6, lr}
 8003bda:	2600      	movs	r6, #0
 8003bdc:	4d0c      	ldr	r5, [pc, #48]	; (8003c10 <__libc_init_array+0x38>)
 8003bde:	4c0d      	ldr	r4, [pc, #52]	; (8003c14 <__libc_init_array+0x3c>)
 8003be0:	1b64      	subs	r4, r4, r5
 8003be2:	10a4      	asrs	r4, r4, #2
 8003be4:	42a6      	cmp	r6, r4
 8003be6:	d109      	bne.n	8003bfc <__libc_init_array+0x24>
 8003be8:	f000 fff8 	bl	8004bdc <_init>
 8003bec:	2600      	movs	r6, #0
 8003bee:	4d0a      	ldr	r5, [pc, #40]	; (8003c18 <__libc_init_array+0x40>)
 8003bf0:	4c0a      	ldr	r4, [pc, #40]	; (8003c1c <__libc_init_array+0x44>)
 8003bf2:	1b64      	subs	r4, r4, r5
 8003bf4:	10a4      	asrs	r4, r4, #2
 8003bf6:	42a6      	cmp	r6, r4
 8003bf8:	d105      	bne.n	8003c06 <__libc_init_array+0x2e>
 8003bfa:	bd70      	pop	{r4, r5, r6, pc}
 8003bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c00:	4798      	blx	r3
 8003c02:	3601      	adds	r6, #1
 8003c04:	e7ee      	b.n	8003be4 <__libc_init_array+0xc>
 8003c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c0a:	4798      	blx	r3
 8003c0c:	3601      	adds	r6, #1
 8003c0e:	e7f2      	b.n	8003bf6 <__libc_init_array+0x1e>
 8003c10:	08004d4c 	.word	0x08004d4c
 8003c14:	08004d4c 	.word	0x08004d4c
 8003c18:	08004d4c 	.word	0x08004d4c
 8003c1c:	08004d50 	.word	0x08004d50

08003c20 <memset>:
 8003c20:	4603      	mov	r3, r0
 8003c22:	4402      	add	r2, r0
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d100      	bne.n	8003c2a <memset+0xa>
 8003c28:	4770      	bx	lr
 8003c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c2e:	e7f9      	b.n	8003c24 <memset+0x4>

08003c30 <iprintf>:
 8003c30:	b40f      	push	{r0, r1, r2, r3}
 8003c32:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <iprintf+0x2c>)
 8003c34:	b513      	push	{r0, r1, r4, lr}
 8003c36:	681c      	ldr	r4, [r3, #0]
 8003c38:	b124      	cbz	r4, 8003c44 <iprintf+0x14>
 8003c3a:	69a3      	ldr	r3, [r4, #24]
 8003c3c:	b913      	cbnz	r3, 8003c44 <iprintf+0x14>
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f000 fa5e 	bl	8004100 <__sinit>
 8003c44:	ab05      	add	r3, sp, #20
 8003c46:	4620      	mov	r0, r4
 8003c48:	9a04      	ldr	r2, [sp, #16]
 8003c4a:	68a1      	ldr	r1, [r4, #8]
 8003c4c:	9301      	str	r3, [sp, #4]
 8003c4e:	f000 fc29 	bl	80044a4 <_vfiprintf_r>
 8003c52:	b002      	add	sp, #8
 8003c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c58:	b004      	add	sp, #16
 8003c5a:	4770      	bx	lr
 8003c5c:	20000088 	.word	0x20000088

08003c60 <_puts_r>:
 8003c60:	b570      	push	{r4, r5, r6, lr}
 8003c62:	460e      	mov	r6, r1
 8003c64:	4605      	mov	r5, r0
 8003c66:	b118      	cbz	r0, 8003c70 <_puts_r+0x10>
 8003c68:	6983      	ldr	r3, [r0, #24]
 8003c6a:	b90b      	cbnz	r3, 8003c70 <_puts_r+0x10>
 8003c6c:	f000 fa48 	bl	8004100 <__sinit>
 8003c70:	69ab      	ldr	r3, [r5, #24]
 8003c72:	68ac      	ldr	r4, [r5, #8]
 8003c74:	b913      	cbnz	r3, 8003c7c <_puts_r+0x1c>
 8003c76:	4628      	mov	r0, r5
 8003c78:	f000 fa42 	bl	8004100 <__sinit>
 8003c7c:	4b2c      	ldr	r3, [pc, #176]	; (8003d30 <_puts_r+0xd0>)
 8003c7e:	429c      	cmp	r4, r3
 8003c80:	d120      	bne.n	8003cc4 <_puts_r+0x64>
 8003c82:	686c      	ldr	r4, [r5, #4]
 8003c84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c86:	07db      	lsls	r3, r3, #31
 8003c88:	d405      	bmi.n	8003c96 <_puts_r+0x36>
 8003c8a:	89a3      	ldrh	r3, [r4, #12]
 8003c8c:	0598      	lsls	r0, r3, #22
 8003c8e:	d402      	bmi.n	8003c96 <_puts_r+0x36>
 8003c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c92:	f000 fad3 	bl	800423c <__retarget_lock_acquire_recursive>
 8003c96:	89a3      	ldrh	r3, [r4, #12]
 8003c98:	0719      	lsls	r1, r3, #28
 8003c9a:	d51d      	bpl.n	8003cd8 <_puts_r+0x78>
 8003c9c:	6923      	ldr	r3, [r4, #16]
 8003c9e:	b1db      	cbz	r3, 8003cd8 <_puts_r+0x78>
 8003ca0:	3e01      	subs	r6, #1
 8003ca2:	68a3      	ldr	r3, [r4, #8]
 8003ca4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	60a3      	str	r3, [r4, #8]
 8003cac:	bb39      	cbnz	r1, 8003cfe <_puts_r+0x9e>
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	da38      	bge.n	8003d24 <_puts_r+0xc4>
 8003cb2:	4622      	mov	r2, r4
 8003cb4:	210a      	movs	r1, #10
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	f000 f848 	bl	8003d4c <__swbuf_r>
 8003cbc:	3001      	adds	r0, #1
 8003cbe:	d011      	beq.n	8003ce4 <_puts_r+0x84>
 8003cc0:	250a      	movs	r5, #10
 8003cc2:	e011      	b.n	8003ce8 <_puts_r+0x88>
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	; (8003d34 <_puts_r+0xd4>)
 8003cc6:	429c      	cmp	r4, r3
 8003cc8:	d101      	bne.n	8003cce <_puts_r+0x6e>
 8003cca:	68ac      	ldr	r4, [r5, #8]
 8003ccc:	e7da      	b.n	8003c84 <_puts_r+0x24>
 8003cce:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <_puts_r+0xd8>)
 8003cd0:	429c      	cmp	r4, r3
 8003cd2:	bf08      	it	eq
 8003cd4:	68ec      	ldreq	r4, [r5, #12]
 8003cd6:	e7d5      	b.n	8003c84 <_puts_r+0x24>
 8003cd8:	4621      	mov	r1, r4
 8003cda:	4628      	mov	r0, r5
 8003cdc:	f000 f888 	bl	8003df0 <__swsetup_r>
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	d0dd      	beq.n	8003ca0 <_puts_r+0x40>
 8003ce4:	f04f 35ff 	mov.w	r5, #4294967295
 8003ce8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cea:	07da      	lsls	r2, r3, #31
 8003cec:	d405      	bmi.n	8003cfa <_puts_r+0x9a>
 8003cee:	89a3      	ldrh	r3, [r4, #12]
 8003cf0:	059b      	lsls	r3, r3, #22
 8003cf2:	d402      	bmi.n	8003cfa <_puts_r+0x9a>
 8003cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cf6:	f000 faa2 	bl	800423e <__retarget_lock_release_recursive>
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	bd70      	pop	{r4, r5, r6, pc}
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	da04      	bge.n	8003d0c <_puts_r+0xac>
 8003d02:	69a2      	ldr	r2, [r4, #24]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	dc06      	bgt.n	8003d16 <_puts_r+0xb6>
 8003d08:	290a      	cmp	r1, #10
 8003d0a:	d004      	beq.n	8003d16 <_puts_r+0xb6>
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	6022      	str	r2, [r4, #0]
 8003d12:	7019      	strb	r1, [r3, #0]
 8003d14:	e7c5      	b.n	8003ca2 <_puts_r+0x42>
 8003d16:	4622      	mov	r2, r4
 8003d18:	4628      	mov	r0, r5
 8003d1a:	f000 f817 	bl	8003d4c <__swbuf_r>
 8003d1e:	3001      	adds	r0, #1
 8003d20:	d1bf      	bne.n	8003ca2 <_puts_r+0x42>
 8003d22:	e7df      	b.n	8003ce4 <_puts_r+0x84>
 8003d24:	250a      	movs	r5, #10
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	6022      	str	r2, [r4, #0]
 8003d2c:	701d      	strb	r5, [r3, #0]
 8003d2e:	e7db      	b.n	8003ce8 <_puts_r+0x88>
 8003d30:	08004cd8 	.word	0x08004cd8
 8003d34:	08004cf8 	.word	0x08004cf8
 8003d38:	08004cb8 	.word	0x08004cb8

08003d3c <puts>:
 8003d3c:	4b02      	ldr	r3, [pc, #8]	; (8003d48 <puts+0xc>)
 8003d3e:	4601      	mov	r1, r0
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	f7ff bf8d 	b.w	8003c60 <_puts_r>
 8003d46:	bf00      	nop
 8003d48:	20000088 	.word	0x20000088

08003d4c <__swbuf_r>:
 8003d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4e:	460e      	mov	r6, r1
 8003d50:	4614      	mov	r4, r2
 8003d52:	4605      	mov	r5, r0
 8003d54:	b118      	cbz	r0, 8003d5e <__swbuf_r+0x12>
 8003d56:	6983      	ldr	r3, [r0, #24]
 8003d58:	b90b      	cbnz	r3, 8003d5e <__swbuf_r+0x12>
 8003d5a:	f000 f9d1 	bl	8004100 <__sinit>
 8003d5e:	4b21      	ldr	r3, [pc, #132]	; (8003de4 <__swbuf_r+0x98>)
 8003d60:	429c      	cmp	r4, r3
 8003d62:	d12b      	bne.n	8003dbc <__swbuf_r+0x70>
 8003d64:	686c      	ldr	r4, [r5, #4]
 8003d66:	69a3      	ldr	r3, [r4, #24]
 8003d68:	60a3      	str	r3, [r4, #8]
 8003d6a:	89a3      	ldrh	r3, [r4, #12]
 8003d6c:	071a      	lsls	r2, r3, #28
 8003d6e:	d52f      	bpl.n	8003dd0 <__swbuf_r+0x84>
 8003d70:	6923      	ldr	r3, [r4, #16]
 8003d72:	b36b      	cbz	r3, 8003dd0 <__swbuf_r+0x84>
 8003d74:	6923      	ldr	r3, [r4, #16]
 8003d76:	6820      	ldr	r0, [r4, #0]
 8003d78:	b2f6      	uxtb	r6, r6
 8003d7a:	1ac0      	subs	r0, r0, r3
 8003d7c:	6963      	ldr	r3, [r4, #20]
 8003d7e:	4637      	mov	r7, r6
 8003d80:	4283      	cmp	r3, r0
 8003d82:	dc04      	bgt.n	8003d8e <__swbuf_r+0x42>
 8003d84:	4621      	mov	r1, r4
 8003d86:	4628      	mov	r0, r5
 8003d88:	f000 f926 	bl	8003fd8 <_fflush_r>
 8003d8c:	bb30      	cbnz	r0, 8003ddc <__swbuf_r+0x90>
 8003d8e:	68a3      	ldr	r3, [r4, #8]
 8003d90:	3001      	adds	r0, #1
 8003d92:	3b01      	subs	r3, #1
 8003d94:	60a3      	str	r3, [r4, #8]
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	6022      	str	r2, [r4, #0]
 8003d9c:	701e      	strb	r6, [r3, #0]
 8003d9e:	6963      	ldr	r3, [r4, #20]
 8003da0:	4283      	cmp	r3, r0
 8003da2:	d004      	beq.n	8003dae <__swbuf_r+0x62>
 8003da4:	89a3      	ldrh	r3, [r4, #12]
 8003da6:	07db      	lsls	r3, r3, #31
 8003da8:	d506      	bpl.n	8003db8 <__swbuf_r+0x6c>
 8003daa:	2e0a      	cmp	r6, #10
 8003dac:	d104      	bne.n	8003db8 <__swbuf_r+0x6c>
 8003dae:	4621      	mov	r1, r4
 8003db0:	4628      	mov	r0, r5
 8003db2:	f000 f911 	bl	8003fd8 <_fflush_r>
 8003db6:	b988      	cbnz	r0, 8003ddc <__swbuf_r+0x90>
 8003db8:	4638      	mov	r0, r7
 8003dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <__swbuf_r+0x9c>)
 8003dbe:	429c      	cmp	r4, r3
 8003dc0:	d101      	bne.n	8003dc6 <__swbuf_r+0x7a>
 8003dc2:	68ac      	ldr	r4, [r5, #8]
 8003dc4:	e7cf      	b.n	8003d66 <__swbuf_r+0x1a>
 8003dc6:	4b09      	ldr	r3, [pc, #36]	; (8003dec <__swbuf_r+0xa0>)
 8003dc8:	429c      	cmp	r4, r3
 8003dca:	bf08      	it	eq
 8003dcc:	68ec      	ldreq	r4, [r5, #12]
 8003dce:	e7ca      	b.n	8003d66 <__swbuf_r+0x1a>
 8003dd0:	4621      	mov	r1, r4
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	f000 f80c 	bl	8003df0 <__swsetup_r>
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	d0cb      	beq.n	8003d74 <__swbuf_r+0x28>
 8003ddc:	f04f 37ff 	mov.w	r7, #4294967295
 8003de0:	e7ea      	b.n	8003db8 <__swbuf_r+0x6c>
 8003de2:	bf00      	nop
 8003de4:	08004cd8 	.word	0x08004cd8
 8003de8:	08004cf8 	.word	0x08004cf8
 8003dec:	08004cb8 	.word	0x08004cb8

08003df0 <__swsetup_r>:
 8003df0:	4b32      	ldr	r3, [pc, #200]	; (8003ebc <__swsetup_r+0xcc>)
 8003df2:	b570      	push	{r4, r5, r6, lr}
 8003df4:	681d      	ldr	r5, [r3, #0]
 8003df6:	4606      	mov	r6, r0
 8003df8:	460c      	mov	r4, r1
 8003dfa:	b125      	cbz	r5, 8003e06 <__swsetup_r+0x16>
 8003dfc:	69ab      	ldr	r3, [r5, #24]
 8003dfe:	b913      	cbnz	r3, 8003e06 <__swsetup_r+0x16>
 8003e00:	4628      	mov	r0, r5
 8003e02:	f000 f97d 	bl	8004100 <__sinit>
 8003e06:	4b2e      	ldr	r3, [pc, #184]	; (8003ec0 <__swsetup_r+0xd0>)
 8003e08:	429c      	cmp	r4, r3
 8003e0a:	d10f      	bne.n	8003e2c <__swsetup_r+0x3c>
 8003e0c:	686c      	ldr	r4, [r5, #4]
 8003e0e:	89a3      	ldrh	r3, [r4, #12]
 8003e10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e14:	0719      	lsls	r1, r3, #28
 8003e16:	d42c      	bmi.n	8003e72 <__swsetup_r+0x82>
 8003e18:	06dd      	lsls	r5, r3, #27
 8003e1a:	d411      	bmi.n	8003e40 <__swsetup_r+0x50>
 8003e1c:	2309      	movs	r3, #9
 8003e1e:	6033      	str	r3, [r6, #0]
 8003e20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e24:	f04f 30ff 	mov.w	r0, #4294967295
 8003e28:	81a3      	strh	r3, [r4, #12]
 8003e2a:	e03e      	b.n	8003eaa <__swsetup_r+0xba>
 8003e2c:	4b25      	ldr	r3, [pc, #148]	; (8003ec4 <__swsetup_r+0xd4>)
 8003e2e:	429c      	cmp	r4, r3
 8003e30:	d101      	bne.n	8003e36 <__swsetup_r+0x46>
 8003e32:	68ac      	ldr	r4, [r5, #8]
 8003e34:	e7eb      	b.n	8003e0e <__swsetup_r+0x1e>
 8003e36:	4b24      	ldr	r3, [pc, #144]	; (8003ec8 <__swsetup_r+0xd8>)
 8003e38:	429c      	cmp	r4, r3
 8003e3a:	bf08      	it	eq
 8003e3c:	68ec      	ldreq	r4, [r5, #12]
 8003e3e:	e7e6      	b.n	8003e0e <__swsetup_r+0x1e>
 8003e40:	0758      	lsls	r0, r3, #29
 8003e42:	d512      	bpl.n	8003e6a <__swsetup_r+0x7a>
 8003e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e46:	b141      	cbz	r1, 8003e5a <__swsetup_r+0x6a>
 8003e48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e4c:	4299      	cmp	r1, r3
 8003e4e:	d002      	beq.n	8003e56 <__swsetup_r+0x66>
 8003e50:	4630      	mov	r0, r6
 8003e52:	f000 fa59 	bl	8004308 <_free_r>
 8003e56:	2300      	movs	r3, #0
 8003e58:	6363      	str	r3, [r4, #52]	; 0x34
 8003e5a:	89a3      	ldrh	r3, [r4, #12]
 8003e5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e60:	81a3      	strh	r3, [r4, #12]
 8003e62:	2300      	movs	r3, #0
 8003e64:	6063      	str	r3, [r4, #4]
 8003e66:	6923      	ldr	r3, [r4, #16]
 8003e68:	6023      	str	r3, [r4, #0]
 8003e6a:	89a3      	ldrh	r3, [r4, #12]
 8003e6c:	f043 0308 	orr.w	r3, r3, #8
 8003e70:	81a3      	strh	r3, [r4, #12]
 8003e72:	6923      	ldr	r3, [r4, #16]
 8003e74:	b94b      	cbnz	r3, 8003e8a <__swsetup_r+0x9a>
 8003e76:	89a3      	ldrh	r3, [r4, #12]
 8003e78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e80:	d003      	beq.n	8003e8a <__swsetup_r+0x9a>
 8003e82:	4621      	mov	r1, r4
 8003e84:	4630      	mov	r0, r6
 8003e86:	f000 f9ff 	bl	8004288 <__smakebuf_r>
 8003e8a:	89a0      	ldrh	r0, [r4, #12]
 8003e8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e90:	f010 0301 	ands.w	r3, r0, #1
 8003e94:	d00a      	beq.n	8003eac <__swsetup_r+0xbc>
 8003e96:	2300      	movs	r3, #0
 8003e98:	60a3      	str	r3, [r4, #8]
 8003e9a:	6963      	ldr	r3, [r4, #20]
 8003e9c:	425b      	negs	r3, r3
 8003e9e:	61a3      	str	r3, [r4, #24]
 8003ea0:	6923      	ldr	r3, [r4, #16]
 8003ea2:	b943      	cbnz	r3, 8003eb6 <__swsetup_r+0xc6>
 8003ea4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ea8:	d1ba      	bne.n	8003e20 <__swsetup_r+0x30>
 8003eaa:	bd70      	pop	{r4, r5, r6, pc}
 8003eac:	0781      	lsls	r1, r0, #30
 8003eae:	bf58      	it	pl
 8003eb0:	6963      	ldrpl	r3, [r4, #20]
 8003eb2:	60a3      	str	r3, [r4, #8]
 8003eb4:	e7f4      	b.n	8003ea0 <__swsetup_r+0xb0>
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	e7f7      	b.n	8003eaa <__swsetup_r+0xba>
 8003eba:	bf00      	nop
 8003ebc:	20000088 	.word	0x20000088
 8003ec0:	08004cd8 	.word	0x08004cd8
 8003ec4:	08004cf8 	.word	0x08004cf8
 8003ec8:	08004cb8 	.word	0x08004cb8

08003ecc <__sflush_r>:
 8003ecc:	898a      	ldrh	r2, [r1, #12]
 8003ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed2:	4605      	mov	r5, r0
 8003ed4:	0710      	lsls	r0, r2, #28
 8003ed6:	460c      	mov	r4, r1
 8003ed8:	d458      	bmi.n	8003f8c <__sflush_r+0xc0>
 8003eda:	684b      	ldr	r3, [r1, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	dc05      	bgt.n	8003eec <__sflush_r+0x20>
 8003ee0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	dc02      	bgt.n	8003eec <__sflush_r+0x20>
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003eec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003eee:	2e00      	cmp	r6, #0
 8003ef0:	d0f9      	beq.n	8003ee6 <__sflush_r+0x1a>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ef8:	682f      	ldr	r7, [r5, #0]
 8003efa:	602b      	str	r3, [r5, #0]
 8003efc:	d032      	beq.n	8003f64 <__sflush_r+0x98>
 8003efe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f00:	89a3      	ldrh	r3, [r4, #12]
 8003f02:	075a      	lsls	r2, r3, #29
 8003f04:	d505      	bpl.n	8003f12 <__sflush_r+0x46>
 8003f06:	6863      	ldr	r3, [r4, #4]
 8003f08:	1ac0      	subs	r0, r0, r3
 8003f0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f0c:	b10b      	cbz	r3, 8003f12 <__sflush_r+0x46>
 8003f0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f10:	1ac0      	subs	r0, r0, r3
 8003f12:	2300      	movs	r3, #0
 8003f14:	4602      	mov	r2, r0
 8003f16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f18:	4628      	mov	r0, r5
 8003f1a:	6a21      	ldr	r1, [r4, #32]
 8003f1c:	47b0      	blx	r6
 8003f1e:	1c43      	adds	r3, r0, #1
 8003f20:	89a3      	ldrh	r3, [r4, #12]
 8003f22:	d106      	bne.n	8003f32 <__sflush_r+0x66>
 8003f24:	6829      	ldr	r1, [r5, #0]
 8003f26:	291d      	cmp	r1, #29
 8003f28:	d82c      	bhi.n	8003f84 <__sflush_r+0xb8>
 8003f2a:	4a2a      	ldr	r2, [pc, #168]	; (8003fd4 <__sflush_r+0x108>)
 8003f2c:	40ca      	lsrs	r2, r1
 8003f2e:	07d6      	lsls	r6, r2, #31
 8003f30:	d528      	bpl.n	8003f84 <__sflush_r+0xb8>
 8003f32:	2200      	movs	r2, #0
 8003f34:	6062      	str	r2, [r4, #4]
 8003f36:	6922      	ldr	r2, [r4, #16]
 8003f38:	04d9      	lsls	r1, r3, #19
 8003f3a:	6022      	str	r2, [r4, #0]
 8003f3c:	d504      	bpl.n	8003f48 <__sflush_r+0x7c>
 8003f3e:	1c42      	adds	r2, r0, #1
 8003f40:	d101      	bne.n	8003f46 <__sflush_r+0x7a>
 8003f42:	682b      	ldr	r3, [r5, #0]
 8003f44:	b903      	cbnz	r3, 8003f48 <__sflush_r+0x7c>
 8003f46:	6560      	str	r0, [r4, #84]	; 0x54
 8003f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f4a:	602f      	str	r7, [r5, #0]
 8003f4c:	2900      	cmp	r1, #0
 8003f4e:	d0ca      	beq.n	8003ee6 <__sflush_r+0x1a>
 8003f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f54:	4299      	cmp	r1, r3
 8003f56:	d002      	beq.n	8003f5e <__sflush_r+0x92>
 8003f58:	4628      	mov	r0, r5
 8003f5a:	f000 f9d5 	bl	8004308 <_free_r>
 8003f5e:	2000      	movs	r0, #0
 8003f60:	6360      	str	r0, [r4, #52]	; 0x34
 8003f62:	e7c1      	b.n	8003ee8 <__sflush_r+0x1c>
 8003f64:	6a21      	ldr	r1, [r4, #32]
 8003f66:	2301      	movs	r3, #1
 8003f68:	4628      	mov	r0, r5
 8003f6a:	47b0      	blx	r6
 8003f6c:	1c41      	adds	r1, r0, #1
 8003f6e:	d1c7      	bne.n	8003f00 <__sflush_r+0x34>
 8003f70:	682b      	ldr	r3, [r5, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0c4      	beq.n	8003f00 <__sflush_r+0x34>
 8003f76:	2b1d      	cmp	r3, #29
 8003f78:	d001      	beq.n	8003f7e <__sflush_r+0xb2>
 8003f7a:	2b16      	cmp	r3, #22
 8003f7c:	d101      	bne.n	8003f82 <__sflush_r+0xb6>
 8003f7e:	602f      	str	r7, [r5, #0]
 8003f80:	e7b1      	b.n	8003ee6 <__sflush_r+0x1a>
 8003f82:	89a3      	ldrh	r3, [r4, #12]
 8003f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f88:	81a3      	strh	r3, [r4, #12]
 8003f8a:	e7ad      	b.n	8003ee8 <__sflush_r+0x1c>
 8003f8c:	690f      	ldr	r7, [r1, #16]
 8003f8e:	2f00      	cmp	r7, #0
 8003f90:	d0a9      	beq.n	8003ee6 <__sflush_r+0x1a>
 8003f92:	0793      	lsls	r3, r2, #30
 8003f94:	bf18      	it	ne
 8003f96:	2300      	movne	r3, #0
 8003f98:	680e      	ldr	r6, [r1, #0]
 8003f9a:	bf08      	it	eq
 8003f9c:	694b      	ldreq	r3, [r1, #20]
 8003f9e:	eba6 0807 	sub.w	r8, r6, r7
 8003fa2:	600f      	str	r7, [r1, #0]
 8003fa4:	608b      	str	r3, [r1, #8]
 8003fa6:	f1b8 0f00 	cmp.w	r8, #0
 8003faa:	dd9c      	ble.n	8003ee6 <__sflush_r+0x1a>
 8003fac:	4643      	mov	r3, r8
 8003fae:	463a      	mov	r2, r7
 8003fb0:	4628      	mov	r0, r5
 8003fb2:	6a21      	ldr	r1, [r4, #32]
 8003fb4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003fb6:	47b0      	blx	r6
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	dc06      	bgt.n	8003fca <__sflush_r+0xfe>
 8003fbc:	89a3      	ldrh	r3, [r4, #12]
 8003fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fc6:	81a3      	strh	r3, [r4, #12]
 8003fc8:	e78e      	b.n	8003ee8 <__sflush_r+0x1c>
 8003fca:	4407      	add	r7, r0
 8003fcc:	eba8 0800 	sub.w	r8, r8, r0
 8003fd0:	e7e9      	b.n	8003fa6 <__sflush_r+0xda>
 8003fd2:	bf00      	nop
 8003fd4:	20400001 	.word	0x20400001

08003fd8 <_fflush_r>:
 8003fd8:	b538      	push	{r3, r4, r5, lr}
 8003fda:	690b      	ldr	r3, [r1, #16]
 8003fdc:	4605      	mov	r5, r0
 8003fde:	460c      	mov	r4, r1
 8003fe0:	b913      	cbnz	r3, 8003fe8 <_fflush_r+0x10>
 8003fe2:	2500      	movs	r5, #0
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	bd38      	pop	{r3, r4, r5, pc}
 8003fe8:	b118      	cbz	r0, 8003ff2 <_fflush_r+0x1a>
 8003fea:	6983      	ldr	r3, [r0, #24]
 8003fec:	b90b      	cbnz	r3, 8003ff2 <_fflush_r+0x1a>
 8003fee:	f000 f887 	bl	8004100 <__sinit>
 8003ff2:	4b14      	ldr	r3, [pc, #80]	; (8004044 <_fflush_r+0x6c>)
 8003ff4:	429c      	cmp	r4, r3
 8003ff6:	d11b      	bne.n	8004030 <_fflush_r+0x58>
 8003ff8:	686c      	ldr	r4, [r5, #4]
 8003ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0ef      	beq.n	8003fe2 <_fflush_r+0xa>
 8004002:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004004:	07d0      	lsls	r0, r2, #31
 8004006:	d404      	bmi.n	8004012 <_fflush_r+0x3a>
 8004008:	0599      	lsls	r1, r3, #22
 800400a:	d402      	bmi.n	8004012 <_fflush_r+0x3a>
 800400c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800400e:	f000 f915 	bl	800423c <__retarget_lock_acquire_recursive>
 8004012:	4628      	mov	r0, r5
 8004014:	4621      	mov	r1, r4
 8004016:	f7ff ff59 	bl	8003ecc <__sflush_r>
 800401a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800401c:	4605      	mov	r5, r0
 800401e:	07da      	lsls	r2, r3, #31
 8004020:	d4e0      	bmi.n	8003fe4 <_fflush_r+0xc>
 8004022:	89a3      	ldrh	r3, [r4, #12]
 8004024:	059b      	lsls	r3, r3, #22
 8004026:	d4dd      	bmi.n	8003fe4 <_fflush_r+0xc>
 8004028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800402a:	f000 f908 	bl	800423e <__retarget_lock_release_recursive>
 800402e:	e7d9      	b.n	8003fe4 <_fflush_r+0xc>
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <_fflush_r+0x70>)
 8004032:	429c      	cmp	r4, r3
 8004034:	d101      	bne.n	800403a <_fflush_r+0x62>
 8004036:	68ac      	ldr	r4, [r5, #8]
 8004038:	e7df      	b.n	8003ffa <_fflush_r+0x22>
 800403a:	4b04      	ldr	r3, [pc, #16]	; (800404c <_fflush_r+0x74>)
 800403c:	429c      	cmp	r4, r3
 800403e:	bf08      	it	eq
 8004040:	68ec      	ldreq	r4, [r5, #12]
 8004042:	e7da      	b.n	8003ffa <_fflush_r+0x22>
 8004044:	08004cd8 	.word	0x08004cd8
 8004048:	08004cf8 	.word	0x08004cf8
 800404c:	08004cb8 	.word	0x08004cb8

08004050 <std>:
 8004050:	2300      	movs	r3, #0
 8004052:	b510      	push	{r4, lr}
 8004054:	4604      	mov	r4, r0
 8004056:	e9c0 3300 	strd	r3, r3, [r0]
 800405a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800405e:	6083      	str	r3, [r0, #8]
 8004060:	8181      	strh	r1, [r0, #12]
 8004062:	6643      	str	r3, [r0, #100]	; 0x64
 8004064:	81c2      	strh	r2, [r0, #14]
 8004066:	6183      	str	r3, [r0, #24]
 8004068:	4619      	mov	r1, r3
 800406a:	2208      	movs	r2, #8
 800406c:	305c      	adds	r0, #92	; 0x5c
 800406e:	f7ff fdd7 	bl	8003c20 <memset>
 8004072:	4b05      	ldr	r3, [pc, #20]	; (8004088 <std+0x38>)
 8004074:	6224      	str	r4, [r4, #32]
 8004076:	6263      	str	r3, [r4, #36]	; 0x24
 8004078:	4b04      	ldr	r3, [pc, #16]	; (800408c <std+0x3c>)
 800407a:	62a3      	str	r3, [r4, #40]	; 0x28
 800407c:	4b04      	ldr	r3, [pc, #16]	; (8004090 <std+0x40>)
 800407e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004080:	4b04      	ldr	r3, [pc, #16]	; (8004094 <std+0x44>)
 8004082:	6323      	str	r3, [r4, #48]	; 0x30
 8004084:	bd10      	pop	{r4, pc}
 8004086:	bf00      	nop
 8004088:	08004a51 	.word	0x08004a51
 800408c:	08004a73 	.word	0x08004a73
 8004090:	08004aab 	.word	0x08004aab
 8004094:	08004acf 	.word	0x08004acf

08004098 <_cleanup_r>:
 8004098:	4901      	ldr	r1, [pc, #4]	; (80040a0 <_cleanup_r+0x8>)
 800409a:	f000 b8af 	b.w	80041fc <_fwalk_reent>
 800409e:	bf00      	nop
 80040a0:	08003fd9 	.word	0x08003fd9

080040a4 <__sfmoreglue>:
 80040a4:	b570      	push	{r4, r5, r6, lr}
 80040a6:	2568      	movs	r5, #104	; 0x68
 80040a8:	1e4a      	subs	r2, r1, #1
 80040aa:	4355      	muls	r5, r2
 80040ac:	460e      	mov	r6, r1
 80040ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80040b2:	f000 f975 	bl	80043a0 <_malloc_r>
 80040b6:	4604      	mov	r4, r0
 80040b8:	b140      	cbz	r0, 80040cc <__sfmoreglue+0x28>
 80040ba:	2100      	movs	r1, #0
 80040bc:	e9c0 1600 	strd	r1, r6, [r0]
 80040c0:	300c      	adds	r0, #12
 80040c2:	60a0      	str	r0, [r4, #8]
 80040c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80040c8:	f7ff fdaa 	bl	8003c20 <memset>
 80040cc:	4620      	mov	r0, r4
 80040ce:	bd70      	pop	{r4, r5, r6, pc}

080040d0 <__sfp_lock_acquire>:
 80040d0:	4801      	ldr	r0, [pc, #4]	; (80040d8 <__sfp_lock_acquire+0x8>)
 80040d2:	f000 b8b3 	b.w	800423c <__retarget_lock_acquire_recursive>
 80040d6:	bf00      	nop
 80040d8:	2000034c 	.word	0x2000034c

080040dc <__sfp_lock_release>:
 80040dc:	4801      	ldr	r0, [pc, #4]	; (80040e4 <__sfp_lock_release+0x8>)
 80040de:	f000 b8ae 	b.w	800423e <__retarget_lock_release_recursive>
 80040e2:	bf00      	nop
 80040e4:	2000034c 	.word	0x2000034c

080040e8 <__sinit_lock_acquire>:
 80040e8:	4801      	ldr	r0, [pc, #4]	; (80040f0 <__sinit_lock_acquire+0x8>)
 80040ea:	f000 b8a7 	b.w	800423c <__retarget_lock_acquire_recursive>
 80040ee:	bf00      	nop
 80040f0:	20000347 	.word	0x20000347

080040f4 <__sinit_lock_release>:
 80040f4:	4801      	ldr	r0, [pc, #4]	; (80040fc <__sinit_lock_release+0x8>)
 80040f6:	f000 b8a2 	b.w	800423e <__retarget_lock_release_recursive>
 80040fa:	bf00      	nop
 80040fc:	20000347 	.word	0x20000347

08004100 <__sinit>:
 8004100:	b510      	push	{r4, lr}
 8004102:	4604      	mov	r4, r0
 8004104:	f7ff fff0 	bl	80040e8 <__sinit_lock_acquire>
 8004108:	69a3      	ldr	r3, [r4, #24]
 800410a:	b11b      	cbz	r3, 8004114 <__sinit+0x14>
 800410c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004110:	f7ff bff0 	b.w	80040f4 <__sinit_lock_release>
 8004114:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004118:	6523      	str	r3, [r4, #80]	; 0x50
 800411a:	4b13      	ldr	r3, [pc, #76]	; (8004168 <__sinit+0x68>)
 800411c:	4a13      	ldr	r2, [pc, #76]	; (800416c <__sinit+0x6c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	62a2      	str	r2, [r4, #40]	; 0x28
 8004122:	42a3      	cmp	r3, r4
 8004124:	bf08      	it	eq
 8004126:	2301      	moveq	r3, #1
 8004128:	4620      	mov	r0, r4
 800412a:	bf08      	it	eq
 800412c:	61a3      	streq	r3, [r4, #24]
 800412e:	f000 f81f 	bl	8004170 <__sfp>
 8004132:	6060      	str	r0, [r4, #4]
 8004134:	4620      	mov	r0, r4
 8004136:	f000 f81b 	bl	8004170 <__sfp>
 800413a:	60a0      	str	r0, [r4, #8]
 800413c:	4620      	mov	r0, r4
 800413e:	f000 f817 	bl	8004170 <__sfp>
 8004142:	2200      	movs	r2, #0
 8004144:	2104      	movs	r1, #4
 8004146:	60e0      	str	r0, [r4, #12]
 8004148:	6860      	ldr	r0, [r4, #4]
 800414a:	f7ff ff81 	bl	8004050 <std>
 800414e:	2201      	movs	r2, #1
 8004150:	2109      	movs	r1, #9
 8004152:	68a0      	ldr	r0, [r4, #8]
 8004154:	f7ff ff7c 	bl	8004050 <std>
 8004158:	2202      	movs	r2, #2
 800415a:	2112      	movs	r1, #18
 800415c:	68e0      	ldr	r0, [r4, #12]
 800415e:	f7ff ff77 	bl	8004050 <std>
 8004162:	2301      	movs	r3, #1
 8004164:	61a3      	str	r3, [r4, #24]
 8004166:	e7d1      	b.n	800410c <__sinit+0xc>
 8004168:	08004cb4 	.word	0x08004cb4
 800416c:	08004099 	.word	0x08004099

08004170 <__sfp>:
 8004170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004172:	4607      	mov	r7, r0
 8004174:	f7ff ffac 	bl	80040d0 <__sfp_lock_acquire>
 8004178:	4b1e      	ldr	r3, [pc, #120]	; (80041f4 <__sfp+0x84>)
 800417a:	681e      	ldr	r6, [r3, #0]
 800417c:	69b3      	ldr	r3, [r6, #24]
 800417e:	b913      	cbnz	r3, 8004186 <__sfp+0x16>
 8004180:	4630      	mov	r0, r6
 8004182:	f7ff ffbd 	bl	8004100 <__sinit>
 8004186:	3648      	adds	r6, #72	; 0x48
 8004188:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800418c:	3b01      	subs	r3, #1
 800418e:	d503      	bpl.n	8004198 <__sfp+0x28>
 8004190:	6833      	ldr	r3, [r6, #0]
 8004192:	b30b      	cbz	r3, 80041d8 <__sfp+0x68>
 8004194:	6836      	ldr	r6, [r6, #0]
 8004196:	e7f7      	b.n	8004188 <__sfp+0x18>
 8004198:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800419c:	b9d5      	cbnz	r5, 80041d4 <__sfp+0x64>
 800419e:	4b16      	ldr	r3, [pc, #88]	; (80041f8 <__sfp+0x88>)
 80041a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80041a4:	60e3      	str	r3, [r4, #12]
 80041a6:	6665      	str	r5, [r4, #100]	; 0x64
 80041a8:	f000 f847 	bl	800423a <__retarget_lock_init_recursive>
 80041ac:	f7ff ff96 	bl	80040dc <__sfp_lock_release>
 80041b0:	2208      	movs	r2, #8
 80041b2:	4629      	mov	r1, r5
 80041b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80041b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80041bc:	6025      	str	r5, [r4, #0]
 80041be:	61a5      	str	r5, [r4, #24]
 80041c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80041c4:	f7ff fd2c 	bl	8003c20 <memset>
 80041c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80041cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80041d0:	4620      	mov	r0, r4
 80041d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041d4:	3468      	adds	r4, #104	; 0x68
 80041d6:	e7d9      	b.n	800418c <__sfp+0x1c>
 80041d8:	2104      	movs	r1, #4
 80041da:	4638      	mov	r0, r7
 80041dc:	f7ff ff62 	bl	80040a4 <__sfmoreglue>
 80041e0:	4604      	mov	r4, r0
 80041e2:	6030      	str	r0, [r6, #0]
 80041e4:	2800      	cmp	r0, #0
 80041e6:	d1d5      	bne.n	8004194 <__sfp+0x24>
 80041e8:	f7ff ff78 	bl	80040dc <__sfp_lock_release>
 80041ec:	230c      	movs	r3, #12
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	e7ee      	b.n	80041d0 <__sfp+0x60>
 80041f2:	bf00      	nop
 80041f4:	08004cb4 	.word	0x08004cb4
 80041f8:	ffff0001 	.word	0xffff0001

080041fc <_fwalk_reent>:
 80041fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004200:	4606      	mov	r6, r0
 8004202:	4688      	mov	r8, r1
 8004204:	2700      	movs	r7, #0
 8004206:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800420a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800420e:	f1b9 0901 	subs.w	r9, r9, #1
 8004212:	d505      	bpl.n	8004220 <_fwalk_reent+0x24>
 8004214:	6824      	ldr	r4, [r4, #0]
 8004216:	2c00      	cmp	r4, #0
 8004218:	d1f7      	bne.n	800420a <_fwalk_reent+0xe>
 800421a:	4638      	mov	r0, r7
 800421c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004220:	89ab      	ldrh	r3, [r5, #12]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d907      	bls.n	8004236 <_fwalk_reent+0x3a>
 8004226:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800422a:	3301      	adds	r3, #1
 800422c:	d003      	beq.n	8004236 <_fwalk_reent+0x3a>
 800422e:	4629      	mov	r1, r5
 8004230:	4630      	mov	r0, r6
 8004232:	47c0      	blx	r8
 8004234:	4307      	orrs	r7, r0
 8004236:	3568      	adds	r5, #104	; 0x68
 8004238:	e7e9      	b.n	800420e <_fwalk_reent+0x12>

0800423a <__retarget_lock_init_recursive>:
 800423a:	4770      	bx	lr

0800423c <__retarget_lock_acquire_recursive>:
 800423c:	4770      	bx	lr

0800423e <__retarget_lock_release_recursive>:
 800423e:	4770      	bx	lr

08004240 <__swhatbuf_r>:
 8004240:	b570      	push	{r4, r5, r6, lr}
 8004242:	460e      	mov	r6, r1
 8004244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004248:	4614      	mov	r4, r2
 800424a:	2900      	cmp	r1, #0
 800424c:	461d      	mov	r5, r3
 800424e:	b096      	sub	sp, #88	; 0x58
 8004250:	da07      	bge.n	8004262 <__swhatbuf_r+0x22>
 8004252:	2300      	movs	r3, #0
 8004254:	602b      	str	r3, [r5, #0]
 8004256:	89b3      	ldrh	r3, [r6, #12]
 8004258:	061a      	lsls	r2, r3, #24
 800425a:	d410      	bmi.n	800427e <__swhatbuf_r+0x3e>
 800425c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004260:	e00e      	b.n	8004280 <__swhatbuf_r+0x40>
 8004262:	466a      	mov	r2, sp
 8004264:	f000 fc5a 	bl	8004b1c <_fstat_r>
 8004268:	2800      	cmp	r0, #0
 800426a:	dbf2      	blt.n	8004252 <__swhatbuf_r+0x12>
 800426c:	9a01      	ldr	r2, [sp, #4]
 800426e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004272:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004276:	425a      	negs	r2, r3
 8004278:	415a      	adcs	r2, r3
 800427a:	602a      	str	r2, [r5, #0]
 800427c:	e7ee      	b.n	800425c <__swhatbuf_r+0x1c>
 800427e:	2340      	movs	r3, #64	; 0x40
 8004280:	2000      	movs	r0, #0
 8004282:	6023      	str	r3, [r4, #0]
 8004284:	b016      	add	sp, #88	; 0x58
 8004286:	bd70      	pop	{r4, r5, r6, pc}

08004288 <__smakebuf_r>:
 8004288:	898b      	ldrh	r3, [r1, #12]
 800428a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800428c:	079d      	lsls	r5, r3, #30
 800428e:	4606      	mov	r6, r0
 8004290:	460c      	mov	r4, r1
 8004292:	d507      	bpl.n	80042a4 <__smakebuf_r+0x1c>
 8004294:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004298:	6023      	str	r3, [r4, #0]
 800429a:	6123      	str	r3, [r4, #16]
 800429c:	2301      	movs	r3, #1
 800429e:	6163      	str	r3, [r4, #20]
 80042a0:	b002      	add	sp, #8
 80042a2:	bd70      	pop	{r4, r5, r6, pc}
 80042a4:	466a      	mov	r2, sp
 80042a6:	ab01      	add	r3, sp, #4
 80042a8:	f7ff ffca 	bl	8004240 <__swhatbuf_r>
 80042ac:	9900      	ldr	r1, [sp, #0]
 80042ae:	4605      	mov	r5, r0
 80042b0:	4630      	mov	r0, r6
 80042b2:	f000 f875 	bl	80043a0 <_malloc_r>
 80042b6:	b948      	cbnz	r0, 80042cc <__smakebuf_r+0x44>
 80042b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042bc:	059a      	lsls	r2, r3, #22
 80042be:	d4ef      	bmi.n	80042a0 <__smakebuf_r+0x18>
 80042c0:	f023 0303 	bic.w	r3, r3, #3
 80042c4:	f043 0302 	orr.w	r3, r3, #2
 80042c8:	81a3      	strh	r3, [r4, #12]
 80042ca:	e7e3      	b.n	8004294 <__smakebuf_r+0xc>
 80042cc:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <__smakebuf_r+0x7c>)
 80042ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80042d0:	89a3      	ldrh	r3, [r4, #12]
 80042d2:	6020      	str	r0, [r4, #0]
 80042d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d8:	81a3      	strh	r3, [r4, #12]
 80042da:	9b00      	ldr	r3, [sp, #0]
 80042dc:	6120      	str	r0, [r4, #16]
 80042de:	6163      	str	r3, [r4, #20]
 80042e0:	9b01      	ldr	r3, [sp, #4]
 80042e2:	b15b      	cbz	r3, 80042fc <__smakebuf_r+0x74>
 80042e4:	4630      	mov	r0, r6
 80042e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042ea:	f000 fc29 	bl	8004b40 <_isatty_r>
 80042ee:	b128      	cbz	r0, 80042fc <__smakebuf_r+0x74>
 80042f0:	89a3      	ldrh	r3, [r4, #12]
 80042f2:	f023 0303 	bic.w	r3, r3, #3
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	81a3      	strh	r3, [r4, #12]
 80042fc:	89a0      	ldrh	r0, [r4, #12]
 80042fe:	4305      	orrs	r5, r0
 8004300:	81a5      	strh	r5, [r4, #12]
 8004302:	e7cd      	b.n	80042a0 <__smakebuf_r+0x18>
 8004304:	08004099 	.word	0x08004099

08004308 <_free_r>:
 8004308:	b538      	push	{r3, r4, r5, lr}
 800430a:	4605      	mov	r5, r0
 800430c:	2900      	cmp	r1, #0
 800430e:	d043      	beq.n	8004398 <_free_r+0x90>
 8004310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004314:	1f0c      	subs	r4, r1, #4
 8004316:	2b00      	cmp	r3, #0
 8004318:	bfb8      	it	lt
 800431a:	18e4      	addlt	r4, r4, r3
 800431c:	f000 fc40 	bl	8004ba0 <__malloc_lock>
 8004320:	4a1e      	ldr	r2, [pc, #120]	; (800439c <_free_r+0x94>)
 8004322:	6813      	ldr	r3, [r2, #0]
 8004324:	4610      	mov	r0, r2
 8004326:	b933      	cbnz	r3, 8004336 <_free_r+0x2e>
 8004328:	6063      	str	r3, [r4, #4]
 800432a:	6014      	str	r4, [r2, #0]
 800432c:	4628      	mov	r0, r5
 800432e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004332:	f000 bc3b 	b.w	8004bac <__malloc_unlock>
 8004336:	42a3      	cmp	r3, r4
 8004338:	d90a      	bls.n	8004350 <_free_r+0x48>
 800433a:	6821      	ldr	r1, [r4, #0]
 800433c:	1862      	adds	r2, r4, r1
 800433e:	4293      	cmp	r3, r2
 8004340:	bf01      	itttt	eq
 8004342:	681a      	ldreq	r2, [r3, #0]
 8004344:	685b      	ldreq	r3, [r3, #4]
 8004346:	1852      	addeq	r2, r2, r1
 8004348:	6022      	streq	r2, [r4, #0]
 800434a:	6063      	str	r3, [r4, #4]
 800434c:	6004      	str	r4, [r0, #0]
 800434e:	e7ed      	b.n	800432c <_free_r+0x24>
 8004350:	461a      	mov	r2, r3
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	b10b      	cbz	r3, 800435a <_free_r+0x52>
 8004356:	42a3      	cmp	r3, r4
 8004358:	d9fa      	bls.n	8004350 <_free_r+0x48>
 800435a:	6811      	ldr	r1, [r2, #0]
 800435c:	1850      	adds	r0, r2, r1
 800435e:	42a0      	cmp	r0, r4
 8004360:	d10b      	bne.n	800437a <_free_r+0x72>
 8004362:	6820      	ldr	r0, [r4, #0]
 8004364:	4401      	add	r1, r0
 8004366:	1850      	adds	r0, r2, r1
 8004368:	4283      	cmp	r3, r0
 800436a:	6011      	str	r1, [r2, #0]
 800436c:	d1de      	bne.n	800432c <_free_r+0x24>
 800436e:	6818      	ldr	r0, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	4401      	add	r1, r0
 8004374:	6011      	str	r1, [r2, #0]
 8004376:	6053      	str	r3, [r2, #4]
 8004378:	e7d8      	b.n	800432c <_free_r+0x24>
 800437a:	d902      	bls.n	8004382 <_free_r+0x7a>
 800437c:	230c      	movs	r3, #12
 800437e:	602b      	str	r3, [r5, #0]
 8004380:	e7d4      	b.n	800432c <_free_r+0x24>
 8004382:	6820      	ldr	r0, [r4, #0]
 8004384:	1821      	adds	r1, r4, r0
 8004386:	428b      	cmp	r3, r1
 8004388:	bf01      	itttt	eq
 800438a:	6819      	ldreq	r1, [r3, #0]
 800438c:	685b      	ldreq	r3, [r3, #4]
 800438e:	1809      	addeq	r1, r1, r0
 8004390:	6021      	streq	r1, [r4, #0]
 8004392:	6063      	str	r3, [r4, #4]
 8004394:	6054      	str	r4, [r2, #4]
 8004396:	e7c9      	b.n	800432c <_free_r+0x24>
 8004398:	bd38      	pop	{r3, r4, r5, pc}
 800439a:	bf00      	nop
 800439c:	20000250 	.word	0x20000250

080043a0 <_malloc_r>:
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a2:	1ccd      	adds	r5, r1, #3
 80043a4:	f025 0503 	bic.w	r5, r5, #3
 80043a8:	3508      	adds	r5, #8
 80043aa:	2d0c      	cmp	r5, #12
 80043ac:	bf38      	it	cc
 80043ae:	250c      	movcc	r5, #12
 80043b0:	2d00      	cmp	r5, #0
 80043b2:	4606      	mov	r6, r0
 80043b4:	db01      	blt.n	80043ba <_malloc_r+0x1a>
 80043b6:	42a9      	cmp	r1, r5
 80043b8:	d903      	bls.n	80043c2 <_malloc_r+0x22>
 80043ba:	230c      	movs	r3, #12
 80043bc:	6033      	str	r3, [r6, #0]
 80043be:	2000      	movs	r0, #0
 80043c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043c2:	f000 fbed 	bl	8004ba0 <__malloc_lock>
 80043c6:	4921      	ldr	r1, [pc, #132]	; (800444c <_malloc_r+0xac>)
 80043c8:	680a      	ldr	r2, [r1, #0]
 80043ca:	4614      	mov	r4, r2
 80043cc:	b99c      	cbnz	r4, 80043f6 <_malloc_r+0x56>
 80043ce:	4f20      	ldr	r7, [pc, #128]	; (8004450 <_malloc_r+0xb0>)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	b923      	cbnz	r3, 80043de <_malloc_r+0x3e>
 80043d4:	4621      	mov	r1, r4
 80043d6:	4630      	mov	r0, r6
 80043d8:	f000 fb2a 	bl	8004a30 <_sbrk_r>
 80043dc:	6038      	str	r0, [r7, #0]
 80043de:	4629      	mov	r1, r5
 80043e0:	4630      	mov	r0, r6
 80043e2:	f000 fb25 	bl	8004a30 <_sbrk_r>
 80043e6:	1c43      	adds	r3, r0, #1
 80043e8:	d123      	bne.n	8004432 <_malloc_r+0x92>
 80043ea:	230c      	movs	r3, #12
 80043ec:	4630      	mov	r0, r6
 80043ee:	6033      	str	r3, [r6, #0]
 80043f0:	f000 fbdc 	bl	8004bac <__malloc_unlock>
 80043f4:	e7e3      	b.n	80043be <_malloc_r+0x1e>
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	1b5b      	subs	r3, r3, r5
 80043fa:	d417      	bmi.n	800442c <_malloc_r+0x8c>
 80043fc:	2b0b      	cmp	r3, #11
 80043fe:	d903      	bls.n	8004408 <_malloc_r+0x68>
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	441c      	add	r4, r3
 8004404:	6025      	str	r5, [r4, #0]
 8004406:	e004      	b.n	8004412 <_malloc_r+0x72>
 8004408:	6863      	ldr	r3, [r4, #4]
 800440a:	42a2      	cmp	r2, r4
 800440c:	bf0c      	ite	eq
 800440e:	600b      	streq	r3, [r1, #0]
 8004410:	6053      	strne	r3, [r2, #4]
 8004412:	4630      	mov	r0, r6
 8004414:	f000 fbca 	bl	8004bac <__malloc_unlock>
 8004418:	f104 000b 	add.w	r0, r4, #11
 800441c:	1d23      	adds	r3, r4, #4
 800441e:	f020 0007 	bic.w	r0, r0, #7
 8004422:	1ac2      	subs	r2, r0, r3
 8004424:	d0cc      	beq.n	80043c0 <_malloc_r+0x20>
 8004426:	1a1b      	subs	r3, r3, r0
 8004428:	50a3      	str	r3, [r4, r2]
 800442a:	e7c9      	b.n	80043c0 <_malloc_r+0x20>
 800442c:	4622      	mov	r2, r4
 800442e:	6864      	ldr	r4, [r4, #4]
 8004430:	e7cc      	b.n	80043cc <_malloc_r+0x2c>
 8004432:	1cc4      	adds	r4, r0, #3
 8004434:	f024 0403 	bic.w	r4, r4, #3
 8004438:	42a0      	cmp	r0, r4
 800443a:	d0e3      	beq.n	8004404 <_malloc_r+0x64>
 800443c:	1a21      	subs	r1, r4, r0
 800443e:	4630      	mov	r0, r6
 8004440:	f000 faf6 	bl	8004a30 <_sbrk_r>
 8004444:	3001      	adds	r0, #1
 8004446:	d1dd      	bne.n	8004404 <_malloc_r+0x64>
 8004448:	e7cf      	b.n	80043ea <_malloc_r+0x4a>
 800444a:	bf00      	nop
 800444c:	20000250 	.word	0x20000250
 8004450:	20000254 	.word	0x20000254

08004454 <__sfputc_r>:
 8004454:	6893      	ldr	r3, [r2, #8]
 8004456:	b410      	push	{r4}
 8004458:	3b01      	subs	r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	6093      	str	r3, [r2, #8]
 800445e:	da07      	bge.n	8004470 <__sfputc_r+0x1c>
 8004460:	6994      	ldr	r4, [r2, #24]
 8004462:	42a3      	cmp	r3, r4
 8004464:	db01      	blt.n	800446a <__sfputc_r+0x16>
 8004466:	290a      	cmp	r1, #10
 8004468:	d102      	bne.n	8004470 <__sfputc_r+0x1c>
 800446a:	bc10      	pop	{r4}
 800446c:	f7ff bc6e 	b.w	8003d4c <__swbuf_r>
 8004470:	6813      	ldr	r3, [r2, #0]
 8004472:	1c58      	adds	r0, r3, #1
 8004474:	6010      	str	r0, [r2, #0]
 8004476:	7019      	strb	r1, [r3, #0]
 8004478:	4608      	mov	r0, r1
 800447a:	bc10      	pop	{r4}
 800447c:	4770      	bx	lr

0800447e <__sfputs_r>:
 800447e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004480:	4606      	mov	r6, r0
 8004482:	460f      	mov	r7, r1
 8004484:	4614      	mov	r4, r2
 8004486:	18d5      	adds	r5, r2, r3
 8004488:	42ac      	cmp	r4, r5
 800448a:	d101      	bne.n	8004490 <__sfputs_r+0x12>
 800448c:	2000      	movs	r0, #0
 800448e:	e007      	b.n	80044a0 <__sfputs_r+0x22>
 8004490:	463a      	mov	r2, r7
 8004492:	4630      	mov	r0, r6
 8004494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004498:	f7ff ffdc 	bl	8004454 <__sfputc_r>
 800449c:	1c43      	adds	r3, r0, #1
 800449e:	d1f3      	bne.n	8004488 <__sfputs_r+0xa>
 80044a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044a4 <_vfiprintf_r>:
 80044a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a8:	460d      	mov	r5, r1
 80044aa:	4614      	mov	r4, r2
 80044ac:	4698      	mov	r8, r3
 80044ae:	4606      	mov	r6, r0
 80044b0:	b09d      	sub	sp, #116	; 0x74
 80044b2:	b118      	cbz	r0, 80044bc <_vfiprintf_r+0x18>
 80044b4:	6983      	ldr	r3, [r0, #24]
 80044b6:	b90b      	cbnz	r3, 80044bc <_vfiprintf_r+0x18>
 80044b8:	f7ff fe22 	bl	8004100 <__sinit>
 80044bc:	4b89      	ldr	r3, [pc, #548]	; (80046e4 <_vfiprintf_r+0x240>)
 80044be:	429d      	cmp	r5, r3
 80044c0:	d11b      	bne.n	80044fa <_vfiprintf_r+0x56>
 80044c2:	6875      	ldr	r5, [r6, #4]
 80044c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044c6:	07d9      	lsls	r1, r3, #31
 80044c8:	d405      	bmi.n	80044d6 <_vfiprintf_r+0x32>
 80044ca:	89ab      	ldrh	r3, [r5, #12]
 80044cc:	059a      	lsls	r2, r3, #22
 80044ce:	d402      	bmi.n	80044d6 <_vfiprintf_r+0x32>
 80044d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044d2:	f7ff feb3 	bl	800423c <__retarget_lock_acquire_recursive>
 80044d6:	89ab      	ldrh	r3, [r5, #12]
 80044d8:	071b      	lsls	r3, r3, #28
 80044da:	d501      	bpl.n	80044e0 <_vfiprintf_r+0x3c>
 80044dc:	692b      	ldr	r3, [r5, #16]
 80044de:	b9eb      	cbnz	r3, 800451c <_vfiprintf_r+0x78>
 80044e0:	4629      	mov	r1, r5
 80044e2:	4630      	mov	r0, r6
 80044e4:	f7ff fc84 	bl	8003df0 <__swsetup_r>
 80044e8:	b1c0      	cbz	r0, 800451c <_vfiprintf_r+0x78>
 80044ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044ec:	07dc      	lsls	r4, r3, #31
 80044ee:	d50e      	bpl.n	800450e <_vfiprintf_r+0x6a>
 80044f0:	f04f 30ff 	mov.w	r0, #4294967295
 80044f4:	b01d      	add	sp, #116	; 0x74
 80044f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044fa:	4b7b      	ldr	r3, [pc, #492]	; (80046e8 <_vfiprintf_r+0x244>)
 80044fc:	429d      	cmp	r5, r3
 80044fe:	d101      	bne.n	8004504 <_vfiprintf_r+0x60>
 8004500:	68b5      	ldr	r5, [r6, #8]
 8004502:	e7df      	b.n	80044c4 <_vfiprintf_r+0x20>
 8004504:	4b79      	ldr	r3, [pc, #484]	; (80046ec <_vfiprintf_r+0x248>)
 8004506:	429d      	cmp	r5, r3
 8004508:	bf08      	it	eq
 800450a:	68f5      	ldreq	r5, [r6, #12]
 800450c:	e7da      	b.n	80044c4 <_vfiprintf_r+0x20>
 800450e:	89ab      	ldrh	r3, [r5, #12]
 8004510:	0598      	lsls	r0, r3, #22
 8004512:	d4ed      	bmi.n	80044f0 <_vfiprintf_r+0x4c>
 8004514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004516:	f7ff fe92 	bl	800423e <__retarget_lock_release_recursive>
 800451a:	e7e9      	b.n	80044f0 <_vfiprintf_r+0x4c>
 800451c:	2300      	movs	r3, #0
 800451e:	9309      	str	r3, [sp, #36]	; 0x24
 8004520:	2320      	movs	r3, #32
 8004522:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004526:	2330      	movs	r3, #48	; 0x30
 8004528:	f04f 0901 	mov.w	r9, #1
 800452c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004530:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80046f0 <_vfiprintf_r+0x24c>
 8004534:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004538:	4623      	mov	r3, r4
 800453a:	469a      	mov	sl, r3
 800453c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004540:	b10a      	cbz	r2, 8004546 <_vfiprintf_r+0xa2>
 8004542:	2a25      	cmp	r2, #37	; 0x25
 8004544:	d1f9      	bne.n	800453a <_vfiprintf_r+0x96>
 8004546:	ebba 0b04 	subs.w	fp, sl, r4
 800454a:	d00b      	beq.n	8004564 <_vfiprintf_r+0xc0>
 800454c:	465b      	mov	r3, fp
 800454e:	4622      	mov	r2, r4
 8004550:	4629      	mov	r1, r5
 8004552:	4630      	mov	r0, r6
 8004554:	f7ff ff93 	bl	800447e <__sfputs_r>
 8004558:	3001      	adds	r0, #1
 800455a:	f000 80aa 	beq.w	80046b2 <_vfiprintf_r+0x20e>
 800455e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004560:	445a      	add	r2, fp
 8004562:	9209      	str	r2, [sp, #36]	; 0x24
 8004564:	f89a 3000 	ldrb.w	r3, [sl]
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 80a2 	beq.w	80046b2 <_vfiprintf_r+0x20e>
 800456e:	2300      	movs	r3, #0
 8004570:	f04f 32ff 	mov.w	r2, #4294967295
 8004574:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004578:	f10a 0a01 	add.w	sl, sl, #1
 800457c:	9304      	str	r3, [sp, #16]
 800457e:	9307      	str	r3, [sp, #28]
 8004580:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004584:	931a      	str	r3, [sp, #104]	; 0x68
 8004586:	4654      	mov	r4, sl
 8004588:	2205      	movs	r2, #5
 800458a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800458e:	4858      	ldr	r0, [pc, #352]	; (80046f0 <_vfiprintf_r+0x24c>)
 8004590:	f000 faf8 	bl	8004b84 <memchr>
 8004594:	9a04      	ldr	r2, [sp, #16]
 8004596:	b9d8      	cbnz	r0, 80045d0 <_vfiprintf_r+0x12c>
 8004598:	06d1      	lsls	r1, r2, #27
 800459a:	bf44      	itt	mi
 800459c:	2320      	movmi	r3, #32
 800459e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045a2:	0713      	lsls	r3, r2, #28
 80045a4:	bf44      	itt	mi
 80045a6:	232b      	movmi	r3, #43	; 0x2b
 80045a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045ac:	f89a 3000 	ldrb.w	r3, [sl]
 80045b0:	2b2a      	cmp	r3, #42	; 0x2a
 80045b2:	d015      	beq.n	80045e0 <_vfiprintf_r+0x13c>
 80045b4:	4654      	mov	r4, sl
 80045b6:	2000      	movs	r0, #0
 80045b8:	f04f 0c0a 	mov.w	ip, #10
 80045bc:	9a07      	ldr	r2, [sp, #28]
 80045be:	4621      	mov	r1, r4
 80045c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045c4:	3b30      	subs	r3, #48	; 0x30
 80045c6:	2b09      	cmp	r3, #9
 80045c8:	d94e      	bls.n	8004668 <_vfiprintf_r+0x1c4>
 80045ca:	b1b0      	cbz	r0, 80045fa <_vfiprintf_r+0x156>
 80045cc:	9207      	str	r2, [sp, #28]
 80045ce:	e014      	b.n	80045fa <_vfiprintf_r+0x156>
 80045d0:	eba0 0308 	sub.w	r3, r0, r8
 80045d4:	fa09 f303 	lsl.w	r3, r9, r3
 80045d8:	4313      	orrs	r3, r2
 80045da:	46a2      	mov	sl, r4
 80045dc:	9304      	str	r3, [sp, #16]
 80045de:	e7d2      	b.n	8004586 <_vfiprintf_r+0xe2>
 80045e0:	9b03      	ldr	r3, [sp, #12]
 80045e2:	1d19      	adds	r1, r3, #4
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	9103      	str	r1, [sp, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bfbb      	ittet	lt
 80045ec:	425b      	neglt	r3, r3
 80045ee:	f042 0202 	orrlt.w	r2, r2, #2
 80045f2:	9307      	strge	r3, [sp, #28]
 80045f4:	9307      	strlt	r3, [sp, #28]
 80045f6:	bfb8      	it	lt
 80045f8:	9204      	strlt	r2, [sp, #16]
 80045fa:	7823      	ldrb	r3, [r4, #0]
 80045fc:	2b2e      	cmp	r3, #46	; 0x2e
 80045fe:	d10c      	bne.n	800461a <_vfiprintf_r+0x176>
 8004600:	7863      	ldrb	r3, [r4, #1]
 8004602:	2b2a      	cmp	r3, #42	; 0x2a
 8004604:	d135      	bne.n	8004672 <_vfiprintf_r+0x1ce>
 8004606:	9b03      	ldr	r3, [sp, #12]
 8004608:	3402      	adds	r4, #2
 800460a:	1d1a      	adds	r2, r3, #4
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	9203      	str	r2, [sp, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	bfb8      	it	lt
 8004614:	f04f 33ff 	movlt.w	r3, #4294967295
 8004618:	9305      	str	r3, [sp, #20]
 800461a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004700 <_vfiprintf_r+0x25c>
 800461e:	2203      	movs	r2, #3
 8004620:	4650      	mov	r0, sl
 8004622:	7821      	ldrb	r1, [r4, #0]
 8004624:	f000 faae 	bl	8004b84 <memchr>
 8004628:	b140      	cbz	r0, 800463c <_vfiprintf_r+0x198>
 800462a:	2340      	movs	r3, #64	; 0x40
 800462c:	eba0 000a 	sub.w	r0, r0, sl
 8004630:	fa03 f000 	lsl.w	r0, r3, r0
 8004634:	9b04      	ldr	r3, [sp, #16]
 8004636:	3401      	adds	r4, #1
 8004638:	4303      	orrs	r3, r0
 800463a:	9304      	str	r3, [sp, #16]
 800463c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004640:	2206      	movs	r2, #6
 8004642:	482c      	ldr	r0, [pc, #176]	; (80046f4 <_vfiprintf_r+0x250>)
 8004644:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004648:	f000 fa9c 	bl	8004b84 <memchr>
 800464c:	2800      	cmp	r0, #0
 800464e:	d03f      	beq.n	80046d0 <_vfiprintf_r+0x22c>
 8004650:	4b29      	ldr	r3, [pc, #164]	; (80046f8 <_vfiprintf_r+0x254>)
 8004652:	bb1b      	cbnz	r3, 800469c <_vfiprintf_r+0x1f8>
 8004654:	9b03      	ldr	r3, [sp, #12]
 8004656:	3307      	adds	r3, #7
 8004658:	f023 0307 	bic.w	r3, r3, #7
 800465c:	3308      	adds	r3, #8
 800465e:	9303      	str	r3, [sp, #12]
 8004660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004662:	443b      	add	r3, r7
 8004664:	9309      	str	r3, [sp, #36]	; 0x24
 8004666:	e767      	b.n	8004538 <_vfiprintf_r+0x94>
 8004668:	460c      	mov	r4, r1
 800466a:	2001      	movs	r0, #1
 800466c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004670:	e7a5      	b.n	80045be <_vfiprintf_r+0x11a>
 8004672:	2300      	movs	r3, #0
 8004674:	f04f 0c0a 	mov.w	ip, #10
 8004678:	4619      	mov	r1, r3
 800467a:	3401      	adds	r4, #1
 800467c:	9305      	str	r3, [sp, #20]
 800467e:	4620      	mov	r0, r4
 8004680:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004684:	3a30      	subs	r2, #48	; 0x30
 8004686:	2a09      	cmp	r2, #9
 8004688:	d903      	bls.n	8004692 <_vfiprintf_r+0x1ee>
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0c5      	beq.n	800461a <_vfiprintf_r+0x176>
 800468e:	9105      	str	r1, [sp, #20]
 8004690:	e7c3      	b.n	800461a <_vfiprintf_r+0x176>
 8004692:	4604      	mov	r4, r0
 8004694:	2301      	movs	r3, #1
 8004696:	fb0c 2101 	mla	r1, ip, r1, r2
 800469a:	e7f0      	b.n	800467e <_vfiprintf_r+0x1da>
 800469c:	ab03      	add	r3, sp, #12
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	462a      	mov	r2, r5
 80046a2:	4630      	mov	r0, r6
 80046a4:	4b15      	ldr	r3, [pc, #84]	; (80046fc <_vfiprintf_r+0x258>)
 80046a6:	a904      	add	r1, sp, #16
 80046a8:	f3af 8000 	nop.w
 80046ac:	4607      	mov	r7, r0
 80046ae:	1c78      	adds	r0, r7, #1
 80046b0:	d1d6      	bne.n	8004660 <_vfiprintf_r+0x1bc>
 80046b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046b4:	07d9      	lsls	r1, r3, #31
 80046b6:	d405      	bmi.n	80046c4 <_vfiprintf_r+0x220>
 80046b8:	89ab      	ldrh	r3, [r5, #12]
 80046ba:	059a      	lsls	r2, r3, #22
 80046bc:	d402      	bmi.n	80046c4 <_vfiprintf_r+0x220>
 80046be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046c0:	f7ff fdbd 	bl	800423e <__retarget_lock_release_recursive>
 80046c4:	89ab      	ldrh	r3, [r5, #12]
 80046c6:	065b      	lsls	r3, r3, #25
 80046c8:	f53f af12 	bmi.w	80044f0 <_vfiprintf_r+0x4c>
 80046cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046ce:	e711      	b.n	80044f4 <_vfiprintf_r+0x50>
 80046d0:	ab03      	add	r3, sp, #12
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	462a      	mov	r2, r5
 80046d6:	4630      	mov	r0, r6
 80046d8:	4b08      	ldr	r3, [pc, #32]	; (80046fc <_vfiprintf_r+0x258>)
 80046da:	a904      	add	r1, sp, #16
 80046dc:	f000 f882 	bl	80047e4 <_printf_i>
 80046e0:	e7e4      	b.n	80046ac <_vfiprintf_r+0x208>
 80046e2:	bf00      	nop
 80046e4:	08004cd8 	.word	0x08004cd8
 80046e8:	08004cf8 	.word	0x08004cf8
 80046ec:	08004cb8 	.word	0x08004cb8
 80046f0:	08004d18 	.word	0x08004d18
 80046f4:	08004d22 	.word	0x08004d22
 80046f8:	00000000 	.word	0x00000000
 80046fc:	0800447f 	.word	0x0800447f
 8004700:	08004d1e 	.word	0x08004d1e

08004704 <_printf_common>:
 8004704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004708:	4616      	mov	r6, r2
 800470a:	4699      	mov	r9, r3
 800470c:	688a      	ldr	r2, [r1, #8]
 800470e:	690b      	ldr	r3, [r1, #16]
 8004710:	4607      	mov	r7, r0
 8004712:	4293      	cmp	r3, r2
 8004714:	bfb8      	it	lt
 8004716:	4613      	movlt	r3, r2
 8004718:	6033      	str	r3, [r6, #0]
 800471a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800471e:	460c      	mov	r4, r1
 8004720:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004724:	b10a      	cbz	r2, 800472a <_printf_common+0x26>
 8004726:	3301      	adds	r3, #1
 8004728:	6033      	str	r3, [r6, #0]
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	0699      	lsls	r1, r3, #26
 800472e:	bf42      	ittt	mi
 8004730:	6833      	ldrmi	r3, [r6, #0]
 8004732:	3302      	addmi	r3, #2
 8004734:	6033      	strmi	r3, [r6, #0]
 8004736:	6825      	ldr	r5, [r4, #0]
 8004738:	f015 0506 	ands.w	r5, r5, #6
 800473c:	d106      	bne.n	800474c <_printf_common+0x48>
 800473e:	f104 0a19 	add.w	sl, r4, #25
 8004742:	68e3      	ldr	r3, [r4, #12]
 8004744:	6832      	ldr	r2, [r6, #0]
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	42ab      	cmp	r3, r5
 800474a:	dc28      	bgt.n	800479e <_printf_common+0x9a>
 800474c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004750:	1e13      	subs	r3, r2, #0
 8004752:	6822      	ldr	r2, [r4, #0]
 8004754:	bf18      	it	ne
 8004756:	2301      	movne	r3, #1
 8004758:	0692      	lsls	r2, r2, #26
 800475a:	d42d      	bmi.n	80047b8 <_printf_common+0xb4>
 800475c:	4649      	mov	r1, r9
 800475e:	4638      	mov	r0, r7
 8004760:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004764:	47c0      	blx	r8
 8004766:	3001      	adds	r0, #1
 8004768:	d020      	beq.n	80047ac <_printf_common+0xa8>
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	68e5      	ldr	r5, [r4, #12]
 800476e:	f003 0306 	and.w	r3, r3, #6
 8004772:	2b04      	cmp	r3, #4
 8004774:	bf18      	it	ne
 8004776:	2500      	movne	r5, #0
 8004778:	6832      	ldr	r2, [r6, #0]
 800477a:	f04f 0600 	mov.w	r6, #0
 800477e:	68a3      	ldr	r3, [r4, #8]
 8004780:	bf08      	it	eq
 8004782:	1aad      	subeq	r5, r5, r2
 8004784:	6922      	ldr	r2, [r4, #16]
 8004786:	bf08      	it	eq
 8004788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800478c:	4293      	cmp	r3, r2
 800478e:	bfc4      	itt	gt
 8004790:	1a9b      	subgt	r3, r3, r2
 8004792:	18ed      	addgt	r5, r5, r3
 8004794:	341a      	adds	r4, #26
 8004796:	42b5      	cmp	r5, r6
 8004798:	d11a      	bne.n	80047d0 <_printf_common+0xcc>
 800479a:	2000      	movs	r0, #0
 800479c:	e008      	b.n	80047b0 <_printf_common+0xac>
 800479e:	2301      	movs	r3, #1
 80047a0:	4652      	mov	r2, sl
 80047a2:	4649      	mov	r1, r9
 80047a4:	4638      	mov	r0, r7
 80047a6:	47c0      	blx	r8
 80047a8:	3001      	adds	r0, #1
 80047aa:	d103      	bne.n	80047b4 <_printf_common+0xb0>
 80047ac:	f04f 30ff 	mov.w	r0, #4294967295
 80047b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b4:	3501      	adds	r5, #1
 80047b6:	e7c4      	b.n	8004742 <_printf_common+0x3e>
 80047b8:	2030      	movs	r0, #48	; 0x30
 80047ba:	18e1      	adds	r1, r4, r3
 80047bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047c6:	4422      	add	r2, r4
 80047c8:	3302      	adds	r3, #2
 80047ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047ce:	e7c5      	b.n	800475c <_printf_common+0x58>
 80047d0:	2301      	movs	r3, #1
 80047d2:	4622      	mov	r2, r4
 80047d4:	4649      	mov	r1, r9
 80047d6:	4638      	mov	r0, r7
 80047d8:	47c0      	blx	r8
 80047da:	3001      	adds	r0, #1
 80047dc:	d0e6      	beq.n	80047ac <_printf_common+0xa8>
 80047de:	3601      	adds	r6, #1
 80047e0:	e7d9      	b.n	8004796 <_printf_common+0x92>
	...

080047e4 <_printf_i>:
 80047e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047e8:	460c      	mov	r4, r1
 80047ea:	7e27      	ldrb	r7, [r4, #24]
 80047ec:	4691      	mov	r9, r2
 80047ee:	2f78      	cmp	r7, #120	; 0x78
 80047f0:	4680      	mov	r8, r0
 80047f2:	469a      	mov	sl, r3
 80047f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80047f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047fa:	d807      	bhi.n	800480c <_printf_i+0x28>
 80047fc:	2f62      	cmp	r7, #98	; 0x62
 80047fe:	d80a      	bhi.n	8004816 <_printf_i+0x32>
 8004800:	2f00      	cmp	r7, #0
 8004802:	f000 80d9 	beq.w	80049b8 <_printf_i+0x1d4>
 8004806:	2f58      	cmp	r7, #88	; 0x58
 8004808:	f000 80a4 	beq.w	8004954 <_printf_i+0x170>
 800480c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004810:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004814:	e03a      	b.n	800488c <_printf_i+0xa8>
 8004816:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800481a:	2b15      	cmp	r3, #21
 800481c:	d8f6      	bhi.n	800480c <_printf_i+0x28>
 800481e:	a001      	add	r0, pc, #4	; (adr r0, 8004824 <_printf_i+0x40>)
 8004820:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004824:	0800487d 	.word	0x0800487d
 8004828:	08004891 	.word	0x08004891
 800482c:	0800480d 	.word	0x0800480d
 8004830:	0800480d 	.word	0x0800480d
 8004834:	0800480d 	.word	0x0800480d
 8004838:	0800480d 	.word	0x0800480d
 800483c:	08004891 	.word	0x08004891
 8004840:	0800480d 	.word	0x0800480d
 8004844:	0800480d 	.word	0x0800480d
 8004848:	0800480d 	.word	0x0800480d
 800484c:	0800480d 	.word	0x0800480d
 8004850:	0800499f 	.word	0x0800499f
 8004854:	080048c1 	.word	0x080048c1
 8004858:	08004981 	.word	0x08004981
 800485c:	0800480d 	.word	0x0800480d
 8004860:	0800480d 	.word	0x0800480d
 8004864:	080049c1 	.word	0x080049c1
 8004868:	0800480d 	.word	0x0800480d
 800486c:	080048c1 	.word	0x080048c1
 8004870:	0800480d 	.word	0x0800480d
 8004874:	0800480d 	.word	0x0800480d
 8004878:	08004989 	.word	0x08004989
 800487c:	680b      	ldr	r3, [r1, #0]
 800487e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004882:	1d1a      	adds	r2, r3, #4
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	600a      	str	r2, [r1, #0]
 8004888:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800488c:	2301      	movs	r3, #1
 800488e:	e0a4      	b.n	80049da <_printf_i+0x1f6>
 8004890:	6825      	ldr	r5, [r4, #0]
 8004892:	6808      	ldr	r0, [r1, #0]
 8004894:	062e      	lsls	r6, r5, #24
 8004896:	f100 0304 	add.w	r3, r0, #4
 800489a:	d50a      	bpl.n	80048b2 <_printf_i+0xce>
 800489c:	6805      	ldr	r5, [r0, #0]
 800489e:	600b      	str	r3, [r1, #0]
 80048a0:	2d00      	cmp	r5, #0
 80048a2:	da03      	bge.n	80048ac <_printf_i+0xc8>
 80048a4:	232d      	movs	r3, #45	; 0x2d
 80048a6:	426d      	negs	r5, r5
 80048a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048ac:	230a      	movs	r3, #10
 80048ae:	485e      	ldr	r0, [pc, #376]	; (8004a28 <_printf_i+0x244>)
 80048b0:	e019      	b.n	80048e6 <_printf_i+0x102>
 80048b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80048b6:	6805      	ldr	r5, [r0, #0]
 80048b8:	600b      	str	r3, [r1, #0]
 80048ba:	bf18      	it	ne
 80048bc:	b22d      	sxthne	r5, r5
 80048be:	e7ef      	b.n	80048a0 <_printf_i+0xbc>
 80048c0:	680b      	ldr	r3, [r1, #0]
 80048c2:	6825      	ldr	r5, [r4, #0]
 80048c4:	1d18      	adds	r0, r3, #4
 80048c6:	6008      	str	r0, [r1, #0]
 80048c8:	0628      	lsls	r0, r5, #24
 80048ca:	d501      	bpl.n	80048d0 <_printf_i+0xec>
 80048cc:	681d      	ldr	r5, [r3, #0]
 80048ce:	e002      	b.n	80048d6 <_printf_i+0xf2>
 80048d0:	0669      	lsls	r1, r5, #25
 80048d2:	d5fb      	bpl.n	80048cc <_printf_i+0xe8>
 80048d4:	881d      	ldrh	r5, [r3, #0]
 80048d6:	2f6f      	cmp	r7, #111	; 0x6f
 80048d8:	bf0c      	ite	eq
 80048da:	2308      	moveq	r3, #8
 80048dc:	230a      	movne	r3, #10
 80048de:	4852      	ldr	r0, [pc, #328]	; (8004a28 <_printf_i+0x244>)
 80048e0:	2100      	movs	r1, #0
 80048e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048e6:	6866      	ldr	r6, [r4, #4]
 80048e8:	2e00      	cmp	r6, #0
 80048ea:	bfa8      	it	ge
 80048ec:	6821      	ldrge	r1, [r4, #0]
 80048ee:	60a6      	str	r6, [r4, #8]
 80048f0:	bfa4      	itt	ge
 80048f2:	f021 0104 	bicge.w	r1, r1, #4
 80048f6:	6021      	strge	r1, [r4, #0]
 80048f8:	b90d      	cbnz	r5, 80048fe <_printf_i+0x11a>
 80048fa:	2e00      	cmp	r6, #0
 80048fc:	d04d      	beq.n	800499a <_printf_i+0x1b6>
 80048fe:	4616      	mov	r6, r2
 8004900:	fbb5 f1f3 	udiv	r1, r5, r3
 8004904:	fb03 5711 	mls	r7, r3, r1, r5
 8004908:	5dc7      	ldrb	r7, [r0, r7]
 800490a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800490e:	462f      	mov	r7, r5
 8004910:	42bb      	cmp	r3, r7
 8004912:	460d      	mov	r5, r1
 8004914:	d9f4      	bls.n	8004900 <_printf_i+0x11c>
 8004916:	2b08      	cmp	r3, #8
 8004918:	d10b      	bne.n	8004932 <_printf_i+0x14e>
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	07df      	lsls	r7, r3, #31
 800491e:	d508      	bpl.n	8004932 <_printf_i+0x14e>
 8004920:	6923      	ldr	r3, [r4, #16]
 8004922:	6861      	ldr	r1, [r4, #4]
 8004924:	4299      	cmp	r1, r3
 8004926:	bfde      	ittt	le
 8004928:	2330      	movle	r3, #48	; 0x30
 800492a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800492e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004932:	1b92      	subs	r2, r2, r6
 8004934:	6122      	str	r2, [r4, #16]
 8004936:	464b      	mov	r3, r9
 8004938:	4621      	mov	r1, r4
 800493a:	4640      	mov	r0, r8
 800493c:	f8cd a000 	str.w	sl, [sp]
 8004940:	aa03      	add	r2, sp, #12
 8004942:	f7ff fedf 	bl	8004704 <_printf_common>
 8004946:	3001      	adds	r0, #1
 8004948:	d14c      	bne.n	80049e4 <_printf_i+0x200>
 800494a:	f04f 30ff 	mov.w	r0, #4294967295
 800494e:	b004      	add	sp, #16
 8004950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004954:	4834      	ldr	r0, [pc, #208]	; (8004a28 <_printf_i+0x244>)
 8004956:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800495a:	680e      	ldr	r6, [r1, #0]
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004962:	061f      	lsls	r7, r3, #24
 8004964:	600e      	str	r6, [r1, #0]
 8004966:	d514      	bpl.n	8004992 <_printf_i+0x1ae>
 8004968:	07d9      	lsls	r1, r3, #31
 800496a:	bf44      	itt	mi
 800496c:	f043 0320 	orrmi.w	r3, r3, #32
 8004970:	6023      	strmi	r3, [r4, #0]
 8004972:	b91d      	cbnz	r5, 800497c <_printf_i+0x198>
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	f023 0320 	bic.w	r3, r3, #32
 800497a:	6023      	str	r3, [r4, #0]
 800497c:	2310      	movs	r3, #16
 800497e:	e7af      	b.n	80048e0 <_printf_i+0xfc>
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	f043 0320 	orr.w	r3, r3, #32
 8004986:	6023      	str	r3, [r4, #0]
 8004988:	2378      	movs	r3, #120	; 0x78
 800498a:	4828      	ldr	r0, [pc, #160]	; (8004a2c <_printf_i+0x248>)
 800498c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004990:	e7e3      	b.n	800495a <_printf_i+0x176>
 8004992:	065e      	lsls	r6, r3, #25
 8004994:	bf48      	it	mi
 8004996:	b2ad      	uxthmi	r5, r5
 8004998:	e7e6      	b.n	8004968 <_printf_i+0x184>
 800499a:	4616      	mov	r6, r2
 800499c:	e7bb      	b.n	8004916 <_printf_i+0x132>
 800499e:	680b      	ldr	r3, [r1, #0]
 80049a0:	6826      	ldr	r6, [r4, #0]
 80049a2:	1d1d      	adds	r5, r3, #4
 80049a4:	6960      	ldr	r0, [r4, #20]
 80049a6:	600d      	str	r5, [r1, #0]
 80049a8:	0635      	lsls	r5, r6, #24
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	d501      	bpl.n	80049b2 <_printf_i+0x1ce>
 80049ae:	6018      	str	r0, [r3, #0]
 80049b0:	e002      	b.n	80049b8 <_printf_i+0x1d4>
 80049b2:	0671      	lsls	r1, r6, #25
 80049b4:	d5fb      	bpl.n	80049ae <_printf_i+0x1ca>
 80049b6:	8018      	strh	r0, [r3, #0]
 80049b8:	2300      	movs	r3, #0
 80049ba:	4616      	mov	r6, r2
 80049bc:	6123      	str	r3, [r4, #16]
 80049be:	e7ba      	b.n	8004936 <_printf_i+0x152>
 80049c0:	680b      	ldr	r3, [r1, #0]
 80049c2:	1d1a      	adds	r2, r3, #4
 80049c4:	600a      	str	r2, [r1, #0]
 80049c6:	681e      	ldr	r6, [r3, #0]
 80049c8:	2100      	movs	r1, #0
 80049ca:	4630      	mov	r0, r6
 80049cc:	6862      	ldr	r2, [r4, #4]
 80049ce:	f000 f8d9 	bl	8004b84 <memchr>
 80049d2:	b108      	cbz	r0, 80049d8 <_printf_i+0x1f4>
 80049d4:	1b80      	subs	r0, r0, r6
 80049d6:	6060      	str	r0, [r4, #4]
 80049d8:	6863      	ldr	r3, [r4, #4]
 80049da:	6123      	str	r3, [r4, #16]
 80049dc:	2300      	movs	r3, #0
 80049de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049e2:	e7a8      	b.n	8004936 <_printf_i+0x152>
 80049e4:	4632      	mov	r2, r6
 80049e6:	4649      	mov	r1, r9
 80049e8:	4640      	mov	r0, r8
 80049ea:	6923      	ldr	r3, [r4, #16]
 80049ec:	47d0      	blx	sl
 80049ee:	3001      	adds	r0, #1
 80049f0:	d0ab      	beq.n	800494a <_printf_i+0x166>
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	079b      	lsls	r3, r3, #30
 80049f6:	d413      	bmi.n	8004a20 <_printf_i+0x23c>
 80049f8:	68e0      	ldr	r0, [r4, #12]
 80049fa:	9b03      	ldr	r3, [sp, #12]
 80049fc:	4298      	cmp	r0, r3
 80049fe:	bfb8      	it	lt
 8004a00:	4618      	movlt	r0, r3
 8004a02:	e7a4      	b.n	800494e <_printf_i+0x16a>
 8004a04:	2301      	movs	r3, #1
 8004a06:	4632      	mov	r2, r6
 8004a08:	4649      	mov	r1, r9
 8004a0a:	4640      	mov	r0, r8
 8004a0c:	47d0      	blx	sl
 8004a0e:	3001      	adds	r0, #1
 8004a10:	d09b      	beq.n	800494a <_printf_i+0x166>
 8004a12:	3501      	adds	r5, #1
 8004a14:	68e3      	ldr	r3, [r4, #12]
 8004a16:	9903      	ldr	r1, [sp, #12]
 8004a18:	1a5b      	subs	r3, r3, r1
 8004a1a:	42ab      	cmp	r3, r5
 8004a1c:	dcf2      	bgt.n	8004a04 <_printf_i+0x220>
 8004a1e:	e7eb      	b.n	80049f8 <_printf_i+0x214>
 8004a20:	2500      	movs	r5, #0
 8004a22:	f104 0619 	add.w	r6, r4, #25
 8004a26:	e7f5      	b.n	8004a14 <_printf_i+0x230>
 8004a28:	08004d29 	.word	0x08004d29
 8004a2c:	08004d3a 	.word	0x08004d3a

08004a30 <_sbrk_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	2300      	movs	r3, #0
 8004a34:	4d05      	ldr	r5, [pc, #20]	; (8004a4c <_sbrk_r+0x1c>)
 8004a36:	4604      	mov	r4, r0
 8004a38:	4608      	mov	r0, r1
 8004a3a:	602b      	str	r3, [r5, #0]
 8004a3c:	f7fd f84e 	bl	8001adc <_sbrk>
 8004a40:	1c43      	adds	r3, r0, #1
 8004a42:	d102      	bne.n	8004a4a <_sbrk_r+0x1a>
 8004a44:	682b      	ldr	r3, [r5, #0]
 8004a46:	b103      	cbz	r3, 8004a4a <_sbrk_r+0x1a>
 8004a48:	6023      	str	r3, [r4, #0]
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
 8004a4c:	20000350 	.word	0x20000350

08004a50 <__sread>:
 8004a50:	b510      	push	{r4, lr}
 8004a52:	460c      	mov	r4, r1
 8004a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a58:	f000 f8ae 	bl	8004bb8 <_read_r>
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	bfab      	itete	ge
 8004a60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a62:	89a3      	ldrhlt	r3, [r4, #12]
 8004a64:	181b      	addge	r3, r3, r0
 8004a66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a6a:	bfac      	ite	ge
 8004a6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a6e:	81a3      	strhlt	r3, [r4, #12]
 8004a70:	bd10      	pop	{r4, pc}

08004a72 <__swrite>:
 8004a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a76:	461f      	mov	r7, r3
 8004a78:	898b      	ldrh	r3, [r1, #12]
 8004a7a:	4605      	mov	r5, r0
 8004a7c:	05db      	lsls	r3, r3, #23
 8004a7e:	460c      	mov	r4, r1
 8004a80:	4616      	mov	r6, r2
 8004a82:	d505      	bpl.n	8004a90 <__swrite+0x1e>
 8004a84:	2302      	movs	r3, #2
 8004a86:	2200      	movs	r2, #0
 8004a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a8c:	f000 f868 	bl	8004b60 <_lseek_r>
 8004a90:	89a3      	ldrh	r3, [r4, #12]
 8004a92:	4632      	mov	r2, r6
 8004a94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a98:	81a3      	strh	r3, [r4, #12]
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	463b      	mov	r3, r7
 8004a9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa6:	f000 b817 	b.w	8004ad8 <_write_r>

08004aaa <__sseek>:
 8004aaa:	b510      	push	{r4, lr}
 8004aac:	460c      	mov	r4, r1
 8004aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab2:	f000 f855 	bl	8004b60 <_lseek_r>
 8004ab6:	1c43      	adds	r3, r0, #1
 8004ab8:	89a3      	ldrh	r3, [r4, #12]
 8004aba:	bf15      	itete	ne
 8004abc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004abe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ac2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ac6:	81a3      	strheq	r3, [r4, #12]
 8004ac8:	bf18      	it	ne
 8004aca:	81a3      	strhne	r3, [r4, #12]
 8004acc:	bd10      	pop	{r4, pc}

08004ace <__sclose>:
 8004ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ad2:	f000 b813 	b.w	8004afc <_close_r>
	...

08004ad8 <_write_r>:
 8004ad8:	b538      	push	{r3, r4, r5, lr}
 8004ada:	4604      	mov	r4, r0
 8004adc:	4608      	mov	r0, r1
 8004ade:	4611      	mov	r1, r2
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	4d05      	ldr	r5, [pc, #20]	; (8004af8 <_write_r+0x20>)
 8004ae4:	602a      	str	r2, [r5, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f7fc ffab 	bl	8001a42 <_write>
 8004aec:	1c43      	adds	r3, r0, #1
 8004aee:	d102      	bne.n	8004af6 <_write_r+0x1e>
 8004af0:	682b      	ldr	r3, [r5, #0]
 8004af2:	b103      	cbz	r3, 8004af6 <_write_r+0x1e>
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	bd38      	pop	{r3, r4, r5, pc}
 8004af8:	20000350 	.word	0x20000350

08004afc <_close_r>:
 8004afc:	b538      	push	{r3, r4, r5, lr}
 8004afe:	2300      	movs	r3, #0
 8004b00:	4d05      	ldr	r5, [pc, #20]	; (8004b18 <_close_r+0x1c>)
 8004b02:	4604      	mov	r4, r0
 8004b04:	4608      	mov	r0, r1
 8004b06:	602b      	str	r3, [r5, #0]
 8004b08:	f7fc ffb7 	bl	8001a7a <_close>
 8004b0c:	1c43      	adds	r3, r0, #1
 8004b0e:	d102      	bne.n	8004b16 <_close_r+0x1a>
 8004b10:	682b      	ldr	r3, [r5, #0]
 8004b12:	b103      	cbz	r3, 8004b16 <_close_r+0x1a>
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	bd38      	pop	{r3, r4, r5, pc}
 8004b18:	20000350 	.word	0x20000350

08004b1c <_fstat_r>:
 8004b1c:	b538      	push	{r3, r4, r5, lr}
 8004b1e:	2300      	movs	r3, #0
 8004b20:	4d06      	ldr	r5, [pc, #24]	; (8004b3c <_fstat_r+0x20>)
 8004b22:	4604      	mov	r4, r0
 8004b24:	4608      	mov	r0, r1
 8004b26:	4611      	mov	r1, r2
 8004b28:	602b      	str	r3, [r5, #0]
 8004b2a:	f7fc ffb1 	bl	8001a90 <_fstat>
 8004b2e:	1c43      	adds	r3, r0, #1
 8004b30:	d102      	bne.n	8004b38 <_fstat_r+0x1c>
 8004b32:	682b      	ldr	r3, [r5, #0]
 8004b34:	b103      	cbz	r3, 8004b38 <_fstat_r+0x1c>
 8004b36:	6023      	str	r3, [r4, #0]
 8004b38:	bd38      	pop	{r3, r4, r5, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000350 	.word	0x20000350

08004b40 <_isatty_r>:
 8004b40:	b538      	push	{r3, r4, r5, lr}
 8004b42:	2300      	movs	r3, #0
 8004b44:	4d05      	ldr	r5, [pc, #20]	; (8004b5c <_isatty_r+0x1c>)
 8004b46:	4604      	mov	r4, r0
 8004b48:	4608      	mov	r0, r1
 8004b4a:	602b      	str	r3, [r5, #0]
 8004b4c:	f7fc ffaf 	bl	8001aae <_isatty>
 8004b50:	1c43      	adds	r3, r0, #1
 8004b52:	d102      	bne.n	8004b5a <_isatty_r+0x1a>
 8004b54:	682b      	ldr	r3, [r5, #0]
 8004b56:	b103      	cbz	r3, 8004b5a <_isatty_r+0x1a>
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	bd38      	pop	{r3, r4, r5, pc}
 8004b5c:	20000350 	.word	0x20000350

08004b60 <_lseek_r>:
 8004b60:	b538      	push	{r3, r4, r5, lr}
 8004b62:	4604      	mov	r4, r0
 8004b64:	4608      	mov	r0, r1
 8004b66:	4611      	mov	r1, r2
 8004b68:	2200      	movs	r2, #0
 8004b6a:	4d05      	ldr	r5, [pc, #20]	; (8004b80 <_lseek_r+0x20>)
 8004b6c:	602a      	str	r2, [r5, #0]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	f7fc ffa7 	bl	8001ac2 <_lseek>
 8004b74:	1c43      	adds	r3, r0, #1
 8004b76:	d102      	bne.n	8004b7e <_lseek_r+0x1e>
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	b103      	cbz	r3, 8004b7e <_lseek_r+0x1e>
 8004b7c:	6023      	str	r3, [r4, #0]
 8004b7e:	bd38      	pop	{r3, r4, r5, pc}
 8004b80:	20000350 	.word	0x20000350

08004b84 <memchr>:
 8004b84:	4603      	mov	r3, r0
 8004b86:	b510      	push	{r4, lr}
 8004b88:	b2c9      	uxtb	r1, r1
 8004b8a:	4402      	add	r2, r0
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	d101      	bne.n	8004b96 <memchr+0x12>
 8004b92:	2000      	movs	r0, #0
 8004b94:	e003      	b.n	8004b9e <memchr+0x1a>
 8004b96:	7804      	ldrb	r4, [r0, #0]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	428c      	cmp	r4, r1
 8004b9c:	d1f6      	bne.n	8004b8c <memchr+0x8>
 8004b9e:	bd10      	pop	{r4, pc}

08004ba0 <__malloc_lock>:
 8004ba0:	4801      	ldr	r0, [pc, #4]	; (8004ba8 <__malloc_lock+0x8>)
 8004ba2:	f7ff bb4b 	b.w	800423c <__retarget_lock_acquire_recursive>
 8004ba6:	bf00      	nop
 8004ba8:	20000348 	.word	0x20000348

08004bac <__malloc_unlock>:
 8004bac:	4801      	ldr	r0, [pc, #4]	; (8004bb4 <__malloc_unlock+0x8>)
 8004bae:	f7ff bb46 	b.w	800423e <__retarget_lock_release_recursive>
 8004bb2:	bf00      	nop
 8004bb4:	20000348 	.word	0x20000348

08004bb8 <_read_r>:
 8004bb8:	b538      	push	{r3, r4, r5, lr}
 8004bba:	4604      	mov	r4, r0
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	4d05      	ldr	r5, [pc, #20]	; (8004bd8 <_read_r+0x20>)
 8004bc4:	602a      	str	r2, [r5, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f7fc ff1e 	bl	8001a08 <_read>
 8004bcc:	1c43      	adds	r3, r0, #1
 8004bce:	d102      	bne.n	8004bd6 <_read_r+0x1e>
 8004bd0:	682b      	ldr	r3, [r5, #0]
 8004bd2:	b103      	cbz	r3, 8004bd6 <_read_r+0x1e>
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	bd38      	pop	{r3, r4, r5, pc}
 8004bd8:	20000350 	.word	0x20000350

08004bdc <_init>:
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	bf00      	nop
 8004be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be2:	bc08      	pop	{r3}
 8004be4:	469e      	mov	lr, r3
 8004be6:	4770      	bx	lr

08004be8 <_fini>:
 8004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bea:	bf00      	nop
 8004bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bee:	bc08      	pop	{r3}
 8004bf0:	469e      	mov	lr, r3
 8004bf2:	4770      	bx	lr
